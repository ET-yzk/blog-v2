import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a as n,b as s,d as t,f as l}from"./app-HHaGRXeI.js";const i={},u=n("h1",{id:"python-cls-与-self-classmethod-与-staticmethod",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-cls-与-self-classmethod-与-staticmethod","aria-hidden":"true"},"#"),s(" Python: cls 与 self，@classmethod 与 @staticmethod")],-1),d={href:"https://www.zhihu.com/people/mamingqing",target:"_blank",rel:"noopener noreferrer"},r=l(`<p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。</p><p>而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。</p><p>这有利于组织代码，把某些应该属于某个类的函数给放到那个类里去，同时有利于命名空间的整洁。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">foo1</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> name
    <span class="token keyword">def</span> <span class="token function">foo2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> name
    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">foo3</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先定义一个类A，类A中有三个函数，foo1为静态函数，用@staticmethod装饰器装饰，这种方法与类有某种关系但不需要使用到实例或者类来参与。如下两种方法都可以正常输出，也就是说既可以作为类的方法使用，也可以作为类的实例的方法使用。</p><div class="language-python" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>foo1<span class="token punctuation">(</span><span class="token string">&#39;mamq&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 输出: hello mamq</span>
A<span class="token punctuation">.</span>foo1<span class="token punctuation">(</span><span class="token string">&#39;mamq&#39;</span><span class="token punctuation">)</span><span class="token comment"># 输出: hello mamq</span>
</code></pre></div><p>foo2为正常的函数，是类的实例的函数，只能通过a调用。</p><div class="language-python" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>foo2<span class="token punctuation">(</span><span class="token string">&#39;mamq&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 输出: hello mamq</span>
A<span class="token punctuation">.</span>foo2<span class="token punctuation">(</span><span class="token string">&#39;mamq&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 报错: unbound method foo2() must be called with A instance as first argument (got str instance instead)</span>
</code></pre></div><p>foo3为类函数，cls作为第一个参数用来表示类本身. 在类方法中用到，类方法是只与类本身有关而与实例无关的方法。如下两种方法都可以正常输出。</p><div class="language-python" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>foo3<span class="token punctuation">(</span><span class="token string">&#39;mamq&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 输出: hello mamq</span>
A<span class="token punctuation">.</span>foo3<span class="token punctuation">(</span><span class="token string">&#39;mamq&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 输出: hello mamq</span>
</code></pre></div><p>但是通过例子发现staticmethod与classmethod的使用方法和输出结果相同，再看看这两种方法的区别。</p><blockquote><p>既然@staticmethod和@classmethod都可以直接类名.方法名()来调用，那他们有什么区别呢 从它们的使用上来看, @staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。 @classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。 如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。 而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。</p></blockquote><p>也就是说在classmethod中可以调用类中定义的其他方法、类的属性，但staticmethod只能通过A.a调用类的属性，但无法通过在该函数内部调用A.foo2()。修改上面的代码加以说明：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">foo1</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> name
        <span class="token keyword">print</span> A<span class="token punctuation">.</span>a <span class="token comment"># 正常</span>
        <span class="token keyword">print</span> A<span class="token punctuation">.</span>foo2<span class="token punctuation">(</span><span class="token string">&#39;mamq&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 报错: unbound method foo2() must be called with A instance as first argument (got str instance instead)</span>
    <span class="token keyword">def</span> <span class="token function">foo2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> name
    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">foo3</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> name
        <span class="token keyword">print</span> A<span class="token punctuation">.</span>a
        <span class="token keyword">print</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo2<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考资料：</p>`,15),k={href:"https://blog.csdn.net/handsomekang/article/details/9615239",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/chllovegeyuting/archive/2013/03/14/2960532.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/qq_22941191/article/details/50732442",target:"_blank",rel:"noopener noreferrer"};function v(f,g){const a=o("ExternalLinkIcon");return p(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("作者："),n("a",d,[s("秦风"),t(a)]),s("，每个人对他所属的社会都有责任，那个社会的弊病也有他一份。")])]),r,n("p",null,[n("a",k,[s("飘逸的python - @staticmethod和@classmethod的作用与区别"),t(a)])]),n("p",null,[n("a",m,[s("python中self，cls - SA高处不胜寒 - 博客园"),t(a)])]),n("p",null,[n("a",h,[s("python cls 和 self"),t(a)])])])}const _=e(i,[["render",v],["__file","Python-cls-self-classmethod-staticmethod.html.vue"]]);export{_ as default};
