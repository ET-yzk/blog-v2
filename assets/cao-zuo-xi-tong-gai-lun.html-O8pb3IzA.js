import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as p,c as o,a,b as n,d as e,f as i}from"./app-HHaGRXeI.js";const r={},c=i(`<h1 id="操作系统概论" tabindex="-1"><a class="header-anchor" href="#操作系统概论" aria-hidden="true">#</a> 操作系统概论</h1><blockquote><p>作业ip：https://10.11.119.115 / http://10.11.119.115:8234 [内网访问]</p><ul><li>初始用户及密码均为学号</li></ul><p>评分标准：</p><ul><li>出勤率+作业+课堂表现 20%</li><li>平时测验（每次5%，共8次） 40%</li><li></li></ul></blockquote><h2 id="io结构" tabindex="-1"><a class="header-anchor" href="#io结构" aria-hidden="true">#</a> IO结构</h2><blockquote><p>CPU、内存与I/O设备间的操作速率相差甚远，因此存在2中I/O结构</p></blockquote><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203011048058.png" alt="img" tabindex="0"><figcaption>img</figcaption></figure><h3 id="两种i-o结构" tabindex="-1"><a class="header-anchor" href="#两种i-o结构" aria-hidden="true">#</a> 两种I/O结构</h3><ul><li><p>同步I/O：I/O启动后，只有当I/O完成后控制权才返回给用户进程。</p><ul><li>wait指令，使CPU空闲直到下一个中断开始</li><li>循环等待</li><li>在任何时候最多只能处理一个I/O请求</li></ul></li><li><p>异步I/O：I/O启动后，控制权无须等待I/O操作完成就可返回给用户进程。</p><ul><li>系统调用 － 请求OS允许用户等待I/O操作的完成</li><li>设备状态表包含了每个I/O设备的一个条目，用来指示该设备的类型、 地址和状态（不工作、空闲或繁忙）</li><li>OS通过查询I/O设备表来判断设备的状态，并修改该条目，以反映出现中断</li></ul><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203011003197.png" alt="image-20220301100257102" tabindex="0"><figcaption>image-20220301100257102</figcaption></figure></li></ul><h3 id="外部接口的io操作模式" tabindex="-1"><a class="header-anchor" href="#外部接口的io操作模式" aria-hidden="true">#</a> 外部接口的IO操作模式</h3><blockquote><p><code>内存</code>：CPU可以直接访问，不需要通过接口</p><p><code>I/O设备</code>：需要通过被CPU访问</p></blockquote><ul><li><p>程序查询模式</p></li><li><p>中断模式</p></li><li><p>DMA模式</p></li></ul><h4 id="中断" tabindex="-1"><a class="header-anchor" href="#中断" aria-hidden="true">#</a> 中断</h4><blockquote><p>中断发生时，OS必须通过保存寄存器和程序计数器来保留CPU的状态，</p><p>分 轮询、向量中断系统，</p><p>将内核例程与用户例程分离，以决定每种类型的中断应该采取的动作。</p></blockquote><ul><li><p>中断通过中断向量表将控制传输给中断服务例程，中断向量表包括了所有设备服务例程的入口地址</p></li><li><p>中断体系结构必须保存中断指令的地址</p></li><li><p>当一个中断正被处理的时候，其他中断是被禁止的</p></li><li><p>陷阱是因错误或用户程序的特定请求所引起的软件生成中断</p></li><li><p><mark>操作系统是中断驱动的</mark></p></li></ul><h4 id="dma模式" tabindex="-1"><a class="header-anchor" href="#dma模式" aria-hidden="true">#</a> DMA模式</h4><ul><li>用于高速I/O设备，使之以接近内存的速度进行信息传输</li><li>设备传输器以块为单位直接将数据从存储器传输到主存，而无须CPU的干预</li><li>每个数据块传输的时候只产生一个中断，而不是一个字节的传输就 会产生一个中断</li></ul><h2 id="硬件保护" tabindex="-1"><a class="header-anchor" href="#硬件保护" aria-hidden="true">#</a> 硬件保护</h2><h3 id="双重模式操作" tabindex="-1"><a class="header-anchor" href="#双重模式操作" aria-hidden="true">#</a> 双重模式操作</h3><p>操作系统分用户模式和内核模式；</p><p>特权指令只能在内核[核心]模式下执行，非特权指令随意；</p><p>特权指令，如关机，在用户模式下无法执行；所有I/O指令均为特权指令；</p><p>特权指令的主要特征在于是否影响其它用户。</p><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203011130496.png" alt="image-20220301113037767" tabindex="0"><figcaption>image-20220301113037767</figcaption></figure><p>用户态切换内核态通过 <code>trap</code> 实现：</p><p><strong>访管指令或陷阱指令（trap）</strong>：</p><ul><li>CPU指令集中的一个特殊指令，只能在用户模式下执行，负责从用户模式切换到内核模式</li><li>当应用程序需要请求操作系统服务时，编译器会在发生系统调用时自动插入一条访管指令，CPU执行访管指令将产生一个访管中断(trap，自陷），然后启动相应的操作系统服务</li></ul><h4 id="硬中断、陷阱与软中断" tabindex="-1"><a class="header-anchor" href="#硬中断、陷阱与软中断" aria-hidden="true">#</a> 硬中断、陷阱与软中断</h4><blockquote><p>中断即外中断，是指来自处理机和内存外部的中断，包括I/O设备发出的I/O中断、外部信号中断、各种定时器引起的时钟中断及调试程序中设置的断点等引起的调试中断等。陷阱即内中断，主要是指在处理机和内存内部产生的中断。它包括程序运算引起的各种错误。软中断是通信进程之间用来模拟硬中断的一种信号通信方式。</p></blockquote><p>==!==陷入与硬件中断的不同：</p><p>​ ① 陷阱通常由处理机正在执行的现行指令引起，而中断则是由与现行指令无关的中断源引起的。</p><p>​ ② 陷阱处理程序提供的服务为当前进程所用，而中断处理程序提供的服务则不是为了当前进程的。</p><p>​ ③ CPU在执行完一条指令之后，下一条指令开始之前响应中断，而在一条指令执行中也可以响应陷阱。</p><p>​ ④ 在有的系统中，陷入处理程序被规定在各自的进程上下文中执行，而中断处理程序则在系统上下文中执行。</p><p>==!==软中断与硬中断的比较的相同点：</p><p>​ 中断源发中断请求或软中断信号后，CPU或接收进程在适当的时机自动进行中断处理或完成软中断信号所对应的功能。</p><p>==!==软中断与硬中断的不同点：</p><p>​ 接收软中断信号的进程不一定正好在接收时占有处理机，而相应的处理必须等到该接收进程得到处理机之后才能进行。</p><h3 id="i-o保护" tabindex="-1"><a class="header-anchor" href="#i-o保护" aria-hidden="true">#</a> I/O保护</h3><p>必须确保用户程序永远无法以monitor模式 获得计算机的控制权</p><h3 id="内存保护" tabindex="-1"><a class="header-anchor" href="#内存保护" aria-hidden="true">#</a> 内存保护</h3><h3 id="cpu保护" tabindex="-1"><a class="header-anchor" href="#cpu保护" aria-hidden="true">#</a> CPU保护</h3><p>分时系统</p><ul><li>同时性</li><li>交互性</li><li>共享性</li><li>独占性</li></ul><p>实时系统</p><ul><li>对时钟管理高要求</li><li>可靠性</li><li>过载保护</li><li>【嵌入式系统是常见的应用；一定程度上也现在了其高并发的能力】</li></ul><h2 id="操作系统服务" tabindex="-1"><a class="header-anchor" href="#操作系统服务" aria-hidden="true">#</a> 操作系统服务</h2><p>API</p><h3 id="exce-函数族" tabindex="-1"><a class="header-anchor" href="#exce-函数族" aria-hidden="true">#</a> exce 函数族</h3><blockquote><p>exec函数族提供了一个在进程中启动另一个程序执行的方法。它可以根据指定的文件名或目录名找到可执行文件，并用它来取代原调用进程的数据段、代码段和堆栈段，在执行完之后，原调用进程的内容除了进程号外，其他全部被新的进程替换了。另外，这里的可执行文件既可以是二进制文件，也可以是Linux下任何可执行的脚本文件。</p></blockquote><p>使用exec函数族主要有两种情况：</p><ul><li>当进程认为自己不能再为系统和用户做出任何贡献时，就可以调用exec函数族中的任意一个函数让自己重生。</li><li>如果一个进程想执行另一个程序，那么它就可以调用fork函数新建一个进程，然后调用exec函数族中的任意一个函数，这样看起来就像通过执行应用程序而产生了一个新进程(这种情况非常普遍)。</li></ul><p>exec函数族共有6种不同形式的函数。这6个函数可以划分为两组：</p><ol><li>execl、execle、execlp</li><li>execv、execve、execvp</li></ol><p>用例</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//使用程序名在PATH中搜索</span>
<span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   	<span class="token comment">//使用参数一给的绝对路径搜索</span>
<span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">&quot;./while&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/home/wlr&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行自定义程序</span>
</code></pre></div><p><strong>exec函数族一般规律</strong></p><p>exec函数一旦调用成功即执行新的程序，不返回。只有失败才返回，错误值为 -1。所以我们通常直接在 exec 函数调用后直接调用 perror() 和 exit()，无须 if 判断【exec函数族后缀】</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>- l<span class="token punctuation">(</span>list<span class="token punctuation">)</span>：命令行参数
- p<span class="token punctuation">(</span>path<span class="token punctuation">)</span>：搜索file时使用path变量
- v<span class="token punctuation">(</span>vector<span class="token punctuation">)</span>：使用命令行参数数组
- e<span class="token punctuation">(</span>environment<span class="token punctuation">)</span>：使用环境变量数组，不使用进程原有的环境变量，设置新加载程序运行的环境变量
</code></pre></div><h3 id="wait-函数" tabindex="-1"><a class="header-anchor" href="#wait-函数" aria-hidden="true">#</a> wait()函数</h3><p><mark>pid_t wait(int *stat_loc);</mark></p><blockquote><p>获取子进程退出状态并返回死掉的子进程ID。传整型变量地址 <code>stat_loc</code> 给函数，内核将子进程的退出状态保存在这个变量中，并返回子进程 pid。</p><p>调用会阻止调用进程，直到它的一个子进程退出或收到信号为止。子进程终止后，父进程在wait系统调用指令后继续执行。</p></blockquote><p>父进程调用wait函数可以回收子进程终止信息。该函数有三个功能：</p><ul><li>阻塞等待子进程退出</li><li>回收子进程残留资源</li><li>获取子进程结束状态（退出原因）</li></ul><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204121803114.png" alt="wait()" tabindex="0"><figcaption>wait()</figcaption></figure><h3 id="getpid-函数" tabindex="-1"><a class="header-anchor" href="#getpid-函数" aria-hidden="true">#</a> getpid()函数</h3><blockquote><p>获取当前进程 PID</p></blockquote><h3 id="getppid-函数" tabindex="-1"><a class="header-anchor" href="#getppid-函数" aria-hidden="true">#</a> getppid()函数</h3><blockquote><p>获取当前进程 PPID</p></blockquote><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><blockquote><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是<strong>系统进行资源分配和调度的基本单位</strong>，是操作系统结构的基础。</p><p>线程（Thread）是<strong>操作系统能够进行运算调度的最小单位</strong>。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p></blockquote><p>CPU调度的基本单位是是线程。</p><p>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p><h3 id="pcb-进程控制块" tabindex="-1"><a class="header-anchor" href="#pcb-进程控制块" aria-hidden="true">#</a> PCB 进程控制块</h3><p>每个进程在内核中都有一个进程控制块(PCB)来维护进程相关的信息。其作用是使一个在多道程序环境下不能独立运行的程序成为一个能独立运行的基本单位或其他进程并发执行的进程。PCB是系统感知进程存在的唯一标识。</p><h3 id="进程调度" tabindex="-1"><a class="header-anchor" href="#进程调度" aria-hidden="true">#</a> 进程调度</h3><blockquote><p>高级调度 (外存 --&gt; 内存)：作业调度</p><p>中级调度 (外存 --&gt; 内存)：内存调度</p><p>低级调度 (内存 --&gt; CPU)：进程调度</p></blockquote><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291635116.png" alt="进程调度" tabindex="0"><figcaption>进程调度</figcaption></figure><ul><li><strong>作业调度</strong>：作业调度一般是将一个作业从外存调入内存，为其分配内存、外设等资源，使其能够竞争处理机资源。对每个作业来说，每个作业一般只调入一次、调出一次。</li><li><strong>内存调度</strong>：内存调度是为了<strong>提高内存利用率</strong>和<strong>系统吞吐量</strong>，一般会将暂时无法运行的进程挂起，当具备运行条件且内存有空闲时，会将这些进程调回，挂在就绪队列上等待调度。</li><li><strong>进程调度</strong>：最频繁的调度方式，一般从就绪队列中调出一个进程，为它分配处理机资源。</li></ul><p><strong>简单例子：</strong></p><ul><li><strong>高级调度：研究怎么让还没进入过厕所的人进入厕所。(厕所外 --&gt; 厕所内，之前一直在厕所外)</strong></li><li><strong>中级调度：有的人进入了厕所，但是尿不出来，于是他们被赶了出去。中级调度就是研究怎么让这些被赶出去的人再次回到厕所。 (厕所外 --&gt; 厕所内，之前进入过厕所)</strong></li><li><strong>低级调度：研究怎么给厕所内的人分配马桶。(厕所内 --&gt; 马桶上)</strong></li></ul><h3 id="进程调度方式" tabindex="-1"><a class="header-anchor" href="#进程调度方式" aria-hidden="true">#</a> <strong>进程调度方式</strong></h3><ul><li><strong>非剥夺调度方式</strong>：当一个进程处于运行状态时，即使有更紧急或优先级更高的进程进入就绪队列，也不会抢占正在运行进程的处理机资源，只有当前运行进程结束运行或进入阻塞状态时才会从就绪队列将更紧迫的进程调出并分配处理机资源。</li><li><strong>剥夺调度方式</strong>：当有一个更紧急或优先级更高的进程需要使用处理机，当前进程会被暂停，执行更紧迫进程的调度方式。</li></ul><h3 id="进程的挂起态与七状态模型" tabindex="-1"><a class="header-anchor" href="#进程的挂起态与七状态模型" aria-hidden="true">#</a> 进程的挂起态与七状态模型</h3><blockquote><p>暂时调到外存等待的进程状态为挂起态。挂起态其实又可以进一步细分为就绪挂起、阻塞挂起两种状态，于是，五状态模型现在变成了七状态模型。</p></blockquote><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291637189.png" alt="进程的挂起态与七状态模型" tabindex="0"><figcaption>进程的挂起态与七状态模型</figcaption></figure><h2 id="调度基本准则" tabindex="-1"><a class="header-anchor" href="#调度基本准则" aria-hidden="true">#</a> <strong>调度基本准则</strong></h2><ul><li>CPU利用率：当CPU一直处于忙碌状态时，CPU利用率最高。</li><li>系统吞吐量：表示单位时间内完成的作业数量，当作业都是短作业时，系统吞吐量会比较大。</li><li><mark>周转时间</mark>：是作业从提交到完成的时间，包括作业等待、在就绪队列排队、运行、IO操作的时间总和。</li><li>平均周转时间：是多个作业的周转时间的平均值。</li><li>带权周转时间：<img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291649226.png" alt="image-20220429164957168"></li><li>平均带权周转时间：是多个带权周转时间的平均值。</li><li><mark>等待时间</mark>：进程等待处理机的时间之和。</li><li><mark>响应时间</mark>：从用户提交到首次响应所花费的时间。</li></ul><h2 id="调度算法" tabindex="-1"><a class="header-anchor" href="#调度算法" aria-hidden="true">#</a> <strong>调度算法</strong></h2><h3 id="先来先服务-fcfs-调度算法" tabindex="-1"><a class="header-anchor" href="#先来先服务-fcfs-调度算法" aria-hidden="true">#</a> <strong>先来先服务（FCFS）调度算法</strong></h3><p>从名字就可以知道这是一种“先来后到”的调度算法，这种调度算法支持作业调度和进程调度。FCFS调度算法每次挑选队列中最先到达的进程或作业，依次进行调度。 这是一种<strong>非剥夺调度算法</strong>，直观来看，非常公平，但是还是有缺点的。</p><p>特点：算法简单，但效率低，对长作业有利，短作业可能要等待很长时间。有利于CPU密集型作业，不利于IO密集型作业。</p><h3 id="短作业-进程优先-sjf-spf-调度算法" tabindex="-1"><a class="header-anchor" href="#短作业-进程优先-sjf-spf-调度算法" aria-hidden="true">#</a> <strong>短作业/进程优先（SJF/SPF）调度算法</strong></h3><p>短作业/进程优先算法是一种优先调度短作业（进程）的调度算法，同样也是一种<strong>非剥夺调度算法</strong>。</p><p>特点：对短作业有利，对长作业不利，如果一直有短作业进来，可能长作业会一直得不到执行。不考虑作业紧迫程度，有些紧迫的作业可能不能及时处理。有利于IO密集型作业，不利于CPU密集型作业【可能是短作业会造成频繁的上下文切换】。</p><h3 id="优先级调度算法" tabindex="-1"><a class="header-anchor" href="#优先级调度算法" aria-hidden="true">#</a> <strong>优先级调度算法</strong></h3><p>优先级调度算法既可以用于作业调度也可以用于进程调度。当用于作业调度时，会从后备作业队列中选出一个或多个优先级最高的作业，将它们调入内存中，并分配相应资源；当用于进程调度时，会从就绪队列中选出优先级最高的进程，将处理机分配给这个进程，使它能够运行。</p><p>根据高优先级进程能否抢占处理机还可以将这种算法分为非剥夺式优先级调度算法和剥夺式优先级调度算法。</p><p>在进程创建后进程优先级能否改变又可以将进程优先级分为静态优先级和动态优先级。</p><ul><li>静态优先级。静态优先级是进程在创建时就已经确定好的，在进程运行期间不能改变。</li><li>动态优先级。动态优先级是指进程运行期间优先级根据进程实际运行情况动态变化的。</li></ul><h3 id="高响应比优先调度算法" tabindex="-1"><a class="header-anchor" href="#高响应比优先调度算法" aria-hidden="true">#</a> <strong>高响应比优先调度算法</strong></h3><p>高响应比优先调度算法适用于作业调度，是短作业优先调度算法和先来先服务算法的折中。我们先来看一下什么是响应比吧。</p><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291649189.png" alt="image-20220429164932130" tabindex="0"><figcaption>image-20220429164932130</figcaption></figure><p>高响应比优先调度算法具有以下特点：</p><ul><li>短作业的要求服务时间很短，因此在相同等待时间的情况下，短作业的响应比也更高，会被优先执行。</li><li>当要求服务时间相同时，等待时间长的作业会被优先服务。</li><li>长作业的要求服务时间比较长，但是随着等待时间的增加，长作业的响应比也会增加，然后可以分配处理机。</li></ul><h3 id="时间片轮转调度算法" tabindex="-1"><a class="header-anchor" href="#时间片轮转调度算法" aria-hidden="true">#</a> <strong>时间片轮转调度算法</strong></h3><p>时间片轮转调度算法一般在分时系统上使用，每个进程被分配固定大小的时间片，当时间片用完以后，无论进程是否执行结束，处理机都将被剥夺给下一个进程。</p><p>特点：时间片轮转调度算法的时间片大小选择很讲究，如果时间片过大，该调度算法会退化成为先来先服务调度算法，而时间片设置过小，处理机会频繁切换，进程真正使用处理机的时间减少，系统吞吐量下降。</p><h3 id="多级反馈队列调度算法" tabindex="-1"><a class="header-anchor" href="#多级反馈队列调度算法" aria-hidden="true">#</a> <strong>多级反馈队列调度算法</strong></h3><p>多级反馈队列调度算法是这些调度算法中最复杂的，也是整合了前面一些调度算法而形成的算法，我们来看一下它的工作过程。</p><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291646633.jpeg" alt="img" tabindex="0"><figcaption>img</figcaption></figure><p>多级反馈队列调度算法工作过程有以下这些特点：</p><ul><li>每一级队列从上至下的优先级逐渐递减，优先级越高的队列时间片越小。也就是说，最顶层的队列的时间片最小。</li><li>最新的进程进入内存会被放入最上层的队列末尾，当执行到这个进程时，如果能在分配的时间片内完成则会出队列，如果不能在时间片内完成就进入下一级队列末尾，等待处理机资源。</li><li>如果高优先级队列有进程存在，则处理机会优先处理上级队列中的进程。如果处理机正在执行某一队列中的进程，此时更高优先级队列中有进程进入，那么当前正在执行的进程会回到当前队列的队尾，处理机执行新进入队列的进程。</li></ul><p>最后要提一点，多级反馈队列调度算法兼顾短作业优先的同时，不会让长作业长期处于等待状态最终出现饥饿。</p><h3 id="进程通讯" tabindex="-1"><a class="header-anchor" href="#进程通讯" aria-hidden="true">#</a> 进程通讯</h3><h4 id="信号" tabindex="-1"><a class="header-anchor" href="#信号" aria-hidden="true">#</a> 信号</h4>`,114),d={href:"https://baike.baidu.com/item/sigprocmask()",target:"_blank",rel:"noopener noreferrer"},u={href:"https://baike.baidu.com/item/sigpending",target:"_blank",rel:"noopener noreferrer"},h={href:"https://baike.baidu.com/item/sigsuspend",target:"_blank",rel:"noopener noreferrer"},k={href:"https://baike.baidu.com/item/sigemptyset()",target:"_blank",rel:"noopener noreferrer"},g=i(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 高级信号（低级信号为signal，不可携带附加信息）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token comment">// 向指定pid发送信号；成功返回0，失败返回-1。</span>
<span class="token keyword">int</span> <span class="token function">sigqueue</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">union</span> sigval value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// pid是目标进程的进程号</span>
<span class="token comment">// sig是信号代号，可通过 kill -l 查看，最大为64</span>
<span class="token comment">// value参数是一个联合体,表示信号附带的数据，附带数据只能是 整数|指针 其一 ！！</span>
<span class="token comment">// 有如下形式:</span>
<span class="token keyword">union</span> sigval <span class="token punctuation">{</span>
	<span class="token keyword">int</span> sival_int<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span>sival_ptr<span class="token punctuation">;</span><span class="token comment">//指向要传递的信号参数</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//value</span>

<span class="token comment">// 在当前进程查询/接收信号</span>
<span class="token keyword">int</span> <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oldact<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// signum是信号编号，即上面的sig</span>
<span class="token comment">// oldact是备份，方便恢复</span>
<span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_sigaction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> signo<span class="token punctuation">,</span> <span class="token class-name">siginfo_t</span> <span class="token operator">*</span>resdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>unkonowp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// signo信号编号，resdata传入的附带信息，如resdata-&gt;si_value</span>
	<span class="token class-name">sigset_t</span> sa_mask<span class="token punctuation">;</span>  <span class="token comment">// 初始化/清空 sa_mask：sigemptyset(&amp;act.sa_mask);</span>
	<span class="token keyword">int</span> sa_flags<span class="token punctuation">;</span>  <span class="token comment">// 获取附带信息：须使用sa_sigaction属性，必须设置sa_flags属性的值为SA_SIGINFO</span>
	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sa_restorer<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// sa_handler此参数和 signal() 的参数 handler 相同，代表新的信号处理函数，其他意义请参考signal()。</span>
<span class="token comment">// sa_mask 用来设置在处理该信号时暂时将 sa_mask 指定的信号集搁置。</span>
<span class="token comment">// sa_restorer 此参数没有使用。</span>
<span class="token comment">// sa_flags 用来设置信号处理的其他相关操作，下列的数值可用。</span>
<span class="token comment">// sa_flags还可以设置其他标志：</span>
<span class="token comment">// SA_RESETHAND：当调用信号处理函数时，将信号的处理函数重置为缺省值SIG_DFL</span>
<span class="token comment">// SA_RESTART：如果信号中断了进程的某个系统调用，则系统自动启动该系统调用</span>
<span class="token comment">// SA_NODEFER ：一般情况下， 当信号处理函数运行时，内核将阻塞该给定信号。但是如果设置了 SA_NODEFER标记， 那么在该信号处理函数运行时，内核将不会阻塞该信号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环中的fork" tabindex="-1"><a class="header-anchor" href="#循环中的fork" aria-hidden="true">#</a> 循环中的fork()</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将会输出多少 “-” ？</span>
<span class="token comment">// 8个</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203221059205.png" alt="img" tabindex="0"><figcaption>img</figcaption></figure><p>解答：有8个’-’是因为printf(“-”);语句有buffer；在fork的时候，缓存被复制到了子进程空间，所以，就多了两个。下图阴影双边框的两个子进程复制了父进程缓冲区的‘-‘</p><ol><li>当i=0时，fork()创建了一个子进程，printf函数还没有执行，因此缓冲区中没有数据，父子进程打印了<code>-</code></li><li>当i=1时，父进程又fork了一个子进程，但是此时父进程中的缓冲区中有数据，因此会复制缓冲区给子进程；同时子进程又执行了一次printf函数，因此子进程打印了两个<code>-</code>；同理由i=0创建的子进程也是如此 主要原因：进程在fork时，缓冲区会被复制给子进程，且缓冲区非空。</li></ol><p>若改为以下代码，则输出6个’-’。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;-\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为程序遇到“\\n”，或是EOF，或是缓冲区满，或是文件描述符关闭，或是主动flush，或是程序退出，就会<strong>把数据刷出缓冲区</strong>。需要注意的是，标准输出是行缓冲，所以遇到“\\n”的时候会刷出缓冲区，但对于磁盘这个块设备来说，“\\n”并不会引起缓冲区刷出的动作，那是全缓冲，你可以使用setvbuf来设置缓冲区大小，或是用fflush刷缓存。</p>`,9),m={href:"http://en.wikipedia.org/wiki/Device_file#Block_devices",target:"_blank",rel:"noopener noreferrer"},b={href:"http://en.wikipedia.org/wiki/Device_file#Character_devices",target:"_blank",rel:"noopener noreferrer"},v=a("strong",null,"块设备一般都有缓存，而字符设备一般都没有缓存",-1),f=i(`<h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><h3 id="创建线程" tabindex="-1"><a class="header-anchor" href="#创建线程" aria-hidden="true">#</a> 创建线程</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// gcc -lpthread</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span>
                 <span class="token class-name">pthread_t</span> <span class="token operator">*</span>restrict tidp<span class="token punctuation">,</span>   <span class="token comment">//新创建的线程ID指向的内存单元。</span>
                 <span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>restrict attr<span class="token punctuation">,</span>  <span class="token comment">//线程属性，默认为NULL</span>
                 <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start_rtn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//新创建的线程从start_rtn函数的地址开始运行</span>
                 <span class="token keyword">void</span> <span class="token operator">*</span>restrict arg <span class="token comment">//默认为NULL。若上述函数需要参数，将参数放入结构中并将地址作为arg传入。</span>
                  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回值： 0 成功，-1 失败</span>
<span class="token comment">// 1.避免直接在传递的参数中传递发生改变的量，否则会导致结果不可测。</span>
<span class="token comment">// 2.对应pthread_join，确保线程正确退出</span>

<span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span>
               <span class="token class-name">pthread_t</span> tid<span class="token punctuation">,</span> <span class="token comment">//需要等待的线程,指定的线程必须位于当前的进程中，而且不得是分离线程</span>
               <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>status  <span class="token comment">//线程tid所执行的函数返回值（返回值地址需要保证有效），其中status可以为NULL</span>
                 <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 返回值：0 成功，其他情况如下

ESRCH
描述: 没有找到与给定的线程ID 相对应的线程。（如果多个线程等待同一个线程终止，则所有等待线程将一直等到目标线程终止。然后一个等待线程成功返回。其余的等待线程将失败返回ESRCH错误）

EDEADLK
描述: 将出现死锁，如一个线程等待其本身，或者线程A和线程B 互相等待。

EINVAL
描述: 与给定的线程ID相对应的线程是分离线程。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cpu调度" tabindex="-1"><a class="header-anchor" href="#cpu调度" aria-hidden="true">#</a> CPU调度</h2><blockquote><p>响应时间（Response time） : （第一次响应 - 到达时间）</p><p>周转时间（turnarouad time）: (结束时刻 - 到达时间)</p><p>等待时间（Waiting time）:（周转时间 - 运行时间）</p></blockquote><h3 id="cpu调度程序" tabindex="-1"><a class="header-anchor" href="#cpu调度程序" aria-hidden="true">#</a> CPU调度程序</h3><p><code>CPU调度决策</code>可以如下四种情况下发生：</p><ol><li>当一个进程从运行状态切换到等待状态</li><li>当一个进程从运行状态切换到就绪状态</li><li>当一个进程从等待状态切换到就绪状</li><li>当一个进程终止时。</li></ol><blockquote><p>当调度只能发生在第一和第四两种情况时，称调度方法是非抢占的（ non-preemptive）</p><p>否则调度方案就是可抢占（preemptive）的。</p></blockquote><h3 id="调度准则" tabindex="-1"><a class="header-anchor" href="#调度准则" aria-hidden="true">#</a> 调度准则</h3><ol><li><code>CPU使用率</code>：使CPU尽可能忙</li><li><code>吞吐量（Throughput）</code>：单位时间完成进程的数量</li><li><code>周转时间（Turnaround time）</code>：从进程提交到进程完成的时间间隔 称为周转时间</li><li><code>等待时间（Waiting time）</code>：是在就绪队列中等待所花时间之和。</li><li><code>响应时间（Response time）</code>：从提交请求到产生第一响应的时间</li><li><code>区间时间</code>：程序完成所需耗时</li><li><code>剩余时间</code>：程序结束还需耗时</li></ol><h3 id="优化准则" tabindex="-1"><a class="header-anchor" href="#优化准则" aria-hidden="true">#</a> 优化准则</h3><ol><li>最大化CPU使用率</li><li>最大化吞吐量</li><li>最小化周转时间</li><li>最小化等待时间</li><li>最小化响应时间</li></ol><h3 id="调度算法-1" tabindex="-1"><a class="header-anchor" href="#调度算法-1" aria-hidden="true">#</a> 调度算法</h3><ol><li>先到先服务调度（First Come, First Served, FCFS）</li><li>最短作业优先调度（Shortest-Job-First, SJR）</li><li>优先权调度（Priority Scheduling）</li><li>轮转法调度（Round Robin, RR）</li><li>多级队列调度（multilevel queue-scheduling）</li><li>多级反馈队列调度（multilevel feedback queue scheduling）</li></ol><h4 id="先到先服务-fcfs" tabindex="-1"><a class="header-anchor" href="#先到先服务-fcfs" aria-hidden="true">#</a> 先到先服务（FCFS）</h4><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203291059593.png" alt="image-20220329105948330" tabindex="0"><figcaption>image-20220329105948330</figcaption></figure><h4 id="最短作业优先调度-sjf" tabindex="-1"><a class="header-anchor" href="#最短作业优先调度-sjf" aria-hidden="true">#</a> 最短作业优先调度（SJF）</h4><blockquote><p>将每个进程与其下一个CPU区间段相关联。当CPU为可用时，它会 赋给具有最短后续CPU区间的进程。如果两个进程具有同样长度的 CPU区间，那么可以使用FCFS调度来处理。</p></blockquote><p>两种方式：</p><ul><li>非抢占式：一旦进程获得CPU就一直占据CPU，直到其CPU区 间完成为止</li><li>抢占式：如果一个新来的进程其CPU区间小于当前进程的CPU 区间，则抢占之。这种调度方式称为最短剩余时间作业优先（ Shortest Remaining Time First, SRTF）</li></ul><p>SJF是最佳的：对于给定的一组进程，SJF算法的平均等待时间最小。</p><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203291103230.png" alt="image-20220329110347946" tabindex="0"><figcaption>image-20220329110347946</figcaption></figure><blockquote><p>⬆️注意Arrival Time，只有进程在当前时间 arrival 后，才会加入比较</p></blockquote><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203291106098.png" alt="image-20220329110625877" tabindex="0"><figcaption>image-20220329110625877</figcaption></figure><h4 id="时间片轮转-rr" tabindex="-1"><a class="header-anchor" href="#时间片轮转-rr" aria-hidden="true">#</a> 时间片轮转（RR）</h4><blockquote><p>轮转法是专门为分时系统而设计的。每个进程获得一小片CPU时间量（time quantum） ，通常为10-100毫秒。时间片结束后，进程被抢占并放入到就绪队列的最后重新参加调 度。</p></blockquote><p>如果就绪队列中有n个进程，具时间片为q，则每个进程会得到1/n的CPU时间，每个长 度不超过q时间单元。每个进程必须等待CPU的时间不会超过(n-1)q个时间单元，直到它 的下一个时间片为止。</p><p>性能低速于时间片的大小</p><ul><li>如果时间片非常大（无限），那么RR策略与FCFS策略一样。</li><li>如果时间片很小，那么RR方法称处理器共享。n个进程对于用户来说都有它 自己的处理器，速度各为真正处理器速度的1/n</li></ul><p><mark>q必须大于上下文切换所需时间</mark></p><h4 id="多级反馈优先队列" tabindex="-1"><a class="header-anchor" href="#多级反馈优先队列" aria-hidden="true">#</a> 多级反馈优先队列（）</h4><blockquote><p>进程可以在不同队列间移动。</p><p>每个队列有自己的调度算法——前台：RR 后台：FCFS</p></blockquote><p>通常，多级反馈队列调度程序可由下列参数来定义：</p><ul><li>队列数量</li><li>每个队列的调度算法</li><li>用以确定进程何时升级到较高优先权队列的方法</li><li>用以确定进程何时降级到较低优先权队列的方法</li><li>用以确定进程在需要服务时应进入哪个队列的方法</li></ul><p>队列之间必须有调度</p><ul><li>通常采用固定优先权可抢占调度来实现。</li><li>另一种 可能是在队列之间划分时间片。每个队列都有一定的CPU时间， 这可用于调度队列内的不同进程 <ul><li>20％给后台，80％给前台</li></ul></li></ul><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204121007266.png" alt="image-20220412100702097" style="zoom:50%;"><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204121008967.png" alt="image-20220412100834856" style="zoom:50%;"><h2 id="进程同步" tabindex="-1"><a class="header-anchor" href="#进程同步" aria-hidden="true">#</a> 进程同步</h2><h3 id="临界区设计准则" tabindex="-1"><a class="header-anchor" href="#临界区设计准则" aria-hidden="true">#</a> 临界区设计准则</h3><blockquote><p>临界区：并发进程中可能改变共同变量、更新同一个表、写同一个 文件的代码段。</p><p>进入区（上锁）、临界区、退出区（开锁）、剩余区</p></blockquote><p>解决临界区问题必须满足如下三项要求：</p><ol><li>互斥 （Mutual Exclusion） ：进程Pi在临界区内执行，其他进程不 得进入临界区</li><li>前进/进步（Progress） ：如果没有进程在临界区执行，那么允许不在 剩余区的进程计入临界区</li><li>有限等待（Bounded Waiting）：从一个进程作出进入临界区的请 求，直到该请求被允许为止，其他进程允许进入其临界区的次数有 上限</li></ol><p><mark>忙则让权，空则进步，有限等待</mark></p><h3 id="算法实现" tabindex="-1"><a class="header-anchor" href="#算法实现" aria-hidden="true">#</a> 算法实现</h3><ul><li><p>算法一</p><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204121103028.png" alt="image-20220412110334283" style="zoom:50%;"></li></ul><blockquote><p>该算法无法实现互斥，在<code>while (flag); flag = true</code>处，进程仍可能冲突</p></blockquote><ul><li>算法二</li><li>算法三</li></ul><h4 id="testandset-实现wait-和signal" tabindex="-1"><a class="header-anchor" href="#testandset-实现wait-和signal" aria-hidden="true">#</a> TestAndSet 实现wait()和signal()</h4><h4 id="swap-实现互斥操作" tabindex="-1"><a class="header-anchor" href="#swap-实现互斥操作" aria-hidden="true">#</a> Swap() 实现互斥操作</h4><h3 id="进程饥饿" tabindex="-1"><a class="header-anchor" href="#进程饥饿" aria-hidden="true">#</a> 进程饥饿</h3><blockquote><p>进程饥饿，即为Starvation，指当等待时间给进程推进和响应带来明显影响称为进程饥饿。当饥饿到一定程度的进程在等待到即使完成也无实际意义的时候称为饥饿死亡。也即：</p><p><code>由于别的并发的激活的进程持久占有所需资源,使某个异步进程在可预测的时间内不能被激活。</code></p></blockquote><h2 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h2><h3 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h3><ul><li>竞争资源引起的死锁</li><li>进程通信引起的死锁</li><li>其他原因引起的死锁</li></ul><h3 id="死锁的条件" tabindex="-1"><a class="header-anchor" href="#死锁的条件" aria-hidden="true">#</a> 死锁的条件</h3><p>资源独占：一个资源在同一时间只能分给一个进程</p><p>不可剥夺：资源只能由其占有者在使用完后资源释放</p><p>保持申请：进程在占有部分资源后还可以申请新的资源，而且在申请新资源的时候并不释放它已经占有的资源</p><p>循环等待：存在一个循环等待链</p><h3 id="处理" tabindex="-1"><a class="header-anchor" href="#处理" aria-hidden="true">#</a> 处理</h3><p>（静态）死锁预防：通过破坏死锁产生的必要条件实现，对进程有关资源的活动加限制，所有进程遵循这种限制，即可保证没有死锁发生。预防分配策略、有序分配策略</p><p>（动态）死锁避免：在进程运行之前，为其分配所需的全部资源（预先分配策略）</p><h3 id="饿死与活锁" tabindex="-1"><a class="header-anchor" href="#饿死与活锁" aria-hidden="true">#</a> 饿死与活锁</h3><p>饿死：当饥饿到一定程度的进程所赋予的任务即使完成也不再具有实际意义时，称该 进程被饿死</p><p>活锁：在忙式等待条件下发生的饥饿</p><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h2><h3 id="单一连续静态分区管理" tabindex="-1"><a class="header-anchor" href="#单一连续静态分区管理" aria-hidden="true">#</a> 单一连续静态分区管理</h3><h3 id="动态分区方案" tabindex="-1"><a class="header-anchor" href="#动态分区方案" aria-hidden="true">#</a> 动态分区方案</h3><p>根据一组空闲孔来分配大小为n的请求。</p><ul><li>首次适应（First-fit）</li><li>最佳适应（Best-fit）</li><li>最差适应（Worst-fit）</li></ul><p>First-fit和best-fit在分配速度及存储效率上优于Worst-fit</p><p>而该方案虽然提高了空间利用，却导致了外部碎片</p><h4 id="碎片" tabindex="-1"><a class="header-anchor" href="#碎片" aria-hidden="true">#</a> 碎片</h4><ul><li>外部碎片：指内存中因为总剩余空间足够，而孔分散过小而无法利用的情况</li><li>内部碎片：指后续进行的分区管理中，由于需求内存小于统一分区管理的区大小，为了避免额外开销而分配整个分区的情况</li><li>紧缩（compaction）：用来降低外部碎片 <ul><li>移动内存内容，以便所有空闲空间合并成一整块。</li><li>如果<code>重定位是动态</code>的，是在运行时进行的，那么就能采用紧缩</li></ul></li><li>另外一种可能解决外部碎片问题的方法是允许物理地址空间为非连续，这样只要有物理内存就可为进程分配。【即实现多重分区管理】 <ul><li>分页</li><li>分段</li></ul></li></ul><h3 id="分区管理" tabindex="-1"><a class="header-anchor" href="#分区管理" aria-hidden="true">#</a> 分区管理</h3><ul><li>解决外部碎片</li><li></li></ul><h3 id="地址转换" tabindex="-1"><a class="header-anchor" href="#地址转换" aria-hidden="true">#</a> 地址转换</h3><h4 id="页式分区" tabindex="-1"><a class="header-anchor" href="#页式分区" aria-hidden="true">#</a> 页式分区</h4><p>内存空间划分：内存空间静态地划分为若干个等长区域，每个区域称为一个物理页 架，每个页架通常由2i个单元，从0开始一次编址，称为页内地址。</p><p>进程空间划分：内存空间静态地划分为若干个等长区域，每个区域称为一个逻辑页 面，每个页架通常由2i个单元，从0开始一次编址，称为页内地址。</p><p>所需表目：</p><ul><li><p>页表：用于记录进程的逻辑页面和内存页架之间的对应关系</p></li><li><p>总页表：用于记录页架的使用情况</p></li></ul><p>CPU生成的地址分成以下两部分【在CPU内部存在首址寄存器和界限寄存器】</p><ul><li>页号(p)：页号作为页表中的索引。页表中包 含每页所在物理内存的基地址。</li><li>页偏移(d)：与页的基地址组合就形成了物理 地址，就可送交物理单元。</li></ul><blockquote><p>在这种方式下，每次数据/指令的访问需要访问两次内存。一次访问 页表，另一次访问数据/指令</p><p>两次内存访问问题可以用特别的快速查找硬件缓冲（称为关联内存 或翻译后备缓冲器）来解决</p></blockquote><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202205071034961.png" alt="image-20220507103426801" tabindex="0"><figcaption>image-20220507103426801</figcaption></figure><p>地址映射：物理地址=页架首址+页内地址=页架号*2i + 页内地址</p><div class="language-伪代码 line-numbers-mode" data-ext="伪代码"><pre class="language-伪代码"><code>    地址映射步骤：

          逻辑地址(p,d) -&gt; 物理地址(f,d)

          (1) 由程序确定逻辑地址(p,d)；

          (2) 由p查快表得页架号f；

                如查不到：

                        (3) 由p与l比较，判别是否越界：

                              不满足：0 &lt;= p &lt;= l-1，越界；

                         (4) 由p和b查页表得f;

                         (5) parbegin

                               f与d合并得物理地址

                              (p,f)添加到快表，如满淘汰一个;

                               parend

          (3) f与d合并得物理地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>页表实现</strong></p><p>几个进程几个页表，一般连续放置</p><h4 id="段式分区" tabindex="-1"><a class="header-anchor" href="#段式分区" aria-hidden="true">#</a> 段式分区</h4><p>内存空间划分：内存空间静态地划分为若干个长度各异区域，每个区域称为一个物 理段，每个物理段在内存中有一个起始地址，称为段首址。将物 理段中的所有单元由0开始依次编址，称为段内地址。</p><p>进程空间划分：内存空间静态地划分为若干个长度各异区域，每个区域称为一个逻 辑段。将一个逻辑段中的所有单元由0开始依次编址，称为段内地址。 将一个进程的所有逻辑地址由0开始依次编号，称为段号 所需表目：</p><ul><li><p>段表：该表用于记录段号与段首址之间的关系</p></li><li><p>空闲表：用于记录并管理内存中的空闲区域</p><p>地址映射：逻辑地址(s,d) -&gt; 物理地址(b’+d)</p></li></ul><div class="language-伪代码 line-numbers-mode" data-ext="伪代码"><pre class="language-伪代码"><code>    地址映射步骤：

           (1)由程序确定逻辑地址(s,d);

           (2) 由s查快表得b’和l’

           如查不到：

                   (3) 由s与l比较判断是否越界

                        不满足：0&lt;=s&lt;=l-1，越界；

                   (4) 由s和b查段表，得b’和l’

                   (5) 由d与l’比较，判断是否越界

                        不满足：0&lt;=d&lt;=l’-1，越界;

                    (6)parbegin

                         由b’+d得物理地址

                         (s,b’,l’)加入快表, 如快表满淘汰一个；

                         parend

          (3) 由d与l’比较，判断是否越界

               不满足：0&lt;=d&lt;=l’-1，越界；

          (4) 由b’+d得物理地址。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>问：分段与分页对比？</strong></p><p>1)<strong>页是信息的物理单位，分页是为实现离散分配方式，<strong>以消减内存的外零头，提高内存的利用率；或者说，<strong>分页仅仅是由于系统管理的需要</strong>，而不是用户的需要（也是</strong>对用户透明</strong>的）。<strong>段是信息的逻辑单位，它含有一组其意义相对完整的信息</strong>（比如数据段、代码段和堆栈段等）。<strong>分段的目的是为了能更好的满足用户的需要</strong>（用户也是可以使用的）。</p><p>2)<strong>页的大小固定且由系统确定</strong>，把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而一个系统只能有一种大小的页面。<strong>段的长度却不固定，决定于用户所编写的程序</strong>，通常由编辑程序在对源程序进行编辑时，根据信息的性质来划分。</p>`,101),_={href:"https://so.csdn.net/so/search?q=%E5%A0%86%E6%A0%88&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},x=i('<p>4)页和段都有存储保护机制。但存取权限不同：段有读、写和执行三种权限；而页只有读和写两种权限</p><p><strong>总结</strong>：</p><ul><li>分页是为了提高内存利用率，将内存分为一个个页架，将进程按照页架大小分为一个个页，分页对用户不可见。</li><li>分段则是按照程序的自身逻辑分配到内存中，对用户可见，用户编程时需要显示给出段名。</li><li>并且分段比分页更容易实现信息的共享，因为页的大小是由页架决定，一个页中可能包含多个逻辑模块，令多个逻辑模块共享同一块内存显然是不合理的。</li></ul><hr><p><strong>问：简述分页的优点，存在的问题以及解决方法？</strong></p><p>优点：内存空间利用率高，不会产生外部碎片，只会产生少量的页内碎片。</p><p>缺点：不方便按照逻辑模块实现信息的共享和保护；同时，页表也可能占据一部分物理空间；一旦页缺失，将大大提高查询时间。</p><p>解决：可以使用分段【使页内数据可通过逻辑模块实现信息联系】、多级页表【节省内存、可离散存储页表等】等方式；或者MMU添加TLB提高查询效率，使用巨型页，减低缺页异常。</p><hr><h3 id="虚拟地址" tabindex="-1"><a class="header-anchor" href="#虚拟地址" aria-hidden="true">#</a> 虚拟地址</h3>',10),E={href:"https://blog.csdn.net/u014426028/article/details/120826515",target:"_blank",rel:"noopener noreferrer"},w=a("strong",null,"转译后备缓冲器",-1),q=a("strong",null,"页表缓存",-1),y=a("strong",null,"转址旁路缓存",-1),C={href:"https://baike.baidu.com/item/CPU",target:"_blank",rel:"noopener noreferrer"},U={href:"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80",target:"_blank",rel:"noopener noreferrer"},P={href:"https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86",target:"_blank",rel:"noopener noreferrer"},A=a("strong",null,"分页内存管理单元",-1),B=a("strong",null,"paged memory management unit",-1),F=a("strong",null,"PMMU",-1),T={href:"https://baike.baidu.com/item/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},I={href:"https://baike.baidu.com/item/%E5%86%85%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},S={href:"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},O={href:"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80",target:"_blank",rel:"noopener noreferrer"},L={href:"https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80",target:"_blank",rel:"noopener noreferrer"},D={href:"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},R={href:"https://baike.baidu.com/item/%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"},z={href:"https://baike.baidu.com/item/%E6%80%BB%E7%BA%BF",target:"_blank",rel:"noopener noreferrer"},M={href:"https://baike.baidu.com/item/%E4%BB%B2%E8%A3%81",target:"_blank",rel:"noopener noreferrer"},N=i('<p>虚拟地址：页号+页内偏移</p><p>物理地址：块号+页内偏移</p><p><strong>一级页表转换过程</strong></p><p>虚拟地址 -&gt; 物理地址：MMU截取 <code>页号</code>，根据 <code>页号</code> 在页表地址查询到 <code>块号</code>，</p><ul><li>若命中，返回块号</li><li>若未命中，将数据从外部磁盘读入内存，并返回块号</li></ul><p>拼接 <code>块号</code> 和 <code>页内偏移</code>，得到物理地址</p><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202205071034961.png" alt="image-20220514171937364" tabindex="0"><figcaption>image-20220514171937364</figcaption></figure><p><strong>加入TLB</strong></p><ol><li>MMU截取页号，根据页号在TLB中查询：</li></ol><ul><li><p>若TLB命中页，返回物理地址块号</p></li><li><p>若TLB未命中，查询页表</p><ul><li>若页表命中，返回物理地址块号</li><li>若页表未命中，查询外部磁盘，将数据写入内存，并返回物理地址块号</li></ul></li></ul><ol start="2"><li>拼接块号和页内偏移，得到物理地址</li></ol><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/TLB" alt="在这里插入图片描述" tabindex="0"><figcaption>在这里插入图片描述</figcaption></figure><h4 id="硬件" tabindex="-1"><a class="header-anchor" href="#硬件" aria-hidden="true">#</a> 硬件</h4><blockquote><p>遍历页表，将虚拟地址转换为物理地址，页面权限管理等</p></blockquote><ul><li><p>MMU：查询TLB或者遍历页表</p></li><li><p>TLB：缓存最近转换的页表条目</p></li><li><p>页表基地址寄存器：存放页表基地址（物理地址）【对于多级页表：^作为MMU遍历多级页表的起点】</p></li></ul><h4 id="软件" tabindex="-1"><a class="header-anchor" href="#软件" aria-hidden="true">#</a> 软件</h4><blockquote><p>不管虚拟内存如何转换为物理内存，对应用来说透明</p></blockquote><ul><li>应用程序：访问虚拟内存即可如执行指令、读写内存, 没有权限管理页表</li><li>Linux内核：填写页表，将页表基地址告诉MMU；内核初始化建立内核页表，实现缺页异常等机制为用户任务按需分配并映射页表</li></ul><h4 id="页表" tabindex="-1"><a class="header-anchor" href="#页表" aria-hidden="true">#</a> 页表</h4><blockquote><p>页表属于内核空间，存放在内存上，其中存放的均为物理地址，为物理地址的 <code>块号</code></p></blockquote><p>Linux内核，使用的是多级页表，即存在多次转换，这增加了空间分配的灵活性，但也增加查询的复杂度，典型的时间换空间【换的是内存空间，不是存储空间】</p><hr><p><strong>问：为什么逻辑内存地址空间往往比物理内存地址空间大？</strong></p><p>有MMU这个东西，可以分配虚拟地址(题中逻辑地址，下同)，再加上内核的支持，可以提升物理内存的利用率。</p><p>讲一下Linux Kernel的处理，当运行一个程序时，内核并不会把整个程序完全加载到物理内存中，而是分配好虚拟地址，加载可执行文件的部分到物理内存，只分配了虚拟地址而程序未加载到物理内存的部分，会在页表上做标记。</p><p>当程序运行到只有虚拟地址而没有对应物理内存的地方时，处理器会发生异常，然后内核就分配对应的物理内存页，把磁盘上的数据加载到物理内存，再从异常中返回，程序就能继续运行。这个过程，用户态的程序是无法感知到的。</p><p>这样，就算分配的虚拟地址大于实际的分配的物理内存也是没有问题的。通过这种机制，假设我有一个远大于物理内存的程序，也是能运行的。在系统物理内存用光的情况下，当程序运行到新的地方，而这部分只分配了虚拟地址，没有对应物理内存时，内核在缺页异常中搜索最不常执行的地方，断开物理内存与原来虚拟地址的连接，把这块物理内存分配给当前程序将要运行的新的虚拟地址，然后把磁盘上的程序加载到物理内存，这样程序又能快乐的运行了。</p><p>综上，虚拟地址会比物理地址多，而且也是有必要。计算机里有一个重要的情况，基本上很多东西都是局部的，一个程序虽大(比如我们的假设，磁盘上的程序远大于物理内存)，但经常执行的地方却不多。cache也是根据这个情况设计出来的，虽然可能只有几十兆，但是性能提升非常高。</p><p>上面说了单进程的情况，下面说说多进程的情况。多进程时，活跃的进程可能就那么几个，其他基本上在睡大觉。32位机上，每个进程都分了4g虚拟地址空间，但是真正需要全部把程序加载到物理内存的不多，或者，我一个程序原来用了很多内存，但后面不怎么运行，内核在内存紧张时，会把这部分物理内存释放掉，分配给其他用途。</p><p>前面说的是程序部分，现在说说数据部分，或者说是堆内存这块(malloc分配的)。如果这部分内存不常使用，内核会把他们丢入交换空间(swap，位于磁盘上)这个冷宫。等到真正需要时，才把数据从交换空间拿到物理内存。</p><p>综上，这几种情形，使用了虚拟地址，可以让物理内存可以使用得更高效。逻辑地址比物理地址多不言而喻了吧。</p><hr><h2 id="i-o-系统" tabindex="-1"><a class="header-anchor" href="#i-o-系统" aria-hidden="true">#</a> I/O 系统</h2><h3 id="外部设备硬件" tabindex="-1"><a class="header-anchor" href="#外部设备硬件" aria-hidden="true">#</a> 外部设备硬件</h3><p>独占设备：</p><p>​ 对某些独占设备可以通过共享设备改造为共享设备【假脱机技术：在多道批处理系统中，专门利用一道程序（SPOOLing程序）来完成对设备的I/O操作。】</p><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202205311015621.png" alt="image-20220531101552388" tabindex="0"><figcaption>image-20220531101552388</figcaption></figure><p>共享设备：</p><h2 id="考试" tabindex="-1"><a class="header-anchor" href="#考试" aria-hidden="true">#</a> 考试</h2><ol><li><p>基本概念</p><p>操作系统是指控制和管理计算机系统硬件与软件资源，合理地调度组织、调度计算机工作与资源分配，为用户和其他软件提供方便接口与调度环境的程序集合。</p></li><li><p>系统调用</p><p>系统资源需要从用户态切换到核心态</p><p>所有I/O都是特权指令</p></li><li></li></ol><ul><li><p>选择题 20 ！！！</p></li><li><p>简答题 30 = 5 * 6</p><ul><li>概念简述</li></ul></li><li><p>算法分析 50</p><ul><li>算法 30</li><li>综合 20</li></ul></li></ul><p>前13章，前2章（基本概念，系统调用，接口，包含操作系统安全【每个进程xx空间分离，要调用使用陷进】，方便用户使用、管理系统资源、提高扩展，进程线程定义属性特点生命周期，）</p>',42),j=a("p",null,"操作系统接口类型",-1),J=a("p",null,"1.命令接口",-1),V=a("p",null,"提供一组命令供用户直接或间接操作。",-1),W=a("p",null,"根据作业的方式不同，命令接口又分为联机命令接口和脱机命令接口。",-1),H=a("p",null,"2.程序接口",-1),G={href:"https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"},K={href:"https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},X=a("p",null,"3.图形界面接口",-1),Z={href:"https://baike.baidu.com/item/%E8%8F%9C%E5%8D%95",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2",target:"_blank",rel:"noopener noreferrer"},Y=i("<li><p>CPU工作模式</p><p>？</p></li><li><p>进程结构、状态、状态转换</p><p>程序段、数据段、进程控制段；</p><p>PCB是进程的唯一标志；</p><p>进程是程序运行的过程，是系统进行资源分配和调度的独立单位</p></li><li><p>资源分配方式【抢占与否、画甘特图】</p></li><li><p>临时区原则</p><p>空则让进</p><p>忙则等待</p><p>有限等待</p><p>让权等待</p></li><li><p>死锁条件（4个条件、2个原因）</p><p>互斥条件、不可剥夺条件、请求并保持、循环等待</p><p>系统资源竞争、进程推进顺序非法</p></li><li><p>存贮体系、存贮保护（页面存贮管理、碎片、缺页置换算法优缺点、静/动态文件重定位）</p></li><li><p>文件系统，文件组织（文件结构发展）</p></li>",7),$=a("p",null,[a("strong",null,"综合题")],-1),nn=a("ol",null,[a("li",null,"进程同步算法 FCFS\\RR\\SJF\\优先级\\多级反馈队列\\xxx（6个）"),a("li",null,"任务调度"),a("li",null,"系统安全状态检测（死锁）"),a("li",null,"页面置换算法、存贮管理方案（）"),a("li",null,"文件存贮"),a("li",null,"磁盘调度策略")],-1),an=a("p",null,"理发问题、吃水果、哲学家【临界】",-1);function sn(en,tn){const s=l("ExternalLinkIcon");return p(),o("div",null,[c,a("blockquote",null,[a("p",null,[n("相关函数 signal()，"),a("a",d,[n("sigprocmask()"),e(s)]),n("，"),a("a",u,[n("sigpending()"),e(s)]),n("，"),a("a",h,[n("sigsuspend()"),e(s)]),n(", "),a("a",k,[n("sigemptyset"),e(s)])])]),g,a("p",null,[n("拓展：Unix下的设备有“"),a("a",m,[n("块设备"),e(s)]),n("”和“"),a("a",b,[n("字符设备"),e(s)]),n("”的概念，所谓块设备，就是以一块一块的数据存取的设备，字符设备是一次存取一个字符的设备。磁盘、内存都是块设备，字符设备如键盘和串口。"),v,n("。")]),f,a("p",null,[n("3)分页的作业地址空间是维一的，即单一的线性空间，程序员只须利用一个记忆符（线性地址的16进制表示），即可表示一地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名（比如数据段、代码段和"),a("a",_,[n("堆栈"),e(s)]),n("段等），又需给出段内地址。")]),x,a("p",null,[a("a",E,[n("内存管理"),e(s)])]),a("blockquote",null,[a("p",null,[n("TLB[ Translation Lookaside Buffers]: "),w,n("，也被翻译为"),q,n("、"),y,n("，为"),a("a",C,[n("CPU"),e(s)]),n("的一种缓存，由存储器管理单元用于改进"),a("a",U,[n("虚拟地址"),e(s)]),n("到物理地址的转译速度。")]),a("p",null,[n("MMU[Memory Management Unit]: "),a("a",P,[n("内存管理"),e(s)]),n("单元，有时称作"),A,n("（"),B,n("，"),F,n("）。一种负责处理"),a("a",T,[n("中央处理器"),e(s)]),n("（CPU）的"),a("a",I,[n("内存"),e(s)]),n("访问请求的"),a("a",S,[n("计算机硬件"),e(s)]),n("。它的功能包括"),a("a",O,[n("虚拟地址"),e(s)]),n("到"),a("a",L,[n("物理地址"),e(s)]),n("的转换（即"),a("a",D,[n("虚拟内存"),e(s)]),n("管理）、内存保护、中央处理器"),a("a",R,[n("高速缓存"),e(s)]),n("的控制，在较为简单的计算机体系结构中，负责"),a("a",z,[n("总线"),e(s)]),n("的"),a("a",M,[n("仲裁"),e(s)]),n("以及存储体切换（bank switching，尤其是在8位的系统上）。")])]),N,a("ol",null,[a("li",null,[j,J,V,W,H,a("p",null,[a("a",G,[n("程序接口"),e(s)]),n("由一组系统调用命令组成，提供一组系统调用命令供"),a("a",K,[n("用户程序"),e(s)]),n("使用。")]),X,a("p",null,[n("通过图标 窗口 "),a("a",Z,[n("菜单"),e(s)]),n(" 对话框及其他元素,和文字组合,在"),a("a",Q,[n("桌面"),e(s)]),n("上形成一个直观易懂 使用方便的计算机操作环境.")])]),Y]),$,nn,an])}const on=t(r,[["render",sn],["__file","cao-zuo-xi-tong-gai-lun.html.vue"]]);export{on as default};
