import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,f as e}from"./app-HHaGRXeI.js";const p={},t=e(`<h1 id="java-bean" tabindex="-1"><a class="header-anchor" href="#java-bean" aria-hidden="true">#</a> Java Bean</h1><h2 id="java-bean-是个什么概念" tabindex="-1"><a class="header-anchor" href="#java-bean-是个什么概念" aria-hidden="true">#</a> Java bean 是个什么概念</h2><blockquote><p>符合一定规范编写的Java类，不是一种技术，而是一种规范。大家针对这种规范，总结了很多开发技巧、工具函数。符合这种规范的类，可以被其它的程序员或者框架使用。</p></blockquote><p><strong>规范</strong></p><p>JavaBean是一个遵循特定写法的Java类，是一种Java语言编写的可重用组件，它的方法命名，构造及行为必须符合特定的约定：</p><p>1、这个类必须具有一个公共的(public)无参构造函数；</p><p>2、所有属性私有化（private）；</p><p>3、私有化的属性必须通过public类型的方法（getter和setter）暴露给其他程序，并且方法的命名也必须遵循一定的命名规范。</p><p>4、这个类应是可序列化的。（比如可以实现Serializable 接口，用于实现bean的持久性）</p><p><strong>向后兼容性</strong></p><p>Java语言欠缺属性、事件、多重继承功能。所以，如果要在Java程序中实现一些面向对象编程的常见需求，只能手写大量胶水代码。Java Bean正是编写这套胶水代码的惯用模式或约定。这些约定包括getXxx、setXxx、isXxx、addXxxListener、XxxEvent等。遵守上述约定的类可以用于若干工具或库。</p><p>举个例子，假如有人要用Java实现一个单向链表类，可能会这样写：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// 编译成 java-int-list_1.0.jar</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">JavaIntList</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上述实现为了能够快速获取链表的大小，把链表大小缓存在size变量中。用法如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token class-name">JavaIntList</span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaIntList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>JavaIntList的作者很满意，于是开源了java-int-list库的1.0版。文件名是java-int-list_1.0.jar。发布后，吸引了许多用户来使用java-int-list_1.0.jar。 有一天，作者决定要节省内存，不要缓存size变量了，把代码改成这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 编译成 java-int-list_2.0.jar</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">JavaIntList</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> n <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      n <span class="token operator">=</span> n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后发布了2.0版：java-int-list_2.0.jar。发布后，原有java-int-list_1.0.jar的用户纷纷升级版本到2.0。这些用户一升级，就发现自己的程序全部坏掉了，说是找不到什么size变量。于是这些用户就把作者暴打一顿，再也不敢用java-int-list库了。</p><p>这个故事告诉我们，如果不想被暴打致死，你就必须保持向后兼容性。太阳公司在设计Java语言时，也懂得这个道理。所以Java标准库中，绝对不会出现public int size这样的代码，而一定会一开始就写成：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> size<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre></div><p>让用户一开始就使用<code>getSize</code>，以便有朝一日修改<code>getSize</code>实现时，不破坏向后兼容性。这种<code>public int getSize() { return size; }</code>的惯用手法，就是 <strong>Java Bean</strong>。</p><p>现在是2014年，C#、Scala等比Java新的面向对象语言自身就提供了语言特性来实现这些常用需求，所以根本不需要Java Bean这样繁琐的约定。</p><p>比如，假如有个Scala版的<code>ScalaIntList</code>：</p><div class="language-scala" data-ext="scala"><pre class="language-scala"><code><span class="token comment">// 编译成 scala-int-list_1.0.jar</span>
<span class="token keyword">object</span> ScalaIntList <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token keyword">case</span> <span class="token keyword">class</span> Node<span class="token punctuation">(</span>next<span class="token operator">:</span> Node<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> ScalaIntList <span class="token punctuation">{</span>
  <span class="token keyword">var</span> head<span class="token operator">:</span> ScalaIntList<span class="token punctuation">.</span>Node <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">var</span> size<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre></div><p>用户这样用：</p><div class="language-scala" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">val</span> myList <span class="token operator">=</span> <span class="token keyword">new</span> ScalaIntList
println<span class="token punctuation">(</span>myList<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
</code></pre></div><p>有一天你心血来潮改成这样：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token comment">// 编译成 scala-int-list_2.0.jar</span>
<span class="token keyword">object</span> ScalaIntList <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token keyword">case</span> <span class="token keyword">class</span> Node<span class="token punctuation">(</span>next<span class="token operator">:</span> Node<span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> ScalaIntList <span class="token punctuation">{</span>
  <span class="token keyword">var</span> head<span class="token operator">:</span> ScalaIntList<span class="token punctuation">.</span>Node <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">final</span> <span class="token keyword">def</span> size<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> head
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      n <span class="token operator">=</span> n<span class="token punctuation">.</span>next
      i<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    i
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户还是照样能用，根本不破坏向后兼容性。所以Scala程序只要不考虑和Java交互，一般就不需要类似Java Bean这样的约定。</p><p>顺便说一句，向后兼容性分为源代码级和二进制级，Scala的var或val改为final def的话，无论源代码级的向后兼容性，还是二进制级的向后兼容性，都不遭受破坏。但C#的字段改为属性的话，虽然不破坏源代码级的向后兼容性，但是会破坏二进制级的向后兼容性。这是C#的设计缺陷，导致微软的编码规范不得不禁止使用公有字段。</p>`,30),o=[t];function c(l,i){return n(),s("div",null,o)}const r=a(p,[["render",c],["__file","javabean.html.vue"]]);export{r as default};
