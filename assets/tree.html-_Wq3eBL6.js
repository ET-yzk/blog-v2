import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as s,c as h,a as e,b as r,d as n,f as a}from"./app-HHaGRXeI.js";const l={},i=e("h1",{id:"tree",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tree","aria-hidden":"true"},"#"),r(" Tree")],-1),d=e("h2",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),r(" 概述")],-1),c={href:"https://zhuanlan.zhihu.com/p/27700617",target:"_blank",rel:"noopener noreferrer"},B=a('<h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h2><p>二叉树是每个节点最多有2个子节点的树</p><p>二叉树的叶子节点有0个子节点，二叉树的根节点或者内部节点有一个或者2个子节点</p><h2 id="二叉搜索树-bst" tabindex="-1"><a class="header-anchor" href="#二叉搜索树-bst" aria-hidden="true">#</a> 二叉搜索树 BST</h2><p>二叉搜索树或者是一棵空树，或者满足以下条件：</p><ol><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉搜索树。</li></ol><h2 id="平衡二叉树-avl-tree" tabindex="-1"><a class="header-anchor" href="#平衡二叉树-avl-tree" aria-hidden="true">#</a> 平衡二叉树 AVL Tree</h2><p>AVL树定义：所有节点的左右子树的高度差不超过1的二叉树。</p><p>平衡二叉树是采用二分法思维把数据按规则组装成一个树形结构的数据，用这个树形结构的数据减少无关数据的检索，大大的提升了数据检索的速度；平衡二叉树的数据结构组装过程有以下规则：</p><p>（1）非叶子节点只能允许最多两个子节点存在。</p><p>（2）每一个非叶子节点数据分布规则为左边的子节点小当前节点的值，右边的子节点大于当前节点的值(这里值是基于自己的算法规则而定的，比如hash值)；</p>',11),g={href:"http://baike.baidu.com/item/Treap",target:"_blank",rel:"noopener noreferrer"},_=a('<p>特点：</p><ol><li>非叶子节点最多拥有两个子节点；</li><li>非叶子节值大于左边子节点、小于右边子节点；</li><li>树的左右两边的层级数相差不会大于1;</li><li>没有值相等重复的节点;</li></ol><h2 id="b树" tabindex="-1"><a class="header-anchor" href="#b树" aria-hidden="true">#</a> B树</h2><p>B树和平衡二叉树稍有不同的是B树属于多叉树又名平衡多路查找树（查找路径不只两个）</p><p>B树英文官方定义：</p><p>1、Every node has at most m children.</p><p>2、Every non-leaf node (except root) has at least [m/2] child nodes.</p><p>3、The root has at least two children if it is not a leaf node.</p><p>4、A non-leaf node with k children contains k − 1 keys.</p><p>5、All leaves appear in the same level.</p><p>B树定义：</p><p>1、根节点至少有m个子节点；</p><p>2、每个非叶子节点并且非根节点最少有m/2个，即内部节点的子节点个数最少也有m/2个。</p><p>3、根节点最少有2个子节点。</p><p>4、有k个关键字(关键字按递增次序排列)的非叶结点恰好有k+1个孩子。</p><p>5、所有叶子节点在同一层，即所有叶子几点高度一致。</p><p><strong>规则：</strong></p><p>（1）排序方式：所有节点关键字是按递增次序排列，并遵循左小右大原则；</p><p>（2）子节点数：非叶节点的子节点数&gt;1，且&lt;=M ，且M&gt;=2，空树除外（注：M阶代表一个树节点最多有多少个查找路径，M=M路,当M=2则是2叉树,M=3则是3叉）；</p><p>（3）关键字数：枝节点的关键字数量大于等于ceil(m/2)-1个且小于等于M-1个（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2);</p><p>（4）所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子;</p><h2 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树" aria-hidden="true">#</a> B+树</h2><p>B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。B+树查找的效率要比B树更高、更稳定；</p><p><strong>规则</strong></p><p>（1）B+跟B树不同B+树的<strong>非叶子</strong>节点不保存关键字记录的指针，只进行数据索引，这样使得B+树每个<strong>非叶子</strong>节点所能保存的关键字大大增加；</p><p>（2）B+树<strong>叶子</strong>节点保存了父节点的所有关键字记录的指针，所有数据地址必须要到叶子节点才能获取到。所以每次数据查询的次数都一样；</p><p>（3）B+树叶子节点的关键字从小到大有序排列，左边结尾数据都会保存右边节点开始数据的指针。</p><p>（4）非叶子节点的子节点数=关键字数（来源百度百科）（根据各种资料 这里有两种算法的实现方式，另一种为非叶节点的关键字数=子节点数-1（来源维基百科)，虽然他们数据排列结构不一样，但其原理还是一样的Mysql 的B+树是用第一种方式实现）;</p><p><strong>特点</strong></p><p>1、B+<strong>树的层级更少</strong>：相较于B树B+每个<strong>非叶子</strong>节点存储的关键字数更多，树的层级更少所以查询数据更快；</p><p>2、B+<strong>树查询速度更稳定</strong>：B+所有关键字数据地址都存在<strong>叶子</strong>节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;</p><p>3、B+<strong>树天然具备排序功能：<strong>B+树所有的</strong>叶子</strong>节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。</p><p>4、B+<strong>树全节点遍历更快：<strong>B+树遍历整棵树只需要遍历所有的</strong>叶子</strong>节点即可，，而不需要像B树一样需要对每一层进行遍历，这有利于数据库做全表扫描。</p><p><strong>B树</strong>相对于<strong>B+树</strong>的优点是，如果经常访问的数据离根节点很近，而<strong>B树</strong>的<strong>非叶子</strong>节点本身存有关键字其数据的地址，所以这种数据检索的时候会要比<strong>B+树</strong>快。</p><h2 id="b-树-1" tabindex="-1"><a class="header-anchor" href="#b-树-1" aria-hidden="true">#</a> B*树</h2><p><strong>规则</strong></p><p>B*树是B+树的变种，相对于B+树他们的不同之处如下：</p><p>（1）首先是关键字个数限制问题，B+树初始化的关键字初始化个数是cei(m/2)，b<em>树的初始化个数为（cei(2/3</em>m)）</p><p>（2）B+树节点满时就会分裂，而B*树节点满时会检查兄弟节点是否满（因为每个节点都有指向兄弟的指针），如果兄弟节点未满则向兄弟节点转移关键字，如果兄弟节点已满，则从当前节点和兄弟节点各拿出1/3的数据创建一个新的节点出来；</p><p><strong>特点</strong></p><p>在B+树的基础上因其初始化的容量变大，使得节点空间使用率更高，而又存有兄弟节点的指针，可以向兄弟节点转移关键字的特性使得B*树额分解次数变得更少；</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><strong>1、相同思想和策略</strong></p><p>从平衡二叉树、B树、B+树、B*树总体来看它们的贯彻的思想是相同的，都是采用二分法和数据平衡策略来提升查找数据的速度；</p><p><strong>2、不同的方式的磁盘空间利用</strong></p><p>不同点是他们一个一个在演变的过程中通过IO从磁盘读取数据的原理进行一步步的演变，每一次演变都是为了让节点的空间更合理的运用起来，从而使树的层级减少达到快速查找数据的目的；</p><h2 id="补充概念" tabindex="-1"><a class="header-anchor" href="#补充概念" aria-hidden="true">#</a> 补充概念：</h2>',47),f={href:"https://zhuanlan.zhihu.com/p/27597160",target:"_blank",rel:"noopener noreferrer"},b={href:"http://blog.csdn.net/v_JULY_v/article/details/6530142/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://blog.csdn.net/endlu/article/details/51720299",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/nullzx/p/8729425.html",target:"_blank",rel:"noopener noreferrer"};function x(k,v){const t=p("ExternalLinkIcon");return s(),h("div",null,[i,d,e("p",null,[r("我们平时其实接触到了各种树的应用，如二叉树、二叉搜索树、平衡二叉树、B树、B+树，下面将列出一些对其定义的个人理解。"),e("a",c,[r("平衡二叉树、B树、B+树、B*树 理解其中一种你就都明白了 - 知乎 (zhihu.com)"),n(t)])]),B,e("p",null,[r("平衡树的层级结构：因为平衡二叉树查询性能和树的层级（h高度）成反比，h值越小查询越快、为了保证树的结构左右两端数据大致平衡降低二叉树的查询难度一般会采用一种算法机制实现节点数据结构的平衡，实现了这种算法的有比如"),e("a",g,[r("Treap"),n(t)]),r("、红黑树，使用平衡二叉树能保证数据的左右两边的节点层级相差不会大于1.，通过这样避免树形结构由于删除增加变成线性链表影响查询效率，保证数据平衡的情况下查找数据的速度近于二分法查找；")]),_,e("p",null,[r("附（二分法查找）："),e("a",f,[r("二分法查找原理 - 知乎专栏"),n(t)])]),e("p",null,[r("附（B、B+、B*树）："),e("a",b,[r("从B树、B+树、B*树谈到R 树"),n(t)])]),e("p",null,[r("附（B、B+、B*树）："),e("a",u,[r("end's coding life"),n(t)])]),e("p",null,[r("附："),e("a",m,[r("B树和B+树的插入、删除图文详解 - nullzx - 博客园"),n(t)])])])}const T=o(l,[["render",x],["__file","tree.html.vue"]]);export{T as default};
