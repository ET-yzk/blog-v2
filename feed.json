{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "ET-yzk 🌱",
  "home_page_url": "https://blog.yzketx.online/",
  "feed_url": "https://blog.yzketx.online/feed.json",
  "description": "凌晨四点，见海棠花未眠 🌸",
  "items": [
    {
      "title": "Attention:",
      "url": "https://blog.yzketx.online/404.html",
      "id": "https://blog.yzketx.online/404.html",
      "summary": "Attention: You have reached the very last page of the Internet.",
      "content_html": "<h1> Attention:</h1>\n<blockquote>\n<p>You have reached the very last page of the Internet.</p>\n</blockquote>\n<blockquote>\n<p>We hope you have enjoyed your browsing.</p>\n</blockquote>\n<blockquote>\n<p>Now turn off your computer and go outside.</p>\n</blockquote>\n<blockquote>\n<p>😃</p>\n</blockquote>\n",
      "date_published": "2023-11-20T16:03:36.000Z",
      "date_modified": "2023-11-20T16:03:36.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "移动开发",
      "url": "https://blog.yzketx.online/course/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91.html",
      "id": "https://blog.yzketx.online/course/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91.html",
      "summary": "移动开发 版本号",
      "content_html": "<h1> 移动开发</h1>\n<h2> 版本号</h2>\n<p>a.b.c:</p>\n<ul>\n<li>c通常为bugfix</li>\n<li>b为小改动</li>\n<li>a为大改动，涉及接口变动，界面大改等等</li>\n</ul>\n<p>rp文件的版本管理：</p>\n<ul>\n<li>git lfs</li>\n<li>网上的拆包后管理</li>\n</ul>\n<h2> 文件树</h2>\n<div class=\"language-bash\" data-ext=\"sh\"></div>",
      "date_published": "2023-11-20T16:03:36.000Z",
      "date_modified": "2023-11-20T16:03:36.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "二叉查找树(BST)",
      "url": "https://blog.yzketx.online/daily/BST.html",
      "id": "https://blog.yzketx.online/daily/BST.html",
      "summary": "二叉查找树(BST) 定义",
      "content_html": "<h1> 二叉查找树(BST)</h1>\n<h3> 定义</h3>\n<p>BST是满足如下3个条件的二叉树：</p>\n<ol>\n<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>\n<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>\n<li>结点的左子树和右子树都是BST</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203132246153.png\" alt=\"\" tabindex=\"0\"><figcaption></figcaption></figure>\n<h2> 规律</h2>\n<ol>\n<li>中序遍历将得到递增值</li>\n</ol>\n<div class=\"language-python\" data-ext=\"py\"></div>",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203132246153.png",
      "date_published": "2022-03-13T00:00:00.000Z",
      "date_modified": "2023-11-20T16:03:36.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "CI 持续集成 todo",
      "url": "https://blog.yzketx.online/daily/ci.html",
      "id": "https://blog.yzketx.online/daily/ci.html",
      "summary": "CI 持续集成 todo Github Action",
      "content_html": "<h1> CI 持续集成 todo</h1>\n<h2> Github Action</h2>\n<p>https://www.codenong.com/j5e52863b6fb9a07cca1/</p>\n<p>分出3个action</p>\n<ul>\n<li>test ci</li>\n<li>docker image</li>\n<li>deploy</li>\n</ul>\n",
      "date_published": "2023-11-20T16:03:36.000Z",
      "date_modified": "2023-11-20T16:03:36.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "深入浅出计算机网络",
      "url": "https://blog.yzketx.online/course/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
      "id": "https://blog.yzketx.online/course/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
      "summary": "深入浅出计算机网络 湖科大教书匠",
      "content_html": "<h1> 深入浅出计算机网络</h1>\n<blockquote>\n<i class=\"fa-brands fa-bilibili\">\n<p><a href=\"https://space.bilibili.com/360996402/channel/collectiondetail?sid=533771\" target=\"_blank\" rel=\"noopener noreferrer\">湖科大教书匠</a></p>\n</i></blockquote><i class=\"fa-brands fa-bilibili\">\n<p>此笔记最初源于对上述作者视频的学习，在此感谢老师。</p>\n</i>",
      "date_published": "2023-11-20T16:03:36.000Z",
      "date_modified": "2023-11-20T16:03:36.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Python 内存管理策略",
      "url": "https://blog.yzketx.online/daily/python-memory-management-strategy.html",
      "id": "https://blog.yzketx.online/daily/python-memory-management-strategy.html",
      "summary": "Python 内存管理策略",
      "content_html": "<h1> Python 内存管理策略</h1>\n<blockquote>\n<p>引用计数、垃圾回收、内存池机制</p>\n<p>垃圾回收机制主要是以引用计数为主要手段以标记清除和隔代回收机制为辅的手段</p>\n</blockquote>\n<h2> 引用计数（reference count）</h2>\n<p>在python中，每个对象都有存有该对象的引用总数，即引用计数。</p>\n<p>每个对象维护一个 ob_ref，用来记录该对象当前被引用的次数，一旦对象的引用计数为0，该对象可以被回收，对象占用的内存空间将被释放。</p>\n<p>它的缺点是需要额外的空间维护计数，这个问题是其次的，最主要的问题是它不能解决对象的“循环引用”【闭包】。</p>\n<h3> 增加情形</h3>\n<ol>\n<li>对象被创建：x = [1]      <strong>[1]为对象</strong></li>\n<li>新增其他别名对其引用：y = x      <strong>变量名为别名</strong></li>\n<li>被作为参数传递给函数：foo(x)</li>\n<li>作为容器对象的一个元素：a = [x]</li>\n</ol>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 减少情形</h3>\n<ol>\n<li>一个本地引用或对象离开了它的作用域。如函数 foo(x) 结束时，x 指向的对象引用减一</li>\n<li>对象别名被显式销毁：del x</li>\n<li>对象的一个别名赋值给了其他对象：x = 666</li>\n<li>对象从另一个容器对象中移除：z.remove(x)</li>\n<li>容器对象本身被销毁：del z</li>\n</ol>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 垃圾回收</h2>\n<ol>\n<li>\n<p>当内存中有不再使用的部分时，垃圾收集器就会把他们清理掉。<strong>它会去检查那些引用计数为0的对象</strong>，然后清除其在内存的空间。当然除了引用计数为0的会被清除，还有一种情况也会被垃圾收集器清掉：当两个对象相互引用时，他们本身其他的引用已经为0了。</p>\n</li>\n<li>\n<p>垃圾回收机制还有一个<strong>循环垃圾回收器</strong>（<strong>标记-清除</strong>和<strong>分代回收</strong>），确保释放循环引用对象（a引用b, b引用a, 导致其引用计数永远不为0）。</p>\n</li>\n</ol>\n<p>在垃圾回收的时候，Python 不能进行其它任务，所以如果频繁的进行垃圾回收将大大降低 Python 的工作效率，因此，Python 只会在特定的条件下自动进行垃圾回收，这个条件就是\"阈值\"，在 Python 运行过程中，会记录对象的<strong>分配和释放次数</strong>，当这两个次数的<strong>差值高于阈值</strong>的时候，Python 才会进行垃圾回收。</p>\n<p><strong>查看阈值</strong>：</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>700 就是垃圾回收启动的阈值，两个 10 是 Python 的垃圾分代回收机制。为了处理如list、dict、tuple等容器对象的循环引用问题，Python 引用了<strong>标记-清除</strong>和<strong>分代回收</strong>的策略。</p>\n<p><strong>标记清除</strong>：</p>\n<p>标记清除是一种基于追踪回收 （Tracing GC）技术实现的回收算法，它分为两个阶段：第一阶段是把所有活动对象打上标记，第二阶段是把没有标记的非活动对象进行回收，对象是否活动的判断方法是：从根对象触发，沿着\"有向边\"遍历所有对象，可达的对象就会被标记为活动对象，不可达的对象就是后面需要清除的对象，如下图</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202303262322890.png\" alt=\"在这里插入图片描述\" tabindex=\"0\"><figcaption>在这里插入图片描述</figcaption></figure>\n<p>从根对象（小黑点)）出发，1、2、3可达，4、5不可达（1-3-4-5 环路），那么1、2、3就会被标记为活动对象，4、5就是会被回收的对象，这种方法的缺点是：每次清除非活动对象前都要扫描整个堆内存里面的对象。</p>\n<p><strong>分代回收</strong>：</p>\n<p>分代回收是一种以空间换时间的操作方式，Python 把所有对象的存货时间分为 3 代(0、1、2)，对应着 3 个链表，新创建的对象会被移到第 0 代，当第 0 代的链表总数达到上限时，就会触发 Python 的垃圾回收机制，把所有可以回收的对象回收，而不会回收的对象就会被移到1代，以此类推，第2代的对象是存活最久的对象，当然分代回收是建立在标记清除技术的基础上的。</p>\n<p>现在回过头来分析之前的阈值：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>第一个 10 代表每 10 次 0 代的垃圾回收才会触发 1 次 1 代的垃圾回收，每 10 次 1 代的垃圾回收才会触发 1 次 2 代的垃圾回收。当然，也可以手动垃圾回收：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h2> 内存池机制</h2>\n<p>分为大内存和小内存。大小以 256 字节为界限，对于大内存使用 Malloc 进行分配，而对于小内存则使用内存池进行分配。</p>\n<p>内存池又分为4个层次：Block、Pool、Arean、usedpool，如下图所示</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202303262313994.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>其中 Block 是最小的内存单元，大小为 8 的整数倍。如果想申请 27B 的内存，会分配一个 32B 的 Block，其中申请 size 和 size_index 之间的关系有对应，见下图</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202303262314601.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>有关 Block 申请机制如下</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202303262315557.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>为了避免频繁的申请和释放内存，python的内置数据类型，数值、字符串，查看 Python源码可以看到数值缓存范围为 -5 ~ 257</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>对于 -5 ~ 257 范围内的数值，创建之后 Python 会把其加入到缓存池中，当再次使用时，则直接从缓存池中返回，而不需要重新申请内存，如果超出了这个范围的数值，则每次都需要申请内存。下面看个例子：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p><strong>字符串的 intern 机制</strong>：</p>\n<p>Python 解释器中使用了 intern（字符串驻留）的技术来提高字符串效率，所谓 intern 机制，指的是：字符串对象仅仅会保存一份，放在一个共用的字符串储蓄池中，并且是不可更改的，这也决定了字符串时不可变对象。</p>\n<p><strong>机制原理：</strong></p>\n<p>实现 Intern 机制的方式非常简单，就是通过维护一个字符串储蓄池，这个池子是一个字典结构，如果字符串已经存在于池子中就不再去创建新的字符串，直接返回之前创建好的字符串对象，如果之前还没有加入到该池子中，则先构造一个字符串对象，并把这个对象加入到池子中去，方便下一次获取。</p>\n<p>但并非全部的字符串都会采用 intern 机制，只有包括<strong>下划线、数字、字母</strong>的<strong>短字符串</strong>才会被 intern，同时<strong>字符数不能超过20个</strong>，因为如果超过20个字符的话，Python 解释器就会认为这个字符串不常用，不用放入字符串池子中。</p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202303262322890.png",
      "date_published": "2023-11-07T13:59:28.000Z",
      "date_modified": "2023-11-07T13:59:28.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Pycharm 远程开发",
      "url": "https://blog.yzketx.online/daily/pycharm-remote-develop.html",
      "id": "https://blog.yzketx.online/daily/pycharm-remote-develop.html",
      "summary": "Pycharm 远程开发 pycharm的远程开发，关键在于配置远程解释器，在配置远程解释器时需要选择远程映射目录，默认为/tmp/pycharm_project_xxx，其中保存的便是本地项目的远程同步文件，如果不需要将本地文件在服务区同步保留可以不更改，如果需要在远程服务器也保存文件则需要将其修改到指定远程文件夹，及下图的同步文件夹后半部。",
      "content_html": "<h1> Pycharm 远程开发</h1>\n<p>pycharm的远程开发，关键在于配置远程解释器，在配置远程解释器时需要选择远程映射目录，默认为<code>/tmp/pycharm_project_xxx</code>，其中保存的便是本地项目的远程同步文件，如果不需要将本地文件在服务区同步保留可以不更改，如果需要在远程服务器也保存文件则需要将其修改到指定远程文件夹，及下图的同步文件夹后半部。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/image-20230926115713721.png\" alt=\"image-20230926115713721\" tabindex=\"0\"><figcaption>image-20230926115713721</figcaption></figure>\n<p>在“配置远程解释器”完成后，便会在“工具--&gt;部署”中添加远程主机配置，此时选中的远程主机才是适配<strong>当前远程解释器</strong>的。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/image-20230926120236824.png\" alt=\"image-20230926120236824\" tabindex=\"0\"><figcaption>image-20230926120236824</figcaption></figure>\n<p>也即远程开发的关键在于 <strong>远程主机部署路径与远程解释器同步文件夹</strong>的对应（上图的远程主机是在添加远程解释器指定来如上同步文件夹后默认创建的，且当前选中配置的远程主机为左上角的✅），否则会报错如下。</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/image-20230926115318549.png\" alt=\"image-20230926115318549\" tabindex=\"0\"><figcaption>image-20230926115318549</figcaption></figure>\n<p>如上图，正确配置后的情况，部署上部分选项都会点亮。</p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/image-20230926115713721.png",
      "date_published": "2023-10-31T12:25:54.000Z",
      "date_modified": "2023-10-31T12:25:54.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Markdown v2",
      "url": "https://blog.yzketx.online/tip/markdown/markdown-intro.html",
      "id": "https://blog.yzketx.online/tip/markdown/markdown-intro.html",
      "summary": "v2 Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Markdown 的目标是实现「易读易写」。",
      "content_html": "<h1> v2</h1>\n<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n<p>Markdown 的目标是实现「易读易写」。</p>\n<!-- more -->\n<h2> 概述</h2>\n<p>不过最需要强调的便是它的可读性。一份使用 Markdown 格式撰写的文件应该可以直接以纯文字发佈，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href=\"http://docutils.sourceforge.net/mirror/setext.html\" target=\"_blank\" rel=\"noopener noreferrer\">Setext</a>、<a href=\"http://www.aaronsw.com/2002/atx/\" target=\"_blank\" rel=\"noopener noreferrer\">atx</a>、<a href=\"http://textism.com/tools/textile/\" target=\"_blank\" rel=\"noopener noreferrer\">Textile</a>、<a href=\"http://docutils.sourceforge.net/rst.html\" target=\"_blank\" rel=\"noopener noreferrer\">reStructuredText</a>、<a href=\"http://www.triptico.com/software/grutatxt.html\" target=\"_blank\" rel=\"noopener noreferrer\">Grutatext</a> 和 <a href=\"http://ettext.taint.org/doc/\" target=\"_blank\" rel=\"noopener noreferrer\">EtText</a>，然而最大灵感来源其实是纯文字的电子邮件格式。</p>\n<p>因此 Markdown 的语法全由标点符号所组成，并经过严谨慎选，是为了让它们看起来就像所要表达的意思。像是在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。假如你有使用过电子邮件，引言写法看起来就真的像是引用一段文字。</p>\n<p>Markdown 具有一系列衍生版本，用于扩展 Markdown 的功能 (如表格、脚注、内嵌 HTML 等等) ，这些功能原初的 Markdown 尚不具备，它们能让 Markdown 转换成更多的格式，例如 LaTeX，Docbook。Markdown 增强版中比较有名的有 Markdown Extra、MultiMarkdown、 Maruku 等。这些衍生版本要么基于工具，如 Pandoc；要么基于网站，如 GitHub 和 Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p>\n<h2> 用途</h2>\n<p>Markdown 的语法有个主要的目的: 用来作为一种网络内容的<em>写作</em>用语言。Markdown 的重点在于，它能让文件更容易阅读、编写。因此，Markdown 的格式语法只涵盖纯文字可以涵盖的范围。</p>\n<p>Markdown 的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台 WordPress 能很好的支持 Markdown。</p>\n<p>用于编写说明文档，并且以 <code>README.md</code> 的文件名保存在软件的目录下面。</p>\n<p>除此之外，我们还可以快速将 Markdown 转化为演讲 PPT、Word 产品文档、LaTex 论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown 已经广泛使用，极大地推进了动态可重复性研究的历史进程。</p>\n<h3> 行内 HTML</h3>\n<p>不在 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>\n<p>只有块元素 ── 比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以利与内容区隔。而且这些 (元素) 的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 的解析器有智慧型判断，可以避免在块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p>\n<p>举例来说，在 Markdown 文件里加上一段 HTML 表格:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>请注意，Markdown 语法在 HTML 块标签中将不会被进行处理。例如，你无法在 HTML 块内使用 Markdown 形式的 <code>*强调*</code>。</p>\n<h3> 特殊字元自动转换</h3>\n<p>&lt;  &amp;</p>\n<p>在 HTML 文件中，有两个字元需要特殊处理: <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>\n<p><code>&amp;</code> 符号其实很容易让写作网络文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「<code>AT&amp;amp;T</code>」 ，还得转换网址内的 <code>&amp;</code> 符号，如果你要链接到 <code>http://images.google.com/images?num=30&amp;q=larry+bird</code></p>\n<p>你必须要把网址转成:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。</p>\n<p>Markdown 允许你直接使用这些符号，但是你要小心跳脱字元的使用，如果你是在 HTML 实体中使用 <code>&amp;</code> 符号的话，它不会被转换，而在其它情形下，它则会被转换成 <code>&amp;amp;</code>。所以你如果要在文件中插入一个著作权的符号，你可以这样写:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>Markdown 将不会对这段文字做修改，但是如果你这样写:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>Markdown 就会将它转为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 支持 <a href=\"#%E8%A1%8C%E5%86%85-html\">行内 HTML</a> ，如果你是使用 <code>&lt;</code> 符号作为 HTML 标签使用，那 Markdown 也不会对它做任何转换，但是如果你是写:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>Markdown 将会把它转换为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>不过需要注意的是，code 范围内，不论是行内还是块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code (和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。)</p>\n<hr>\n<h2> 块元素</h2>\n<h3> 段落和换行</h3>\n<p>一个段落是由一个以上相连接的行句组成，而一个以上的空行则会切分出不同的段落 (空行的定义是显示上看起来像是空行，便会被视为空行。比方说，若某一行只包含空白和 tab，则该行也会被视为空行) ，一般的段落不需要用空白或断行缩进。</p>\n<p>「一个以上相连接的行句组成」这句话其实暗示了 Markdown 允许段落内的强迫断行，这个特性和其他大部分的 text-to-HTML 格式不一样 (包括 MovableType 的「Convert Line Breaks」选项) ，其它的格式会把每个断行都转成 <code>&lt;br /&gt;</code> 标签。</p>\n<p>如果你<em>真的</em>想要插入 <code>&lt;br /&gt;</code> 标签的话，在行尾加上两个以上的空白，然后按 enter。</p>\n<p>是的，这确实需要花比较多功夫来插入 <code>&lt;br /&gt;</code> ，但是「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href=\"#blockquotes\">块引言</a> 和多段落的 <a href=\"#%E5%88%97%E8%A1%A8\">列表</a> 在使用换行来排版的时候，不但更好用，还更好阅读。</p>\n<h3> 标题</h3>\n<p>标题能显示出文章的结构。</p>\n<p>Markdown 支持两种标题的语法，<a href=\"http://docutils.sourceforge.net/mirror/setext.html\" target=\"_blank\" rel=\"noopener noreferrer\">Setext</a> 和 <a href=\"http://www.aaronsw.com/2002/atx/\" target=\"_blank\" rel=\"noopener noreferrer\">atx</a> 形式。</p>\n<p>Setext 形式是用底线的形式，利用 <code>=</code> (最高阶标题) 和 <code>-</code> (第二阶标题) ，例如:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>\n<p>Atx (推荐)形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如:</p>\n<ul>\n<li>H1: <code># Header 1</code></li>\n<li>H2: <code>## Header 2</code></li>\n<li>H3: <code>### Header 3</code></li>\n<li>H4: <code>#### Header 4</code></li>\n<li>H5: <code>##### Header 5</code></li>\n<li>H6: <code>###### Header 6</code></li>\n</ul>\n<h3> Blockquotes</h3>\n<p>Markdown 使用 email 形式的块引言，如果你很熟悉如何在 email 信件中引言，你就知道怎么在 Markdown 文件中建立一个块引言，那会看起来像是你强迫断行，然后在每行的最前面加上 <code>&gt;</code> :</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>Markdown 也允许你只在整个段落的第一行最前面加上 <code>&gt;</code> :</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>块引言可以有阶层 (例如: 引言内的引言) ，只要根据层数加上不同数量的 <code>&gt;</code> :</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>引言的块内也可以使用其他的 Markdown 语法，包括标题、列表、代码块等:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>任何标准的文字编辑器都能简单地建立 email 样式的引言，例如 BBEdit ，你可以选取文字后然后从选单中选择<em>增加引言阶层</em>。</p>\n<h3> 列表</h3>\n<p>Markdown 支持有序列表和无序列表。</p>\n<p>无序列表使用减号作为列表标记(也可使用星号、加号):</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>也可以(不建议):</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>有序列表则使用数字接着一个英文句点:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>如果你的列表标记写成:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点都写作 <code>1</code> 你可以完全不用在意数字的正确性。</p>\n<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多三个空白，项目标记后面则一定要接着至少一个空白或 tab。</p>\n<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>但是如果你很懒，那也不一定需要:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>如果列表项目间用空行分开， Markdown 会把项目的内容在输出时用 <code>&lt;p&gt;</code> 标签包起来，举例来说:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>会被转换为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>但是这个:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>会被转换为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空白或是一个 tab :</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>如果要在列表项目内放进引言，那 <code>&gt;</code> 就需要缩进:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>当然，项目列表很可能会不小心产生，像是下面这样的写法:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜线。</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h3> 代码块</h3>\n<p>和代码相关的写作或是标签语言原始码通常会有已经排版好的代码块，通常这些块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码块包起来。</p>\n<p>要在 Markdown 中建立代码块很简单，只要简单地缩进 4 个空白或是 1 个 tab 就可以，例如，下面的输入:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>Markdown 会转换成:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>这里的缩进 (4 个空白或是 1 个 tab) ，都会被移除，例如:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>会被转换为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>一个代码块会一直持续到没有缩进的那一行 (或是文件结尾) 。</p>\n<p>在代码块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制粘贴，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>会被转换为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>代码块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>\n<p>如果你想要在代码块里输入用 Markdown 表示的代码库，你可以进行嵌套。</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>会渲染为</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h3> 分隔线</h3>\n<p>你可以在一行中用三个或以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号中间插入空白。下面每种写法都可以建立分隔线:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><h2> 行内元素</h2>\n<h3> 链接</h3>\n<p>Markdown 支持两种形式的链接语法: <em>行内</em>和<em>参考</em>两种形式。</p>\n<p>不管是哪一种，链接的文字都是用 <code>[方括号]</code> 来标记。</p>\n<p>要建立一个行内形式的链接，只要在方块括号后面马上接着括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>会产生:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>如果你是要链接到同样主机的资源，你可以使用相对路径:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>参考形式的链接使用另外一个方括号接在链接文字的括号后面，而在第二个方括号里面要填入用以辨识链接的标签:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>接着，在文件的任意处，你可以把这个标签的链接内容定义出来:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>链接定义的形式为:</p>\n<ul>\n<li>方括号，输入链接的标识 ID</li>\n<li>冒号</li>\n<li>一个以上的空白或 tab</li>\n<li>链接的网址</li>\n<li>选择性地添加 title 内容，可以用单引号、双引号或是括号包括</li>\n</ul>\n<p>下面这三种链接的定义相同:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p><strong>请注意:</strong> 有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>\n<p>链接网址也可以用方括号包起来:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>你也可以把 title 属性放到下一行，也可以加一些缩进，网址太长的话，这样会比较好看:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>\n<p>链接辨识标签可以有字母、数字、空白和标点符号，但是并<strong>不</strong>区分大小写，因此下面两个链接是一样的:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p><em>预设的链接标签</em>功能让你可以省略指定链接标签，这种情形下，链接标签和链接文字会视为相同，要用预设链接标签只要在链接文字后面加上一个空的方括号，如果你要让 \"Google\" 链接到 google.com，你可以简化成:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>然后定义链接内容:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>由于链接文字可能包含空白，所以这种简化的标签内也可以包含多个文字:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>然后接着定义链接:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>\n<p>下面是一个参考式链接的范例:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>如果改成用链接名称的方式写:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>上面两种写法都会产生下面的 HTML。</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>下面是用行内形式写的同样一段内容的 Markdown 文件，提供作为比较之用:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字元，但是用行内形式的链接却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文字还要多。</p>\n<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的资讯移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>\n<h3> 强调</h3>\n<p>Markdown 使用星号 (<code>*</code>) 和底线 (<code>_</code>) 作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>会转成:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>\n<p>强调也可以直接插在文字中间:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>但是如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号。</p>\n<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h3> 代码</h3>\n<p>如果要标记一小段行内代码，你可以用反引号把它包起来 (<code>`</code>) ，例如:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>会产生:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>如果要在代码内插入反引号，你可以用多个反引号来开启和结束行内代码:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>这段语法会产生:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>代码码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>会产生:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>在代码码区段内，<code>&amp;</code> 和方括号都会被转成 HTML 实体，这样会比较容易插入 HTML 原始码，Markdown 会把下面这段:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>转为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>你也可以这样写:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>以产生:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><h3> 图片</h3>\n<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>\n<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式: <em>行内</em> 和 <em>参考</em>。</p>\n<p>行内图片的语法看起来像是:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>详细叙述如下:</p>\n<ul>\n<li>一个惊叹号 <code>!</code></li>\n<li>一个方括号，里面放上图片的替代文字</li>\n<li>一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上\n选择性的 title 文字。</li>\n</ul>\n<p>参考式的图片语法则长得像这样:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>「id」是图片参考的名称，图片参考的定义方式则和链接参考一样:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>\n<h3> 其他文本样式</h3>\n<ul>\n<li>删除:<code>~~delete~~</code></li>\n<li>段落: 段落之间空一行</li>\n<li>换行符: 一行结束时输入两个空格</li>\n</ul>\n<hr>\n<h2> 其它</h2>\n<h3> 自动链接</h3>\n<p>Markdown 支持比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接，链接的文字就和链接位置一样，例如:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>Markdown 会转为:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>自动的邮件链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字元转成 16 进位码的 HTML 实体，这样的格式可以混淆一些不好的信箱地址收集机器人，例如:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>Markdown 会转成:</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>在浏览器里面，这段字串会变成一个可以点击的「address@example.com」链接。</p>\n<p>(这种作法虽然可以混淆不少的机器人，但并无法全部挡下来，不过这样也比什么都不做好些。无论如何，公开你的信箱终究会引来广告信件的。)</p>\n<h3> 转义字符</h3>\n<p>Markdown 可以利用反斜线来插入一些在语法中有其它意义的符号，例如: 如果你想要用星号加在文字旁边的方式来做出强调效果 (但不用 <code>&lt;em&gt;</code> 标签) ，你可以在星号的前面加上反斜线:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>Markdown 支持在下面这些符号前面加上反斜线来帮助插入普通的符号:</p>\n<ul>\n<li><code>\\</code> 反斜线</li>\n<li><code>`</code> 反引号</li>\n<li><code>*</code> 星号</li>\n<li><code>_</code> 底线</li>\n<li><code>{}</code> 大括号</li>\n<li><code>[]</code> 方括号</li>\n<li><code>()</code> 括号</li>\n<li><code>#</code> 井字号</li>\n<li><code>+</code> 加号</li>\n<li><code>-</code> 减号</li>\n<li><code>.</code> 英文句点</li>\n<li><code>!</code> 惊叹号</li>\n</ul>\n<h2> 快捷键</h2>\n<table>\n<thead>\n<tr>\n<th>输出后的效果</th>\n<th>Markdown</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Bold</strong></td>\n<td><code>**text**</code></td>\n<td>Ctrl/⌘ + B</td>\n</tr>\n<tr>\n<td><em>Emphasize</em></td>\n<td><code>*text*</code></td>\n<td>Ctrl/⌘ + I</td>\n</tr>\n<tr>\n<td><code>Inline Code</code></td>\n<td>`code`</td>\n<td>选中后 <code>`</code></td>\n</tr>\n</tbody>\n</table>\n<h2> 表格</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">居中</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:left\">左对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">居中使用<code>:-:</code></td>\n<td style=\"text-align:right\">右对齐使用<code>-:</code></td>\n<td style=\"text-align:left\">左对齐使用<code>:-</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:right\">aaaaaaaaa</td>\n<td style=\"text-align:left\">aaaa</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:right\">aaaa</td>\n<td style=\"text-align:left\">a</td>\n</tr>\n</tbody>\n</table>\n<h2> Emoji</h2>\n<p><code>:emoji名称:</code></p>\n<p>Example: <code>:smile:</code> 😄</p>\n<p>你可以在 <a href=\"/tip/markdown/emoji/\" target=\"blank\">Emoji 列表</a> 找到所有可用的 Emoji。</p>\n<h2> Markdown 效果演示</h2>\n<ul>\n<li><a href=\"/tip/markdown/demo.html\" target=\"blank\">查看详情</a></li>\n</ul>\n",
      "image": "https://blog.yzketx.online/path/to/img.jpg",
      "date_published": "2023-03-09T11:41:09.000Z",
      "date_modified": "2023-03-09T11:41:09.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "The MIT License (MIT)",
      "url": "https://blog.yzketx.online/LICENSE.html",
      "id": "https://blog.yzketx.online/LICENSE.html",
      "summary": "The MIT License (MIT)",
      "content_html": "<h1> The MIT License (MIT)</h1>\n<p>Copyright © 2023 &lt;copyright zkye&gt;</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "阿里云开发社区的电子书《阿里工程师的自我修养》总结",
      "url": "https://blog.yzketx.online/book/cxydzwxy.html",
      "id": "https://blog.yzketx.online/book/cxydzwxy.html",
      "summary": "阿里云开发社区的电子书《阿里工程师的自我修养》总结",
      "content_html": "<h1> 阿里云开发社区的电子书《阿里工程师的自我修养》总结</h1>\n<h2> 一、结构化思维</h2>\n<p>在日常工作中，我们时常会碰到这样的情况，有的人讲事情逻辑非常混乱，罗列了很多事项，却把握不到重点，无法把一件事情说清楚。这种思维混乱是典型的缺少结构化思维的表现。</p>\n<p><strong>具备结构化思维，才能将问题分析地更全面、更深刻。</strong></p>\n<p>简单来讲，结构化思维的定义就是：<strong>逻辑+套路</strong>。所谓逻辑，就是我们的结构之间必须有逻辑关系（演绎、因果、时间、程度）。所谓套路，就是我们解决问题的方法论，比如5W2H。</p>\n<p>进行结构化思考总的来说有两个步骤。首先是<strong>建立中心</strong>，要定义清楚要解决的问题，明确目标。然后是<strong>结构化分解</strong>，分解的策略就是四种逻辑关系。</p>\n<p>举例来说，如何打造极客文化。这个问题的中心很明确，接下来可以按照空间顺序进行分解。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202201221145045.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>确定完要做的事情，还可以按照时间顺序对如何落地进行分解。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202201221145130.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<h2> 二、原理性思维：找到知识背后的原理</h2>\n<p>在程序员的职业里，掌握原理，比掌握某项知识更为重要。</p>\n<p>在软件开发中，系统的复杂性会越来越高，我们面对的场景也越来越多，掌握了知识背后的原理，可以大幅度降低我们对于知识的记忆量，<strong>知识量是爆炸的，但是原理绝对是可控的</strong>。</p>\n<p>原理性的东西比直接的知识有更强的复用度。探求原理的过程本身也很有趣。</p>\n<p>对于程序员来说，需要掌握的原理性知识有：java，linux，数据结构和算法，数据库，网络通信与分布式计算的原理，设计模式，领域性的原理，管理学，沟通学等等。</p>\n<p>如何在工作中学习和运用这些原理，有一个最佳实践：</p>\n<ul>\n<li>首先，对你可能用到的领域知识，<strong>建立一个基本的概念</strong>。看书，看文章，找行业资深的人去聊，都可以得到。</li>\n<li>在实践中，有个意识是 <strong>\"多问一下为什么\"，并一直\"刨根问底\"</strong> 。注意思考一下，为什么在这个地方会运用这个原理，也就是找到“场景”和“原理”的关联关系，这样你的理解会更加深刻。</li>\n<li>了解了原理以后，<strong>在实践中运用一下</strong>，这样你对这个原理的理解就会非深刻，并且你知道如何去运用这原理;</li>\n<li>如果这是一个非常重要的原理，建议如有余力去结合经典的书籍<strong>系统化学习</strong>。</li>\n</ul>\n<h2> 三、扩展性思维：举一反三，拓展思维</h2>\n<p>扩展性思维的核心目标是提升我们思维的广度，也就是让我们的知识树变得更加开阔。</p>\n<p><strong>举一反三</strong>的好处是：我们能否用同样的知识和手段去解决类似的相关联的几个类似问题。触类旁通，相当于产生批量处理的效果，大大提升解决问题的效率。</p>\n<p>比如，系统中存在某个bug导致产生了脏数据，不是直接订正已发现的脏数据，而是根据特征拉取出所有的脏数据，进行一次性处理。</p>\n<p><strong>拓展思维</strong>常见的手段是：遇到问题时，是否能够换更多的理解方式，或者更多的解法。</p>\n<p>比如，除了写更加健壮的代码，还有哪些手段都可以提升系统的容错性？还有数据监控，单据闭环等多种手段；</p>\n<p>当解决问题的手段多了，思维自然就开阔了。</p>\n<h2> 四、反思性思维：思考哪里可以做得更好</h2>\n<p>反思性思维是提升知识质量和深度的一个关键能力。<strong>因为只有不断反思才能让下一次在上一次基础上升级，而不是重复循环。</strong></p>\n<p>比如，一个项目做完了，去思考从方案设计，研发过程，质量保障上面，哪些地方下次可以做得更好？找到不足，下次避免。</p>\n<p>反思性思维的实践，有两个关键点：</p>\n<ul>\n<li>反思性思维最重要的意识：<strong>做事情的过程总有优化的空间</strong>，每次都要有进步；如果没有这种心态，那么很难持续地进行反思。</li>\n<li><strong>反思是一种习惯和潜意识</strong>，可以在不经意之间经常进行，其实不需要很形式化地花很多时间，有时候做完一个事情，习惯性思考一下就可以。</li>\n</ul>\n<h2> 五、习惯养成</h2>\n<p>如何改掉完手机的坏习惯，把更多的时间投入提升自我上？改变为什么这么难？</p>\n<p>首先要了解习惯的产生机制。习惯并非凭空产生，它有前因后果，前因是前一件事情结束(触发条件)，后果是前一件事情结束后的行为带来的一些额外奖励。</p>\n<p>举例来说，晚上下班回家洗完澡这件事情结束后，肯定会开始下一件我们最习惯的事情，比如盯手机看剧或者刷八卦，当这件最习惯的事情结束后，大脑会产生精神上的及时享受，内容很丰富、很精彩，但是却消耗了我们大把时间。</p>\n<p>了解习惯产生的机制后，改变习惯就变得很简单，每次在触发条件发生时，<strong>弹出一道选择题</strong>，选择做无效事情，还是学习？多次以这种方式不断强化自己做对选择题。久而久之，正确的行为被训练得多了，就成为顺其自然的习惯了。所以改变习惯，就是在触发条件发生时，让自己做对选择题，打破旧有习惯回路，建立新的习惯回路。</p>\n<h2> 六、时间管理：三八理论</h2>\n<p>每个人每天有公平的 24 个小时，第 1 个八小时用于睡觉、第 2 个八小时用于工作、第 3 个八小时用于自由支配，但人与人的差距主要是由第 3 个八小时决定的，第 3 个八小时用于消费、交易还是投资有着非常大的人生差别。以下班空闲时间为例解释<strong>消费、交易、投资</strong>从而理解人生差异的不同:</p>\n<p>下班空闲时间，用于消费，比如刷新闻，刷抖音，刷朋友圈，产生及时享受，没产生成长，钱还是那些钱，职位还是原来职位；</p>\n<p>下班空闲时间，用于交易，接个外快，赚点辛苦钱，产生金钱，没产生成长，钱没多多少，职位却还是原来职位；</p>\n<p>下班空闲时间，用于投资，以终为始，相信“慢慢来，成长最快”的认知，持续不断投入多维领域的学习，沉淀能力，获得成长，从成长中获得金钱，名誉的升级；</p>\n<p>学习必须是每日的必修课，必须是日拱一卒，持之以恒，有不断的输入，也有不断的输出，持续地沉淀，在关键时刻输出解决问题能力，从而获得能力认可。</p>\n<p>因此必须找到不被打扰的时间用于投资自己的成长，比较好的习惯坚持早睡早起，建议12点前睡觉，睡觉前抽40分钟学习。每天7点起床，这样就会产生1~1.5个小时的学习时间。</p>\n<p>除了<strong>三八理论</strong>，程序员的时间管理还有两点实践思路：</p>\n<ul>\n<li><strong>利用碎片时间</strong>。比如上下班路上的时间，吃饭的时候，可以把刚才或者今天的事情想一想，想通了，然后定期汇总一下就可以；</li>\n<li><strong>抓住工作的过程</strong>。注意，每次每次出技术方案，优化代码，排查问题，处理故障，准备晋升……都是一次训练的机会，在做事情的过程中就可以思考并快速实践。</li>\n</ul>\n<h2> 七、职业规划</h2>\n<p>职业规划非常难，难在它是未来的一个想象空间，这个想象空间能否实现，和当下做的事情，努力的程度分不开。</p>\n<p><strong>职业规划不是某个岗位，某个角色，而是工作能力的提升</strong>。针对自己岗位需要的能力，职场需要的能力，然后用专家思维，多维视角重点突破 3-4 项能力，抱着 120% 的努力拿到结果，甚至是超出期望的结果，事情成了，能力也就被认可了，所谓的角色、岗位只是顺其自然的结果。但是真能这样做的人少之又少，既然是少之又少，成为少之又少的人才是你的机会。</p>\n<h2> 八、持续学习</h2>\n<p>很多人都说程序员薪资水平不错，可以媲美医生和律师。然而，医生、律师能够凭之前的case 积累非常多的经验，而且这些经验很大程度上可以被复用，程序员则不同，行业更新得太快，积累的经验很快就不适用了。</p>\n<p>程序员的自我学习需要注意以下几点：</p>\n<ul>\n<li><strong>工具非常熟练</strong>，在排查问题和写代码上，如果你1个小时只能尝试一种方法，别人却能 够尝试 10 次，那么别人就是比你牛。天下武功唯快不破，你后续写demo、查问题、 工具的熟练程度都会决定你学习和尝试新事物的速度。</li>\n<li><strong>读书 &amp; 看文档</strong></li>\n<li><strong>技术新闻，技术大会</strong></li>\n<li><strong>做项目，写Demo，看源码</strong>。项目中多尝试一下你学到的新知识，不能惯性使用你熟悉的技术，要知 道你熟悉的东西很快会被淘汰，被淘汰后再调整就来不及了。</li>\n</ul>\n<h2> 九、技术团队</h2>\n<p>在业务技术团队，有一个不好的趋势就是团队越来越业务，越来越没有技术味道。每个人都在谈业务，技术大会上在谈业务，周会上在聊业务，周报里写的是业务项目……唯独少被谈及的是技术本身。此处并不是说业务不重要，而是说理解业务和把控业务需求是技术人员的 base，而不是全部。</p>\n<p>这种技术味道的缺失对技术团队来说是非常可惜的，也不利于技术人员的成长和发展。因为很难想象一个没有技术追求的团队能开发出一个健壮的、可维护性好、可扩展性好的系统。相反，这种业务代码的堆砌，从短期看也许是“较快”实现了业务需求，但是从长远来看，这种烂系统的增加会极大的阻碍业务的发展，形成一个个的黑洞应用，而工程师被裹挟在业务需求和烂系统之间，疲于应对，心力交瘁。</p>\n<p>可以从以下几点考虑破局：</p>\n<ul>\n<li>应用质量。代码重复率，圈复杂度，分层合理度等。</li>\n<li>设计重构。错误码规范等。</li>\n<li>技术分享。项目分析，周会分享等。</li>\n<li>code review。</li>\n<li>创新提效。自动化工具等。</li>\n<li>代码质量。单元测试，线上bug数统计等。</li>\n</ul>\n<h2> 十、一位技术TL的心得</h2>\n<ol>\n<li><strong>制定开发规范引领团队走向统一标准化开发道路。</strong></li>\n</ol>\n<p>包括命名规范、统一IDE代码模板、Maven使用规范、代码Commit规范、统一API规范、异常处理规范、分支开发规范、统一日志规范等。</p>\n<ol start=\"2\">\n<li><strong>架构评审</strong>的价值在于集众人的力量大家一起来分析看看方案里是否有坑，方案上线后是否会遇到不可逾越的重大技术问题，提前尽可能把一些事情先考虑到提出质疑其实对项目的健康发展有很大的好处。</li>\n</ol>\n<p>技术评审时的注意点：技术选型、高性能、高可用、可扩展性、可伸缩性、弹性处理、兼容性、安全性、可测性、可运维性、监控与报警。</p>\n<ol start=\"3\">\n<li>\n<p>建立良好的<strong>CodeReview</strong>规范与习惯，对于一个技术团队是一件非常重要核心的事情，没有 CodeReview 的团队没有未来。</p>\n<p>CodeReview需要关注：确认代码功能、编码规范、潜在的bug、文档和注释、重复代码、复杂度、监控与报警。</p>\n</li>\n</ol>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202201221145045.jpeg",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "计网复习",
      "url": "https://blog.yzketx.online/course/Network-review.html",
      "id": "https://blog.yzketx.online/course/Network-review.html",
      "summary": "计网复习 物理层",
      "content_html": "<h1> 计网复习</h1>\n<h2> 物理层</h2>\n<blockquote>\n<p>单位：bit</p>\n<p>考虑多大的电压代表“0”/“1”，以及接收方如何识别发出放的所发送的比特流；</p>\n<p>确定连接电缆的插头应该有多少根引脚及各引脚见应该如何连接。</p>\n</blockquote>\n<h3> 信号：</h3>\n<ul>\n<li>模拟信号/连续信号：曲线</li>\n<li>数字信号/离散信号：0/1</li>\n</ul>\n<h3> 传输介质</h3>\n<ul>\n<li>双绞线</li>\n<li>同轴电缆</li>\n<li>多模光纤</li>\n</ul>\n<h3> 信道</h3>\n<ul>\n<li>\n<p>通信</p>\n<ul>\n<li>\n<p>单向通信【单工】</p>\n</li>\n<li>\n<p>双向交替通信【半双工】</p>\n</li>\n<li>\n<p>双向同时通信【全双工】</p>\n</li>\n</ul>\n</li>\n<li>\n<p>带通调制：数字 –&gt; 模拟</p>\n</li>\n<li>\n<p>编码（基带调制）： 数字 –&gt; 数字</p>\n<ul>\n<li>不归零制</li>\n<li>归零制</li>\n<li>曼切斯特编码</li>\n<li>差分曼切斯特编码</li>\n</ul>\n</li>\n<li>\n<p>极限容量</p>\n<ul>\n<li>\n<p>码元：常用时间间隔相同的符号来表示一个二进制数字，这样的时间间隔内的信号称为（二进制）码元。 而这个间隔被称为码元长度。【*1bit】</p>\n</li>\n<li>\n<p>码间窜扰：信号波失去了码元间的清晰界限</p>\n</li>\n<li>\n<p>奈氏准则：在带宽为 w (Hz)的低信道中，若不考虑噪声影响，则码元的最高传输速率为 <strong>2w</strong> (码元/秒)；例如，信道带宽为4000Hz，码元最高传输速率为每秒8000个码元</p>\n<p><strong>C=Rlog2(n) (bit/s) , R为最高码元传输速率【带宽*2】，n为分级</strong>，如相位调制，分8项，n=8；振幅调制16个等级，n=16</p>\n</li>\n<li>\n<p>带宽：指在单位时间（一般指的是1秒钟）内能传输的数据量。如：</p>\n<p><strong>带宽=分组大小/分组发送时延</strong>？</p>\n</li>\n<li>\n<p>信噪比：信号平均功率/噪声平均功率，记S/N，单位 dB；</p>\n<p><strong>信噪比(dB)=10lg(S/N) (dB)</strong> 【转为分贝】</p>\n</li>\n<li>\n<p>香农公式：指出信道的极限信息传输速率C；表明信道信噪比越大，信息的极限传输速率就越高。</p>\n<p><strong>C = W log2(1+S/N) (bit/s)</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p>信道复用</p>\n<ul>\n<li>频分复用：所有用户同样时间占用不同带宽[Hz]资源</li>\n<li>时分复用：所有用户不同时间占用相同带宽[Hz]资源</li>\n<li>波分复用：光的频分复用</li>\n<li>码分复用：每个用户可以在同样的时间使用同样的频道通信</li>\n</ul>\n</li>\n</ul>\n<h2> 数据链路层</h2>\n<blockquote>\n<p>单位：帧</p>\n<p>数据链路层提供的点到点的通信</p>\n<p>运输层提供端到端的通信</p>\n<p>点到点：可理解为主机于主机之家的通信。一个点代表一个硬件地址或IP地址，网络中的主机是通过硬件地址或IP地址标识的；</p>\n<p>端到端：可理解为不同节点主机内的两个进程之间的通信，一个进程以端口来标识。</p>\n</blockquote>\n<h3> 封装成帧</h3>\n<p>在数据前后添加首部和尾部</p>\n<ul>\n<li>SOH[0x01]: Start Of Header</li>\n<li>EOT[0x04]: End Of Transmission</li>\n</ul>\n<h3> 透明传输</h3>\n<p>透明指某一实际存在的事物好像不存在一样；这里指使数据链路层对上层不存在一般，即确保数据中凑巧出的“SOH”、“EOT”等字符不被翻译为控制字符。</p>\n<p>字节填充/字符填充：插入转义字符“ESC”[1B]</p>\n<p>零比特填充：在信息字段，一旦发现5个连续1，立即填入0</p>\n<h3> 差错控制</h3>\n<p>在数据传输过程中会产生<strong>比特差错</strong></p>\n<p>BER（Bit Error Rate）: 传输错误比特占总传输比特的比率</p>\n<p>CRC：循环冗余校验码</p>\n<h2> 网络层</h2>\n<blockquote>\n<p>单位：IP数据报</p>\n<p>关心的是通信子网的运行控制</p>\n<p>将网络层的协议控制单元(分组)【PCU】从源端传到目的端，完成<strong>路径选择</strong>，并为分组交换网上的不同主机提供<strong>通信服务</strong>。</p>\n<p>进行路由选择，并实现流量控制、拥塞控制、差错控制、网际互连等</p>\n</blockquote>\n<h2> 运输层</h2>\n<blockquote>\n<p>单位：TCP报文段、UDP用户数据报</p>\n</blockquote>\n<h2> 应用层</h2>\n<blockquote>\n<p>单位：报文</p>\n</blockquote>\n<h2> 网络地址</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/m0_37568814/article/details/81018769?ops_request_misc=%7B%22request%5Fid%22%3A%22163952915816780271536234%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163952915816780271536234&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81018769.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C&amp;spm=1018.2226.3001.4187\" target=\"_blank\" rel=\"noopener noreferrer\">计算机网络基础知识整理</a></p>\n</blockquote>\n<h3> IP地址分类</h3>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>From</th>\n<th>To</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>0.0.0.0</td>\n<td>127.255.255.255</td>\n</tr>\n<tr>\n<td>B</td>\n<td>128.0.0.0</td>\n<td>191.255.255.255</td>\n</tr>\n<tr>\n<td>C</td>\n<td>192.0.0.0</td>\n<td>223.255.255.255</td>\n</tr>\n<tr>\n<td>D</td>\n<td>224.0.0.0</td>\n<td>239.255.255.255</td>\n</tr>\n<tr>\n<td>E</td>\n<td>240.0.0.0</td>\n<td>247.255.255.255</td>\n</tr>\n</tbody>\n</table>\n<p><strong>1、A类地址</strong></p>\n<p>**A类IP地址：**由1个字节的网络地址和3个字节的主机地址，网络地址的最高位必须是“0”。</p>\n<p>如：0XXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）</p>\n<p>**A类IP地址范围：**1.0.0.1---126.255.255.254</p>\n<p><strong>A类IP地址中的私有地址和保留地址：</strong></p>\n<p>① 10.X.X.X是私有地址（所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址）。</p>\n<p>范围（10.0.0.1---10.255.255.254）</p>\n<p>② 127.X.X.X是保留地址，用做循环测试用的。</p>\n<p><strong>2、B类地址</strong></p>\n<p>**B类IP地址：**由2个字节的网络地址和2个字节的主机地址，网络地址的最高位必须是“10”。</p>\n<p>如：10XXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）</p>\n<p>**B类IP地址范围：**128.0.0.1---191.255.255.254。</p>\n<p><strong>B类IP地址的私有地址和保留地址：</strong></p>\n<p>① 172.16.0.0---172.31.255.254是私有地址</p>\n<p>② 169.254.X.X是保留地址。如果你的IP地址是自动获取IP地址，</p>\n<p>而你在网络上又没有找到可用的DHCP服务器。就会得到其中一个IP。</p>\n<p>191.255.255.255是广播地址，不能分配。</p>\n<p><strong>3、C类地址</strong></p>\n<p>**C类IP地址：**由3个字节的网络地址和1个字节的主机地址，网络地址的最高位必须是“110”。</p>\n<p>如：110XXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）</p>\n<p>**类IP地址范围：**192.0.0.1---223.255.255.254。</p>\n<p><strong>C类地址中的私有地址：</strong></p>\n<p>192.168.X.X是私有地址。（192.168.0.1---192.168.255.255)</p>\n<p><strong>4、D类地址</strong></p>\n<p>**D类地址：**不分网络地址和主机地址，它的第1个字节的前四位固定为1110。</p>\n<p>如：1110XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）</p>\n<p>**D类地址范围：**224.0.0.1---239.255.255.254</p>\n<p><strong>5、E类地址</strong></p>\n<p>**E类地址：**不分网络地址和主机地址，它的第1个字节的前四位固定为 1111。</p>\n<p>如：1111XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）</p>\n<p>**E类地址范围：**240.0.0.1---255.255.255.254</p>\n<h3> 私有地址</h3>\n<p>**A类：**10.0.0.0~10.255.255.255</p>\n<p>**B类：**172.16.0.0~172.31.255.255</p>\n<p>**C类：**192.168.0.0~192.168.255.255</p>\n<p>我们买的无线路由器，也要设置局域网，一般为192开头的，比如192.168.0.1或者192.168.199.1</p>\n<p>我们建企业网（单位网络）时，一般是使用私有地址来分配内部主机，小企业使用C类的192.168.0.0网络，中型企业使用172.16.0.0网络，如果还不够用，还有10.0.0.0 网络。</p>\n<h3> 特殊IP</h3>\n<p><strong>1、0.0.0.0</strong></p>\n<p>严格说来，这个奇葩的地址0.0.0.0已经不是一个真正意义上的IP地址了。它表示的是这样一个集合：也就是说；所有不清楚的主机和目的网络。这里的“不清楚”是指在本机的路由表里没有特定条目指明如何到达。对本机来说，它就是一个“收容所”，所有不认识的“三无”人员，一律送进去。如果你在网络设置中设置了缺省网关，那么计算机系统会自动产生一个目的地址为0.0.0.0的缺省路由。</p>\n<p><strong>2、255.255.255.255 限制广播地址。</strong></p>\n<p>对本机来说，这个地址指本网段内(同一广播域)的所有主机。</p>\n<p>然而它的意思很明确，使用人类语言来说意思就是“这里的所有计算机都注意了”这个地址不能被路由器所转发。</p>\n<p><strong>3、127.0.0.1 本机地址</strong></p>\n<p>主要用于测试。用汉语表示，就是“我自己”。在Windows系统中，这个地址有一个别名“Localhost”。寻址这样一个地址，是不能把它发到网络接口的。除非出错，否则在传输介质上永远不应该出现目的地址为“127.0.0.1”的数据包。</p>\n<p><strong>4、224.0.0.1 组播地址</strong></p>\n<p>注意它和广播的区别。从224.0.0.0到239.255.255.255都是这样的地址。224.0.0.1特指所有主机，224.0.0.2特指所有路由器。这样的地址多用于一些特定的程序以及多媒体程序。如果你的主机开启了IRDP(Internet路由发现协议），使用组播功能功能，那么你的主机路由表中应该有这样一条路由。</p>\n<p><strong>5、169.254.x.x</strong></p>\n<p>如果你的主机使用了DHCP功能自动获得一个IP地址，那么当你的DHCP服务器发生故障，或响应时间太长而超出了一个系统规定的时间，计算机操作系统会为你分配这样一个地址。如果你发现你的主机IP地址是一个诸如此类的地址，很不幸的是，现在你的网络不能正常运行了。</p>\n<p><strong>6、10.x.x.x；172.16.0.0---172.31.255.254；192.168.x.x；私有地址</strong></p>\n<p>这些地址被大量用于企业内部网络中。一些宽带路由器，也往往使用192.168.1.1作为缺省地址。私有网络由于不与外部互连，因而可能使用随意的IP地址。保留这样的地址供其使用是为了避免以后接入公网时引起地址混乱。使用私有地址的私有网络在接入Internet时，要使用地址翻译(NAT)，将私有地址翻译成公用合法地址。在Internet上，这类地址是不能出现的。对一台网络上的主机来说，它可以正常接收的合法目的网络地址有三种：本机的IP地址、广播地址以及组播地址。</p>\n<h2> TCP</h2>\n<p>【mac【ip【tcp】数据】】】</p>\n<p>【ip【tcp】数据】-称为MTU</p>\n<p>【数据链路层【网络层【运输层【应用层】】】】</p>\n<p>数据过大，大于1460，需要分段，其中ack number用于对序号确认，seq number编号</p>\n<p>Seq number：TCP连接建立时选择随机数作为初始值，通过SYN包传给接收端主机(SYN cookies采用基于时间种子的随机算法，且发送SYN+ACK后清空资源，收到ACK后通过cookie算法鉴定与SYN+ACK是否匹配)；每发送一次数据，就累加一次数据字节数；</p>\n<p>Ack number：发送端收到此序号表明之前的数据都已被成功接受，其值为收到的报文段序号+1；</p>\n<p>Header length：标识该TCP头部有多少个32bit字（4字节）。因为4位最大能表示15，所以TCP头部最长是60字节。</p>\n<p>ICMP用于检查标识是否出问题，无法纠错。</p>\n<h2> HTTPS</h2>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202112151537104.png\" alt=\"https握手过程\" tabindex=\"0\"><figcaption>https握手过程</figcaption></figure>\n<h3> 状态码</h3>\n<p><code>429</code> Too Many Requests</p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202112151537104.png",
      "date_published": "2021-12-31T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "课程复习"
      ]
    },
    {
      "title": "编译原理",
      "url": "https://blog.yzketx.online/course/bian-yi-yuan-li.html",
      "id": "https://blog.yzketx.online/course/bian-yi-yuan-li.html",
      "summary": "编译原理 文法",
      "content_html": "<h1> 编译原理</h1>\n<h2> 文法</h2>\n<h3> 字符串方幂</h3>\n<p>递推关系</p>\n<h2> ANTLR4</h2>\n<p><a href=\"https://www.cnblogs.com/csguo/p/7644272.html\" target=\"_blank\" rel=\"noopener noreferrer\">ANTLR4权威指南 - 第5章 设计语法 - csguo - 博客园 (cnblogs.com)</a></p>\n<h3> 正则</h3>\n<table>\n<thead>\n<tr>\n<th><strong>语法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>x</em></td>\n<td>匹配一个符号，规则或子规则x</td>\n</tr>\n<tr>\n<td><em>x y</em> … <em>z</em></td>\n<td>匹配一个规则序列</td>\n</tr>\n<tr>\n<td>(…|…|…)</td>\n<td>带有多个选项的子规则</td>\n</tr>\n<tr>\n<td><em>x?</em></td>\n<td>匹配零次或一次x</td>\n</tr>\n<tr>\n<td><em>x*</em></td>\n<td>匹配零次或多次x</td>\n</tr>\n<tr>\n<td><em>x+</em></td>\n<td>匹配一次或多次x</td>\n</tr>\n<tr>\n<td><strong>r</strong>:…;</td>\n<td>定义规则r</td>\n</tr>\n<tr>\n<td>r:…|…|…;</td>\n<td>定义一个带有多个选项的规则r</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><strong>模式名称</strong></th>\n<th style=\"text-align:left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>序列</strong></td>\n<td style=\"text-align:left\">这是由符号和子短语组成的任意长的有限的序列，例如变量声明语法（类型后面加上标识符）以及整数列表等。下面是一些实现这种模式的例子：x y ... z    <em>// x followed by y, ..., z</em>*'['* INT+ <em>']'</em>  <em>// Matlab vector of integers</em></td>\n</tr>\n<tr>\n<td><strong>带终结符的序列</strong></td>\n<td style=\"text-align:left\">这是由符号和子短语组成的任意长的，可能是空的序列，以一个符号结束，通常情况系这个符号是分号或换行符，例如C风格的编程语言中的语句以及以换行符终结的数据行。下面是一些实现这种模式的例子：(statement <em>';'</em>)*  <em>// Java statement list</em>(row <em>'\\n'</em>)*    <em>// Lines of data</em></td>\n</tr>\n<tr>\n<td><strong>带分隔符的序列</strong></td>\n<td style=\"text-align:left\">这是由符号的子短语组成的任意长的非空的序列，用一个特定的符号分隔开，通常这个符号是逗号，分号或句号。例如函数参数列表，函数调用列表，或者是分开却不终止的程序语句。下面是一些实现这种模式的例子：expr (<em>','</em> expr)*   <em>// function call arguments</em>( expr (<em>','</em> expr)* )?<em>// optional function call arguments**'/'</em>? name (<em>'/'<em>name)</em>  <em>// simplified directory name</em>stat (</em>'.'* stat)*   <em>// SmallTalk statement list</em></td>\n</tr>\n<tr>\n<td><strong>选项</strong></td>\n<td style=\"text-align:left\">这是由一系列可选择的短语组成的，例如类型说明，语句，表达式或者XML的标签。下面是一些实现这种模式的例子：type : <em>'int'</em> | <em>'float'</em>;stat : ifstat | whilestat | *'return'<em>expr <em>';'</em> ;expr : <em>'('</em> expr <em>')'</em>| INT | ID ;tag : <em>'&lt;'</em> Name attribute</em> <em>'&gt;'</em>| <em>'&lt;' '/'</em> Name <em>'&gt;'</em>;</td>\n</tr>\n<tr>\n<td><strong>符号约束</strong></td>\n<td style=\"text-align:left\">一个符号的出现需要另一个或多个子序列符号的出现来对应，例如小括号，中括号，大括号，尖括号的匹配等。下面是一些实现这种模式的例子：<em>'('</em> expr <em>')'</em>     <em>// nested expression</em>ID <em>'['</em> expr <em>']'</em>     <em>// array index</em>*'{'* stat* <em>'}'</em> <em>// statements grouped in curlies</em>*'&lt;'* ID (*','<em>ID)</em> <em>'&gt;' // generic type specifier</em></td>\n</tr>\n<tr>\n<td><strong>递归短语</strong></td>\n<td style=\"text-align:left\">这是一种自相似的语言结构，例如表达式结构，Java类嵌套，代码块嵌套以及Python中的函数嵌套定义等。下面是一些实现这种模式的例子：expr : <em>'('</em> expr <em>')'</em>| ID ;classDef : <em>'class'</em> ID <em>'{'</em>(classDef|method|field) <em>'}'</em> ;</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><strong>符号类别</strong></th>\n<th><strong>描述和例子</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>标点符号</td>\n<td>对标点符号和运算符最简单的处理就是直接在语法规则中引用它们。call : ID <em>'('</em> exprList <em>')'</em> ;当然一些程序员更喜欢定义符号的标签规则，例如定义LP来代表左括号。call : ID LP exprList RP ;LP : <em>'('</em> ;RP : <em>')'</em> ;</td>\n</tr>\n<tr>\n<td>关键字</td>\n<td>关键字就是保留的标识符，和标点符号的处理一样，我们可以直接引用也可以定义标签规则。returnStat : <em>'return'</em> expr <em>';'</em></td>\n</tr>\n<tr>\n<td>标识符</td>\n<td>标识符在几乎所有语言中看起来都差不多，可以再加一些改动，比如规定首字符以及设定是否可以使用Unicode字符。ID : ID_LETTER (ID_LETTER | DIGIT)* ; <em>// From C language</em><strong>fragment</strong> ID_LETTER : <em>'a'</em>..<em>'z'</em>|<em>'A'</em>..<em>'Z'</em>|<em>'_'</em> ;<strong>fragment</strong> DIGIT : <em>'0'</em>..<em>'9'</em> ;</td>\n</tr>\n<tr>\n<td>数字</td>\n<td>例子中是整数和简单浮点数的定义。INT : DIGIT+ ;FLOAT  : DIGIT+ <em>'.'</em> DIGIT*  | <em>'.'</em> DIGIT+  ;</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>匹配使用双引号引起来的字符串。STRING : <em>'\"'</em> ( ESC | . )<em>? <em>'\"'</em> ;<strong>fragment</strong> ESC : <em>'\\'</em> [btnr</em>\"\\] ; // \\b, \\t, \\n etc...*</td>\n</tr>\n<tr>\n<td>注释</td>\n<td>识别并丢弃注释。LINE_COMMENT : <em>'//'</em> .<em>? <em>'\\n'</em> -&gt; skip ;COMMENT     : <em>'/*'</em> .</em>? <em>'*/'</em> -&gt; skip ;</td>\n</tr>\n<tr>\n<td>空白字符</td>\n<td>匹配词法中的空白字符并丢弃这些字符。WS : [ \\t\\n\\r]+ -&gt; skip ;</td>\n</tr>\n</tbody>\n</table>\n<h2> 数据存储组织</h2>\n<table>\n<thead>\n<tr>\n<th>内存</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈【局部数据】</td>\n</tr>\n<tr>\n<td>堆</td>\n</tr>\n<tr>\n<td>静态Data</td>\n</tr>\n<tr>\n<td>code/text</td>\n</tr>\n</tbody>\n</table>\n<h2> 期末内容</h2>\n<p><strong>选择题 10 * 2</strong></p>\n<p><strong>编译器结构：前后端包括，作用</strong></p>\n<p>（1） 编译程序：如果源语言为高级语言，目标语言为某台计算机上的汇编语言或机器语言，则此翻译程序称为编译程序。</p>\n<p>（2） 源程序：源语言编写的程序称为源程序。</p>\n<p>（3） 目标程序：目标语言书写的程序称为目标程序。</p>\n<p>（4） 编译程序的前端：它由这样一些阶段组成：这些阶段的工作主要依赖于源语言而与目标机无关。通常前端包括词法分析、语法分析、语义分析和中间代码生成这些阶 段，某些优化工作也可在前端做，也包括与前端每个阶段相关的出错处理工作和符号表管理等工作。</p>\n<p>（5） 后端：指那些依赖于目标机而一般不依赖源语言，只与中间代码有关的那些阶段， 即目标代码生成，以及相关出错处理和符号表操作。</p>\n<p>（6） 遍：是对源程序或其等价的中间语言程序从头到尾扫视并完成规定任务的过程。</p>\n<p><strong>文法：定义要素，给定文法、串可以推导/生成语言，4种语言</strong></p>\n<p><strong>词法分析：任务</strong></p>\n<p><strong>自顶向下xxx语法分析：几个方法的意思</strong></p>\n<p><strong>文法语义</strong></p>\n<p><strong>存储动态静态</strong></p>\n<p><strong>优化基本</strong>：窥孔优化、局部优化、循环优化、全局优化</p>\n<p><strong>计算题 5 * 10</strong></p>\n<p>文法、串，给出推导树、过程等，nfa、dfa【不要求最小化】</p>\n<p>ll分析-文法改造：消除左递归、提取公因子、first集等，</p>\n<p>lr、slr、lr0：增广、闭包、自动机、状态转移树，判断属于那种文法</p>\n<p>可能有简答题: 常用语法方法（自顶向下【递归下降、预测分析法、LL】、自底向下【移进和规约原理、LR(0)分析法】）\\活动记录：作用、调用者、被调用者、存的信息\\变量如何存储</p>\n<p><strong>活动记录</strong>：指运行栈上的栈帧。它在函数/过程调用时被创建；在函数/过程运行中被修改；在函数/过程返回时撤销。包含局部变量、函数实参、临时变量、返回值等数据信息及必要控制信息。调用者是，被调用者是函数/过程?。</p>\n<p>翻译3地址指令、构造指令流图</p>\n<p>基本块的入口：1.程序的第一条语句  2.跳转语句的跳转目标语句  3.条件跳转语句后面的相邻语句</p>\n<p><strong>综合 2 * 15</strong></p>\n",
      "date_published": "2022-03-03T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "课程笔记"
      ]
    },
    {
      "title": "大数据与知识工程复习",
      "url": "https://blog.yzketx.online/course/bigdata.html",
      "id": "https://blog.yzketx.online/course/bigdata.html",
      "summary": "大数据与知识工程复习 用一两句话讲一下大数据科学是做什么的？ 数据—&gt;规律—&gt;决策 大数据科学领域涉及了很多具体的研究领域。都包括什么？各举一个具体的例子？本门课所关心的具体领域是什么？ 数据采集 数据存储——paxos算法(谁提出的 解决什么问题——分布式系统里的数据存储问题 共识问题) 数据传输 数据可视化 数据并行计算 paxos：Leslie Lamport",
      "content_html": "<h1> 大数据与知识工程复习</h1>\n<ol>\n<li>\n<p>用一两句话讲一下大数据科学是做什么的？</p>\n<p>数据—&gt;规律—&gt;决策</p>\n</li>\n<li>\n<p>大数据科学领域涉及了很多具体的研究领域。都包括什么？各举一个具体的例子？本门课所关心的具体领域是什么？</p>\n<p>数据采集 数据存储——paxos算法(谁提出的 解决什么问题——分布式系统里的数据存储问题 共识问题) 数据传输 数据可视化 数据并行计算</p>\n<p>paxos：Leslie Lamport</p>\n</li>\n<li></li>\n</ol>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "操作系统概论",
      "url": "https://blog.yzketx.online/course/cao-zuo-xi-tong-gai-lun.html",
      "id": "https://blog.yzketx.online/course/cao-zuo-xi-tong-gai-lun.html",
      "summary": "操作系统概论 作业ip：https://10.11.119.115 / http://10.11.119.115:8234 [内网访问] 初始用户及密码均为学号 评分标准： 出勤率+作业+课堂表现 20% 平时测验（每次5%，共8次） 40%",
      "content_html": "<h1> 操作系统概论</h1>\n<blockquote>\n<p>作业ip：https://10.11.119.115 / http://10.11.119.115:8234 [内网访问]</p>\n<ul>\n<li>初始用户及密码均为学号</li>\n</ul>\n<p>评分标准：</p>\n<ul>\n<li>出勤率+作业+课堂表现     20%</li>\n<li>平时测验（每次5%，共8次） 40%</li>\n<li></li>\n</ul>\n</blockquote>\n<h2> IO结构</h2>\n<blockquote>\n<p>CPU、内存与I/O设备间的操作速率相差甚远，因此存在2中I/O结构</p>\n</blockquote>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203011048058.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<h3> 两种I/O结构</h3>\n<ul>\n<li>\n<p>同步I/O：I/O启动后，只有当I/O完成后控制权才返回给用户进程。</p>\n<ul>\n<li>wait指令，使CPU空闲直到下一个中断开始</li>\n<li>循环等待</li>\n<li>在任何时候最多只能处理一个I/O请求</li>\n</ul>\n</li>\n<li>\n<p>异步I/O：I/O启动后，控制权无须等待I/O操作完成就可返回给用户进程。</p>\n<ul>\n<li>系统调用 － 请求OS允许用户等待I/O操作的完成</li>\n<li>设备状态表包含了每个I/O设备的一个条目，用来指示该设备的类型、 地址和状态（不工作、空闲或繁忙）</li>\n<li>OS通过查询I/O设备表来判断设备的状态，并修改该条目，以反映出现中断</li>\n</ul>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203011003197.png\" alt=\"image-20220301100257102\" tabindex=\"0\"><figcaption>image-20220301100257102</figcaption></figure>\n</li>\n</ul>\n<h3> 外部接口的IO操作模式</h3>\n<blockquote>\n<p><code>内存</code>：CPU可以直接访问，不需要通过接口</p>\n<p><code>I/O设备</code>：需要通过被CPU访问</p>\n</blockquote>\n<ul>\n<li>\n<p>程序查询模式</p>\n</li>\n<li>\n<p>中断模式</p>\n</li>\n<li>\n<p>DMA模式</p>\n</li>\n</ul>\n<h4> 中断</h4>\n<blockquote>\n<p>中断发生时，OS必须通过保存寄存器和程序计数器来保留CPU的状态，</p>\n<p>分 轮询、向量中断系统，</p>\n<p>将内核例程与用户例程分离，以决定每种类型的中断应该采取的动作。</p>\n</blockquote>\n<ul>\n<li>\n<p>中断通过中断向量表将控制传输给中断服务例程，中断向量表包括了所有设备服务例程的入口地址</p>\n</li>\n<li>\n<p>中断体系结构必须保存中断指令的地址</p>\n</li>\n<li>\n<p>当一个中断正被处理的时候，其他中断是被禁止的</p>\n</li>\n<li>\n<p>陷阱是因错误或用户程序的特定请求所引起的软件生成中断</p>\n</li>\n<li>\n<p><mark>操作系统是中断驱动的</mark></p>\n</li>\n</ul>\n<h4> DMA模式</h4>\n<ul>\n<li>用于高速I/O设备，使之以接近内存的速度进行信息传输</li>\n<li>设备传输器以块为单位直接将数据从存储器传输到主存，而无须CPU的干预</li>\n<li>每个数据块传输的时候只产生一个中断，而不是一个字节的传输就 会产生一个中断</li>\n</ul>\n<h2> 硬件保护</h2>\n<h3> 双重模式操作</h3>\n<p>操作系统分用户模式和内核模式；</p>\n<p>特权指令只能在内核[核心]模式下执行，非特权指令随意；</p>\n<p>特权指令，如关机，在用户模式下无法执行；所有I/O指令均为特权指令；</p>\n<p>特权指令的主要特征在于是否影响其它用户。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203011130496.png\" alt=\"image-20220301113037767\" tabindex=\"0\"><figcaption>image-20220301113037767</figcaption></figure>\n<p>用户态切换内核态通过 <code>trap</code> 实现：</p>\n<p><strong>访管指令或陷阱指令（trap）</strong>：</p>\n<ul>\n<li>CPU指令集中的一个特殊指令，只能在用户模式下执行，负责从用户模式切换到内核模式</li>\n<li>当应用程序需要请求操作系统服务时，编译器会在发生系统调用时自动插入一条访管指令，CPU执行访管指令将产生一个访管中断(trap，自陷），然后启动相应的操作系统服务</li>\n</ul>\n<h4> 硬中断、陷阱与软中断</h4>\n<blockquote>\n<p>中断即外中断，是指来自处理机和内存外部的中断，包括I/O设备发出的I/O中断、外部信号中断、各种定时器引起的时钟中断及调试程序中设置的断点等引起的调试中断等。陷阱即内中断，主要是指在处理机和内存内部产生的中断。它包括程序运算引起的各种错误。软中断是通信进程之间用来模拟硬中断的一种信号通信方式。</p>\n</blockquote>\n<p>==!==陷入与硬件中断的不同：</p>\n<p>​\t① 陷阱通常由处理机正在执行的现行指令引起，而中断则是由与现行指令无关的中断源引起的。</p>\n<p>​\t② 陷阱处理程序提供的服务为当前进程所用，而中断处理程序提供的服务则不是为了当前进程的。</p>\n<p>​\t③ CPU在执行完一条指令之后，下一条指令开始之前响应中断，而在一条指令执行中也可以响应陷阱。</p>\n<p>​\t④ 在有的系统中，陷入处理程序被规定在各自的进程上下文中执行，而中断处理程序则在系统上下文中执行。</p>\n<p>==!==软中断与硬中断的比较的相同点：</p>\n<p>​\t中断源发中断请求或软中断信号后，CPU或接收进程在适当的时机自动进行中断处理或完成软中断信号所对应的功能。</p>\n<p>==!==软中断与硬中断的不同点：</p>\n<p>​\t接收软中断信号的进程不一定正好在接收时占有处理机，而相应的处理必须等到该接收进程得到处理机之后才能进行。</p>\n<h3> I/O保护</h3>\n<p>必须确保用户程序永远无法以monitor模式 获得计算机的控制权</p>\n<h3> 内存保护</h3>\n<h3> CPU保护</h3>\n<p>分时系统</p>\n<ul>\n<li>同时性</li>\n<li>交互性</li>\n<li>共享性</li>\n<li>独占性</li>\n</ul>\n<p>实时系统</p>\n<ul>\n<li>对时钟管理高要求</li>\n<li>可靠性</li>\n<li>过载保护</li>\n<li>【嵌入式系统是常见的应用；一定程度上也现在了其高并发的能力】</li>\n</ul>\n<h2> 操作系统服务</h2>\n<p>API</p>\n<h3> exce 函数族</h3>\n<blockquote>\n<p>exec函数族提供了一个在进程中启动另一个程序执行的方法。它可以根据指定的文件名或目录名找到可执行文件，并用它来取代原调用进程的数据段、代码段和堆栈段，在执行完之后，原调用进程的内容除了进程号外，其他全部被新的进程替换了。另外，这里的可执行文件既可以是二进制文件，也可以是Linux下任何可执行的脚本文件。</p>\n</blockquote>\n<p>使用exec函数族主要有两种情况：</p>\n<ul>\n<li>当进程认为自己不能再为系统和用户做出任何贡献时，就可以调用exec函数族中的任意一个函数让自己重生。</li>\n<li>如果一个进程想执行另一个程序，那么它就可以调用fork函数新建一个进程，然后调用exec函数族中的任意一个函数，这样看起来就像通过执行应用程序而产生了一个新进程(这种情况非常普遍)。</li>\n</ul>\n<p>exec函数族共有6种不同形式的函数。这6个函数可以划分为两组：</p>\n<ol>\n<li>execl、execle、execlp</li>\n<li>execv、execve、execvp</li>\n</ol>\n<p>用例</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p><strong>exec函数族一般规律</strong></p>\n<p>exec函数一旦调用成功即执行新的程序，不返回。只有失败才返回，错误值为 -1。所以我们通常直接在 exec 函数调用后直接调用 perror() 和 exit()，无须 if 判断【exec函数族后缀】</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h3> wait()函数</h3>\n<p><mark>pid_t wait(int *stat_loc);</mark></p>\n<blockquote>\n<p>获取子进程退出状态并返回死掉的子进程ID。传整型变量地址 <code>stat_loc</code> 给函数，内核将子进程的退出状态保存在这个变量中，并返回子进程 pid。</p>\n<p>调用会阻止调用进程，直到它的一个子进程退出或收到信号为止。子进程终止后，父进程在wait系统调用指令后继续执行。</p>\n</blockquote>\n<p>父进程调用wait函数可以回收子进程终止信息。该函数有三个功能：</p>\n<ul>\n<li>阻塞等待子进程退出</li>\n<li>回收子进程残留资源</li>\n<li>获取子进程结束状态（退出原因）</li>\n</ul>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204121803114.png\" alt=\"wait()\" tabindex=\"0\"><figcaption>wait()</figcaption></figure>\n<h3> getpid()函数</h3>\n<blockquote>\n<p>获取当前进程 PID</p>\n</blockquote>\n<h3> getppid()函数</h3>\n<blockquote>\n<p>获取当前进程 PPID</p>\n</blockquote>\n<h2> 进程</h2>\n<blockquote>\n<p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是<strong>系统进行资源分配和调度的基本单位</strong>，是操作系统结构的基础。</p>\n<p>线程（Thread）是<strong>操作系统能够进行运算调度的最小单位</strong>。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n</blockquote>\n<p>CPU调度的基本单位是是线程。</p>\n<p>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n<h3> PCB 进程控制块</h3>\n<p>每个进程在内核中都有一个进程控制块(PCB)来维护进程相关的信息。其作用是使一个在多道程序环境下不能独立运行的程序成为一个能独立运行的基本单位或其他进程并发执行的进程。PCB是系统感知进程存在的唯一标识。</p>\n<h3> 进程调度</h3>\n<blockquote>\n<p>高级调度 (外存 --&gt; 内存)：作业调度</p>\n<p>中级调度 (外存 --&gt; 内存)：内存调度</p>\n<p>低级调度 (内存 --&gt; CPU)：进程调度</p>\n</blockquote>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291635116.png\" alt=\"进程调度\" tabindex=\"0\"><figcaption>进程调度</figcaption></figure>\n<ul>\n<li><strong>作业调度</strong>：作业调度一般是将一个作业从外存调入内存，为其分配内存、外设等资源，使其能够竞争处理机资源。对每个作业来说，每个作业一般只调入一次、调出一次。</li>\n<li><strong>内存调度</strong>：内存调度是为了<strong>提高内存利用率</strong>和<strong>系统吞吐量</strong>，一般会将暂时无法运行的进程挂起，当具备运行条件且内存有空闲时，会将这些进程调回，挂在就绪队列上等待调度。</li>\n<li><strong>进程调度</strong>：最频繁的调度方式，一般从就绪队列中调出一个进程，为它分配处理机资源。</li>\n</ul>\n<p><strong>简单例子：</strong></p>\n<ul>\n<li><strong>高级调度：研究怎么让还没进入过厕所的人进入厕所。(厕所外 --&gt; 厕所内，之前一直在厕所外)</strong></li>\n<li><strong>中级调度：有的人进入了厕所，但是尿不出来，于是他们被赶了出去。中级调度就是研究怎么让这些被赶出去的人再次回到厕所。 (厕所外 --&gt;\n厕所内，之前进入过厕所)</strong></li>\n<li><strong>低级调度：研究怎么给厕所内的人分配马桶。(厕所内 --&gt; 马桶上)</strong></li>\n</ul>\n<h3> <strong>进程调度方式</strong></h3>\n<ul>\n<li><strong>非剥夺调度方式</strong>：当一个进程处于运行状态时，即使有更紧急或优先级更高的进程进入就绪队列，也不会抢占正在运行进程的处理机资源，只有当前运行进程结束运行或进入阻塞状态时才会从就绪队列将更紧迫的进程调出并分配处理机资源。</li>\n<li><strong>剥夺调度方式</strong>：当有一个更紧急或优先级更高的进程需要使用处理机，当前进程会被暂停，执行更紧迫进程的调度方式。</li>\n</ul>\n<h3> 进程的挂起态与七状态模型</h3>\n<blockquote>\n<p>暂时调到外存等待的进程状态为挂起态。挂起态其实又可以进一步细分为就绪挂起、阻塞挂起两种状态，于是，五状态模型现在变成了七状态模型。</p>\n</blockquote>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291637189.png\" alt=\"进程的挂起态与七状态模型\" tabindex=\"0\"><figcaption>进程的挂起态与七状态模型</figcaption></figure>\n<h2> <strong>调度基本准则</strong></h2>\n<ul>\n<li>CPU利用率：当CPU一直处于忙碌状态时，CPU利用率最高。</li>\n<li>系统吞吐量：表示单位时间内完成的作业数量，当作业都是短作业时，系统吞吐量会比较大。</li>\n<li><mark>周转时间</mark>：是作业从提交到完成的时间，包括作业等待、在就绪队列排队、运行、IO操作的时间总和。</li>\n<li>平均周转时间：是多个作业的周转时间的平均值。</li>\n<li>带权周转时间：<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291649226.png\" alt=\"image-20220429164957168\"></li>\n<li>平均带权周转时间：是多个带权周转时间的平均值。</li>\n<li><mark>等待时间</mark>：进程等待处理机的时间之和。</li>\n<li><mark>响应时间</mark>：从用户提交到首次响应所花费的时间。</li>\n</ul>\n<h2> <strong>调度算法</strong></h2>\n<h3> <strong>先来先服务（FCFS）调度算法</strong></h3>\n<p>从名字就可以知道这是一种“先来后到”的调度算法，这种调度算法支持作业调度和进程调度。FCFS调度算法每次挑选队列中最先到达的进程或作业，依次进行调度。 这是一种<strong>非剥夺调度算法</strong>，直观来看，非常公平，但是还是有缺点的。</p>\n<p>特点：算法简单，但效率低，对长作业有利，短作业可能要等待很长时间。有利于CPU密集型作业，不利于IO密集型作业。</p>\n<h3> <strong>短作业/进程优先（SJF/SPF）调度算法</strong></h3>\n<p>短作业/进程优先算法是一种优先调度短作业（进程）的调度算法，同样也是一种<strong>非剥夺调度算法</strong>。</p>\n<p>特点：对短作业有利，对长作业不利，如果一直有短作业进来，可能长作业会一直得不到执行。不考虑作业紧迫程度，有些紧迫的作业可能不能及时处理。有利于IO密集型作业，不利于CPU密集型作业【可能是短作业会造成频繁的上下文切换】。</p>\n<h3> <strong>优先级调度算法</strong></h3>\n<p>优先级调度算法既可以用于作业调度也可以用于进程调度。当用于作业调度时，会从后备作业队列中选出一个或多个优先级最高的作业，将它们调入内存中，并分配相应资源；当用于进程调度时，会从就绪队列中选出优先级最高的进程，将处理机分配给这个进程，使它能够运行。</p>\n<p>根据高优先级进程能否抢占处理机还可以将这种算法分为非剥夺式优先级调度算法和剥夺式优先级调度算法。</p>\n<p>在进程创建后进程优先级能否改变又可以将进程优先级分为静态优先级和动态优先级。</p>\n<ul>\n<li>静态优先级。静态优先级是进程在创建时就已经确定好的，在进程运行期间不能改变。</li>\n<li>动态优先级。动态优先级是指进程运行期间优先级根据进程实际运行情况动态变化的。</li>\n</ul>\n<h3> <strong>高响应比优先调度算法</strong></h3>\n<p>高响应比优先调度算法适用于作业调度，是短作业优先调度算法和先来先服务算法的折中。我们先来看一下什么是响应比吧。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291649189.png\" alt=\"image-20220429164932130\" tabindex=\"0\"><figcaption>image-20220429164932130</figcaption></figure>\n<p>高响应比优先调度算法具有以下特点：</p>\n<ul>\n<li>短作业的要求服务时间很短，因此在相同等待时间的情况下，短作业的响应比也更高，会被优先执行。</li>\n<li>当要求服务时间相同时，等待时间长的作业会被优先服务。</li>\n<li>长作业的要求服务时间比较长，但是随着等待时间的增加，长作业的响应比也会增加，然后可以分配处理机。</li>\n</ul>\n<h3> <strong>时间片轮转调度算法</strong></h3>\n<p>时间片轮转调度算法一般在分时系统上使用，每个进程被分配固定大小的时间片，当时间片用完以后，无论进程是否执行结束，处理机都将被剥夺给下一个进程。</p>\n<p>特点：时间片轮转调度算法的时间片大小选择很讲究，如果时间片过大，该调度算法会退化成为先来先服务调度算法，而时间片设置过小，处理机会频繁切换，进程真正使用处理机的时间减少，系统吞吐量下降。</p>\n<h3> <strong>多级反馈队列调度算法</strong></h3>\n<p>多级反馈队列调度算法是这些调度算法中最复杂的，也是整合了前面一些调度算法而形成的算法，我们来看一下它的工作过程。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204291646633.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>多级反馈队列调度算法工作过程有以下这些特点：</p>\n<ul>\n<li>每一级队列从上至下的优先级逐渐递减，优先级越高的队列时间片越小。也就是说，最顶层的队列的时间片最小。</li>\n<li>最新的进程进入内存会被放入最上层的队列末尾，当执行到这个进程时，如果能在分配的时间片内完成则会出队列，如果不能在时间片内完成就进入下一级队列末尾，等待处理机资源。</li>\n<li>如果高优先级队列有进程存在，则处理机会优先处理上级队列中的进程。如果处理机正在执行某一队列中的进程，此时更高优先级队列中有进程进入，那么当前正在执行的进程会回到当前队列的队尾，处理机执行新进入队列的进程。</li>\n</ul>\n<p>最后要提一点，多级反馈队列调度算法兼顾短作业优先的同时，不会让长作业长期处于等待状态最终出现饥饿。</p>\n<h3> 进程通讯</h3>\n<h4> 信号</h4>\n<blockquote>\n<p>相关函数 signal()，<a href=\"https://baike.baidu.com/item/sigprocmask()\" target=\"_blank\" rel=\"noopener noreferrer\">sigprocmask()</a>，<a href=\"https://baike.baidu.com/item/sigpending\" target=\"_blank\" rel=\"noopener noreferrer\">sigpending()</a>，<a href=\"https://baike.baidu.com/item/sigsuspend\" target=\"_blank\" rel=\"noopener noreferrer\">sigsuspend()</a>,  <a href=\"https://baike.baidu.com/item/sigemptyset()\" target=\"_blank\" rel=\"noopener noreferrer\">sigemptyset</a></p>\n</blockquote>\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 循环中的fork()</h3>\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203221059205.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>解答：有8个’-’是因为printf(“-”);语句有buffer；在fork的时候，缓存被复制到了子进程空间，所以，就多了两个。下图阴影双边框的两个子进程复制了父进程缓冲区的‘-‘</p>\n<ol>\n<li>当i=0时，fork()创建了一个子进程，printf函数还没有执行，因此缓冲区中没有数据，父子进程打印了<code>-</code></li>\n<li>当i=1时，父进程又fork了一个子进程，但是此时父进程中的缓冲区中有数据，因此会复制缓冲区给子进程；同时子进程又执行了一次printf函数，因此子进程打印了两个<code>-</code>；同理由i=0创建的子进程也是如此\n主要原因：进程在fork时，缓冲区会被复制给子进程，且缓冲区非空。</li>\n</ol>\n<p>若改为以下代码，则输出6个’-’。</p>\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>因为程序遇到“\\n”，或是EOF，或是缓冲区满，或是文件描述符关闭，或是主动flush，或是程序退出，就会<strong>把数据刷出缓冲区</strong>。需要注意的是，标准输出是行缓冲，所以遇到“\\n”的时候会刷出缓冲区，但对于磁盘这个块设备来说，“\\n”并不会引起缓冲区刷出的动作，那是全缓冲，你可以使用setvbuf来设置缓冲区大小，或是用fflush刷缓存。</p>\n<p>拓展：Unix下的设备有“<a href=\"http://en.wikipedia.org/wiki/Device_file#Block_devices\" target=\"_blank\" rel=\"noopener noreferrer\">块设备</a>”和“<a href=\"http://en.wikipedia.org/wiki/Device_file#Character_devices\" target=\"_blank\" rel=\"noopener noreferrer\">字符设备</a>”的概念，所谓块设备，就是以一块一块的数据存取的设备，字符设备是一次存取一个字符的设备。磁盘、内存都是块设备，字符设备如键盘和串口。<strong>块设备一般都有缓存，而字符设备一般都没有缓存</strong>。</p>\n<h2> 线程</h2>\n<h3> 创建线程</h3>\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> CPU调度</h2>\n<blockquote>\n<p>响应时间（Response time） : （第一次响应 - 到达时间）</p>\n<p>周转时间（turnarouad time）: (结束时刻 - 到达时间)</p>\n<p>等待时间（Waiting time）:（周转时间 - 运行时间）</p>\n</blockquote>\n<h3> CPU调度程序</h3>\n<p><code>CPU调度决策</code>可以如下四种情况下发生：</p>\n<ol>\n<li>当一个进程从运行状态切换到等待状态</li>\n<li>当一个进程从运行状态切换到就绪状态</li>\n<li>当一个进程从等待状态切换到就绪状</li>\n<li>当一个进程终止时。</li>\n</ol>\n<blockquote>\n<p>当调度只能发生在第一和第四两种情况时，称调度方法是非抢占的（ non-preemptive）</p>\n<p>否则调度方案就是可抢占（preemptive）的。</p>\n</blockquote>\n<h3> 调度准则</h3>\n<ol>\n<li><code>CPU使用率</code>：使CPU尽可能忙</li>\n<li><code>吞吐量（Throughput）</code>：单位时间完成进程的数量</li>\n<li><code>周转时间（Turnaround time）</code>：从进程提交到进程完成的时间间隔 称为周转时间</li>\n<li><code>等待时间（Waiting time）</code>：是在就绪队列中等待所花时间之和。</li>\n<li><code>响应时间（Response time）</code>：从提交请求到产生第一响应的时间</li>\n<li><code>区间时间</code>：程序完成所需耗时</li>\n<li><code>剩余时间</code>：程序结束还需耗时</li>\n</ol>\n<h3> 优化准则</h3>\n<ol>\n<li>最大化CPU使用率</li>\n<li>最大化吞吐量</li>\n<li>最小化周转时间</li>\n<li>最小化等待时间</li>\n<li>最小化响应时间</li>\n</ol>\n<h3> 调度算法</h3>\n<ol>\n<li>先到先服务调度（First Come, First Served, FCFS）</li>\n<li>最短作业优先调度（Shortest-Job-First, SJR）</li>\n<li>优先权调度（Priority Scheduling）</li>\n<li>轮转法调度（Round Robin, RR）</li>\n<li>多级队列调度（multilevel queue-scheduling）</li>\n<li>多级反馈队列调度（multilevel feedback queue scheduling）</li>\n</ol>\n<h4> 先到先服务（FCFS）</h4>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203291059593.png\" alt=\"image-20220329105948330\" tabindex=\"0\"><figcaption>image-20220329105948330</figcaption></figure>\n<h4> 最短作业优先调度（SJF）</h4>\n<blockquote>\n<p>将每个进程与其下一个CPU区间段相关联。当CPU为可用时，它会 赋给具有最短后续CPU区间的进程。如果两个进程具有同样长度的 CPU区间，那么可以使用FCFS调度来处理。</p>\n</blockquote>\n<p>两种方式：</p>\n<ul>\n<li>非抢占式：一旦进程获得CPU就一直占据CPU，直到其CPU区 间完成为止</li>\n<li>抢占式：如果一个新来的进程其CPU区间小于当前进程的CPU 区间，则抢占之。这种调度方式称为最短剩余时间作业优先（ Shortest Remaining Time First, SRTF）</li>\n</ul>\n<p>SJF是最佳的：对于给定的一组进程，SJF算法的平均等待时间最小。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203291103230.png\" alt=\"image-20220329110347946\" tabindex=\"0\"><figcaption>image-20220329110347946</figcaption></figure>\n<blockquote>\n<p>⬆️注意Arrival Time，只有进程在当前时间 arrival 后，才会加入比较</p>\n</blockquote>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203291106098.png\" alt=\"image-20220329110625877\" tabindex=\"0\"><figcaption>image-20220329110625877</figcaption></figure>\n<h4> 时间片轮转（RR）</h4>\n<blockquote>\n<p>轮转法是专门为分时系统而设计的。每个进程获得一小片CPU时间量（time quantum） ，通常为10-100毫秒。时间片结束后，进程被抢占并放入到就绪队列的最后重新参加调 度。</p>\n</blockquote>\n<p>如果就绪队列中有n个进程，具时间片为q，则每个进程会得到1/n的CPU时间，每个长 度不超过q时间单元。每个进程必须等待CPU的时间不会超过(n-1)q个时间单元，直到它 的下一个时间片为止。</p>\n<p>性能低速于时间片的大小</p>\n<ul>\n<li>如果时间片非常大（无限），那么RR策略与FCFS策略一样。</li>\n<li>如果时间片很小，那么RR方法称处理器共享。n个进程对于用户来说都有它 自己的处理器，速度各为真正处理器速度的1/n</li>\n</ul>\n<p><mark>q必须大于上下文切换所需时间</mark></p>\n<h4> 多级反馈优先队列（）</h4>\n<blockquote>\n<p>进程可以在不同队列间移动。</p>\n<p>每个队列有自己的调度算法——前台：RR   后台：FCFS</p>\n</blockquote>\n<p>通常，多级反馈队列调度程序可由下列参数来定义：</p>\n<ul>\n<li>队列数量</li>\n<li>每个队列的调度算法</li>\n<li>用以确定进程何时升级到较高优先权队列的方法</li>\n<li>用以确定进程何时降级到较低优先权队列的方法</li>\n<li>用以确定进程在需要服务时应进入哪个队列的方法</li>\n</ul>\n<p>队列之间必须有调度</p>\n<ul>\n<li>通常采用固定优先权可抢占调度来实现。</li>\n<li>另一种 可能是在队列之间划分时间片。每个队列都有一定的CPU时间， 这可用于调度队列内的不同进程\n<ul>\n<li>20％给后台，80％给前台</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204121007266.png\" alt=\"image-20220412100702097\" style=\"zoom:50%;\">\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204121008967.png\" alt=\"image-20220412100834856\" style=\"zoom:50%;\">\n<h2> 进程同步</h2>\n<h3> 临界区设计准则</h3>\n<blockquote>\n<p>临界区：并发进程中可能改变共同变量、更新同一个表、写同一个 文件的代码段。</p>\n<p>进入区（上锁）、临界区、退出区（开锁）、剩余区</p>\n</blockquote>\n<p>解决临界区问题必须满足如下三项要求：</p>\n<ol>\n<li>互斥 （Mutual Exclusion） ：进程Pi在临界区内执行，其他进程不 得进入临界区</li>\n<li>前进/进步（Progress） ：如果没有进程在临界区执行，那么允许不在 剩余区的进程计入临界区</li>\n<li>有限等待（Bounded Waiting）：从一个进程作出进入临界区的请 求，直到该请求被允许为止，其他进程允许进入其临界区的次数有 上限</li>\n</ol>\n<p><mark>忙则让权，空则进步，有限等待</mark></p>\n<h3> 算法实现</h3>\n<ul>\n<li>\n<p>算法一</p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204121103028.png\" alt=\"image-20220412110334283\" style=\"zoom:50%;\">\n</li>\n</ul>\n<blockquote>\n<p>该算法无法实现互斥，在<code>while (flag); flag = true</code>处，进程仍可能冲突</p>\n</blockquote>\n<ul>\n<li>算法二</li>\n<li>算法三</li>\n</ul>\n<h4> TestAndSet 实现wait()和signal()</h4>\n<h4> Swap() 实现互斥操作</h4>\n<h3> 进程饥饿</h3>\n<blockquote>\n<p>进程饥饿，即为Starvation，指当等待时间给进程推进和响应带来明显影响称为进程饥饿。当饥饿到一定程度的进程在等待到即使完成也无实际意义的时候称为饥饿死亡。也即：</p>\n<p><code>由于别的并发的激活的进程持久占有所需资源,使某个异步进程在可预测的时间内不能被激活。</code></p>\n</blockquote>\n<h2> 死锁</h2>\n<h3> 类型</h3>\n<ul>\n<li>竞争资源引起的死锁</li>\n<li>进程通信引起的死锁</li>\n<li>其他原因引起的死锁</li>\n</ul>\n<h3> 死锁的条件</h3>\n<p>资源独占：一个资源在同一时间只能分给一个进程</p>\n<p>不可剥夺：资源只能由其占有者在使用完后资源释放</p>\n<p>保持申请：进程在占有部分资源后还可以申请新的资源，而且在申请新资源的时候并不释放它已经占有的资源</p>\n<p>循环等待：存在一个循环等待链</p>\n<h3> 处理</h3>\n<p>（静态）死锁预防：通过破坏死锁产生的必要条件实现，对进程有关资源的活动加限制，所有进程遵循这种限制，即可保证没有死锁发生。预防分配策略、有序分配策略</p>\n<p>（动态）死锁避免：在进程运行之前，为其分配所需的全部资源（预先分配策略）</p>\n<h3> 饿死与活锁</h3>\n<p>饿死：当饥饿到一定程度的进程所赋予的任务即使完成也不再具有实际意义时，称该 进程被饿死</p>\n<p>活锁：在忙式等待条件下发生的饥饿</p>\n<h2> 内存管理</h2>\n<h3> 单一连续静态分区管理</h3>\n<h3> 动态分区方案</h3>\n<p>根据一组空闲孔来分配大小为n的请求。</p>\n<ul>\n<li>首次适应（First-fit）</li>\n<li>最佳适应（Best-fit）</li>\n<li>最差适应（Worst-fit）</li>\n</ul>\n<p>First-fit和best-fit在分配速度及存储效率上优于Worst-fit</p>\n<p>而该方案虽然提高了空间利用，却导致了外部碎片</p>\n<h4> 碎片</h4>\n<ul>\n<li>外部碎片：指内存中因为总剩余空间足够，而孔分散过小而无法利用的情况</li>\n<li>内部碎片：指后续进行的分区管理中，由于需求内存小于统一分区管理的区大小，为了避免额外开销而分配整个分区的情况</li>\n<li>紧缩（compaction）：用来降低外部碎片\n<ul>\n<li>移动内存内容，以便所有空闲空间合并成一整块。</li>\n<li>如果<code>重定位是动态</code>的，是在运行时进行的，那么就能采用紧缩</li>\n</ul>\n</li>\n<li>另外一种可能解决外部碎片问题的方法是允许物理地址空间为非连续，这样只要有物理内存就可为进程分配。【即实现多重分区管理】\n<ul>\n<li>分页</li>\n<li>分段</li>\n</ul>\n</li>\n</ul>\n<h3> 分区管理</h3>\n<ul>\n<li>解决外部碎片</li>\n<li></li>\n</ul>\n<h3> 地址转换</h3>\n<h4> 页式分区</h4>\n<p>内存空间划分：内存空间静态地划分为若干个等长区域，每个区域称为一个物理页 架，每个页架通常由2i个单元，从0开始一次编址，称为页内地址。</p>\n<p>进程空间划分：内存空间静态地划分为若干个等长区域，每个区域称为一个逻辑页 面，每个页架通常由2i个单元，从0开始一次编址，称为页内地址。</p>\n<p>所需表目：</p>\n<ul>\n<li>\n<p>页表：用于记录进程的逻辑页面和内存页架之间的对应关系</p>\n</li>\n<li>\n<p>总页表：用于记录页架的使用情况</p>\n</li>\n</ul>\n<p>CPU生成的地址分成以下两部分【在CPU内部存在首址寄存器和界限寄存器】</p>\n<ul>\n<li>页号(p)：页号作为页表中的索引。页表中包 含每页所在物理内存的基地址。</li>\n<li>页偏移(d)：与页的基地址组合就形成了物理 地址，就可送交物理单元。</li>\n</ul>\n<blockquote>\n<p>在这种方式下，每次数据/指令的访问需要访问两次内存。一次访问 页表，另一次访问数据/指令</p>\n<p>两次内存访问问题可以用特别的快速查找硬件缓冲（称为关联内存 或翻译后备缓冲器）来解决</p>\n</blockquote>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202205071034961.png\" alt=\"image-20220507103426801\" tabindex=\"0\"><figcaption>image-20220507103426801</figcaption></figure>\n<p>地址映射：物理地址=页架首址+页内地址=页架号*2i + 页内地址</p>\n<div class=\"language-伪代码 line-numbers-mode\" data-ext=\"伪代码\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>页表实现</strong></p>\n<p>几个进程几个页表，一般连续放置</p>\n<h4> 段式分区</h4>\n<p>内存空间划分：内存空间静态地划分为若干个长度各异区域，每个区域称为一个物 理段，每个物理段在内存中有一个起始地址，称为段首址。将物 理段中的所有单元由0开始依次编址，称为段内地址。</p>\n<p>进程空间划分：内存空间静态地划分为若干个长度各异区域，每个区域称为一个逻 辑段。将一个逻辑段中的所有单元由0开始依次编址，称为段内地址。 将一个进程的所有逻辑地址由0开始依次编号，称为段号\n所需表目：</p>\n<ul>\n<li>\n<p>段表：该表用于记录段号与段首址之间的关系</p>\n</li>\n<li>\n<p>空闲表：用于记录并管理内存中的空闲区域</p>\n<p>地址映射：逻辑地址(s,d) -&gt; 物理地址(b’+d)</p>\n</li>\n</ul>\n<div class=\"language-伪代码 line-numbers-mode\" data-ext=\"伪代码\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p><strong>问：分段与分页对比？</strong></p>\n<p>1)<strong>页是信息的物理单位，分页是为实现离散分配方式，<strong>以消减内存的外零头，提高内存的利用率；或者说，<strong>分页仅仅是由于系统管理的需要</strong>，而不是用户的需要（也是</strong>对用户透明</strong>的）。<strong>段是信息的逻辑单位，它含有一组其意义相对完整的信息</strong>（比如数据段、代码段和堆栈段等）。<strong>分段的目的是为了能更好的满足用户的需要</strong>（用户也是可以使用的）。</p>\n<p>2)<strong>页的大小固定且由系统确定</strong>，把逻辑地址划分为页号和页内地址两部分，是由机器硬件实现的，因而一个系统只能有一种大小的页面。<strong>段的长度却不固定，决定于用户所编写的程序</strong>，通常由编辑程序在对源程序进行编辑时，根据信息的性质来划分。</p>\n<p>3)分页的作业地址空间是维一的，即单一的线性空间，程序员只须利用一个记忆符（线性地址的16进制表示），即可表示一地址。分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名（比如数据段、代码段和<a href=\"https://so.csdn.net/so/search?q=%E5%A0%86%E6%A0%88&amp;spm=1001.2101.3001.7020\" target=\"_blank\" rel=\"noopener noreferrer\">堆栈</a>段等），又需给出段内地址。</p>\n<p>4)页和段都有存储保护机制。但存取权限不同：段有读、写和执行三种权限；而页只有读和写两种权限</p>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>分页是为了提高内存利用率，将内存分为一个个页架，将进程按照页架大小分为一个个页，分页对用户不可见。</li>\n<li>分段则是按照程序的自身逻辑分配到内存中，对用户可见，用户编程时需要显示给出段名。</li>\n<li>并且分段比分页更容易实现信息的共享，因为页的大小是由页架决定，一个页中可能包含多个逻辑模块，令多个逻辑模块共享同一块内存显然是不合理的。</li>\n</ul>\n<hr>\n<p><strong>问：简述分页的优点，存在的问题以及解决方法？</strong></p>\n<p>优点：内存空间利用率高，不会产生外部碎片，只会产生少量的页内碎片。</p>\n<p>缺点：不方便按照逻辑模块实现信息的共享和保护；同时，页表也可能占据一部分物理空间；一旦页缺失，将大大提高查询时间。</p>\n<p>解决：可以使用分段【使页内数据可通过逻辑模块实现信息联系】、多级页表【节省内存、可离散存储页表等】等方式；或者MMU添加TLB提高查询效率，使用巨型页，减低缺页异常。</p>\n<hr>\n<h3> 虚拟地址</h3>\n<p><a href=\"https://blog.csdn.net/u014426028/article/details/120826515\" target=\"_blank\" rel=\"noopener noreferrer\">内存管理</a></p>\n<blockquote>\n<p>TLB[ Translation Lookaside Buffers]: <strong>转译后备缓冲器</strong>，也被翻译为<strong>页表缓存</strong>、<strong>转址旁路缓存</strong>，为<a href=\"https://baike.baidu.com/item/CPU\" target=\"_blank\" rel=\"noopener noreferrer\">CPU</a>的一种缓存，由存储器管理单元用于改进<a href=\"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80\" target=\"_blank\" rel=\"noopener noreferrer\">虚拟地址</a>到物理地址的转译速度。</p>\n<p>MMU[Memory Management Unit]: <a href=\"https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\" target=\"_blank\" rel=\"noopener noreferrer\">内存管理</a>单元，有时称作<strong>分页内存管理单元</strong>（<strong>paged memory management unit</strong>，<strong>PMMU</strong>）。一种负责处理<a href=\"https://baike.baidu.com/item/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8\" target=\"_blank\" rel=\"noopener noreferrer\">中央处理器</a>（CPU）的<a href=\"https://baike.baidu.com/item/%E5%86%85%E5%AD%98\" target=\"_blank\" rel=\"noopener noreferrer\">内存</a>访问请求的<a href=\"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6\" target=\"_blank\" rel=\"noopener noreferrer\">计算机硬件</a>。它的功能包括<a href=\"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80\" target=\"_blank\" rel=\"noopener noreferrer\">虚拟地址</a>到<a href=\"https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80\" target=\"_blank\" rel=\"noopener noreferrer\">物理地址</a>的转换（即<a href=\"https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98\" target=\"_blank\" rel=\"noopener noreferrer\">虚拟内存</a>管理）、内存保护、中央处理器<a href=\"https://baike.baidu.com/item/%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98\" target=\"_blank\" rel=\"noopener noreferrer\">高速缓存</a>的控制，在较为简单的计算机体系结构中，负责<a href=\"https://baike.baidu.com/item/%E6%80%BB%E7%BA%BF\" target=\"_blank\" rel=\"noopener noreferrer\">总线</a>的<a href=\"https://baike.baidu.com/item/%E4%BB%B2%E8%A3%81\" target=\"_blank\" rel=\"noopener noreferrer\">仲裁</a>以及存储体切换（bank switching，尤其是在8位的系统上）。</p>\n</blockquote>\n<p>虚拟地址：页号+页内偏移</p>\n<p>物理地址：块号+页内偏移</p>\n<p><strong>一级页表转换过程</strong></p>\n<p>虚拟地址 -&gt; 物理地址：MMU截取 <code>页号</code>，根据 <code>页号</code> 在页表地址查询到 <code>块号</code>，</p>\n<ul>\n<li>若命中，返回块号</li>\n<li>若未命中，将数据从外部磁盘读入内存，并返回块号</li>\n</ul>\n<p>拼接 <code>块号</code> 和 <code>页内偏移</code>，得到物理地址</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202205071034961.png\" alt=\"image-20220514171937364\" tabindex=\"0\"><figcaption>image-20220514171937364</figcaption></figure>\n<p><strong>加入TLB</strong></p>\n<ol>\n<li>MMU截取页号，根据页号在TLB中查询：</li>\n</ol>\n<ul>\n<li>\n<p>若TLB命中页，返回物理地址块号</p>\n</li>\n<li>\n<p>若TLB未命中，查询页表</p>\n<ul>\n<li>若页表命中，返回物理地址块号</li>\n<li>若页表未命中，查询外部磁盘，将数据写入内存，并返回物理地址块号</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>拼接块号和页内偏移，得到物理地址</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/TLB\" alt=\"在这里插入图片描述\" tabindex=\"0\"><figcaption>在这里插入图片描述</figcaption></figure>\n<h4> 硬件</h4>\n<blockquote>\n<p>遍历页表，将虚拟地址转换为物理地址，页面权限管理等</p>\n</blockquote>\n<ul>\n<li>\n<p>MMU：查询TLB或者遍历页表</p>\n</li>\n<li>\n<p>TLB：缓存最近转换的页表条目</p>\n</li>\n<li>\n<p>页表基地址寄存器：存放页表基地址（物理地址）【对于多级页表：^作为MMU遍历多级页表的起点】</p>\n</li>\n</ul>\n<h4> 软件</h4>\n<blockquote>\n<p>不管虚拟内存如何转换为物理内存，对应用来说透明</p>\n</blockquote>\n<ul>\n<li>应用程序：访问虚拟内存即可如执行指令、读写内存, 没有权限管理页表</li>\n<li>Linux内核：填写页表，将页表基地址告诉MMU；内核初始化建立内核页表，实现缺页异常等机制为用户任务按需分配并映射页表</li>\n</ul>\n<h4> 页表</h4>\n<blockquote>\n<p>页表属于内核空间，存放在内存上，其中存放的均为物理地址，为物理地址的 <code>块号</code></p>\n</blockquote>\n<p>Linux内核，使用的是多级页表，即存在多次转换，这增加了空间分配的灵活性，但也增加查询的复杂度，典型的时间换空间【换的是内存空间，不是存储空间】</p>\n<hr>\n<p><strong>问：为什么逻辑内存地址空间往往比物理内存地址空间大？</strong></p>\n<p>有MMU这个东西，可以分配虚拟地址(题中逻辑地址，下同)，再加上内核的支持，可以提升物理内存的利用率。</p>\n<p>讲一下Linux Kernel的处理，当运行一个程序时，内核并不会把整个程序完全加载到物理内存中，而是分配好虚拟地址，加载可执行文件的部分到物理内存，只分配了虚拟地址而程序未加载到物理内存的部分，会在页表上做标记。</p>\n<p>当程序运行到只有虚拟地址而没有对应物理内存的地方时，处理器会发生异常，然后内核就分配对应的物理内存页，把磁盘上的数据加载到物理内存，再从异常中返回，程序就能继续运行。这个过程，用户态的程序是无法感知到的。</p>\n<p>这样，就算分配的虚拟地址大于实际的分配的物理内存也是没有问题的。通过这种机制，假设我有一个远大于物理内存的程序，也是能运行的。在系统物理内存用光的情况下，当程序运行到新的地方，而这部分只分配了虚拟地址，没有对应物理内存时，内核在缺页异常中搜索最不常执行的地方，断开物理内存与原来虚拟地址的连接，把这块物理内存分配给当前程序将要运行的新的虚拟地址，然后把磁盘上的程序加载到物理内存，这样程序又能快乐的运行了。</p>\n<p>综上，虚拟地址会比物理地址多，而且也是有必要。计算机里有一个重要的情况，基本上很多东西都是局部的，一个程序虽大(比如我们的假设，磁盘上的程序远大于物理内存)，但经常执行的地方却不多。cache也是根据这个情况设计出来的，虽然可能只有几十兆，但是性能提升非常高。</p>\n<p>上面说了单进程的情况，下面说说多进程的情况。多进程时，活跃的进程可能就那么几个，其他基本上在睡大觉。32位机上，每个进程都分了4g虚拟地址空间，但是真正需要全部把程序加载到物理内存的不多，或者，我一个程序原来用了很多内存，但后面不怎么运行，内核在内存紧张时，会把这部分物理内存释放掉，分配给其他用途。</p>\n<p>前面说的是程序部分，现在说说数据部分，或者说是堆内存这块(malloc分配的)。如果这部分内存不常使用，内核会把他们丢入交换空间(swap，位于磁盘上)这个冷宫。等到真正需要时，才把数据从交换空间拿到物理内存。</p>\n<p>综上，这几种情形，使用了虚拟地址，可以让物理内存可以使用得更高效。逻辑地址比物理地址多不言而喻了吧。</p>\n<hr>\n<h2> I/O 系统</h2>\n<h3> 外部设备硬件</h3>\n<p>独占设备：</p>\n<p>​\t对某些独占设备可以通过共享设备改造为共享设备【假脱机技术：在多道批处理系统中，专门利用一道程序（SPOOLing程序）来完成对设备的I/O操作。】</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202205311015621.png\" alt=\"image-20220531101552388\" tabindex=\"0\"><figcaption>image-20220531101552388</figcaption></figure>\n<p>共享设备：</p>\n<h2> 考试</h2>\n<ol>\n<li>\n<p>基本概念</p>\n<p>操作系统是指控制和管理计算机系统硬件与软件资源，合理地调度组织、调度计算机工作与资源分配，为用户和其他软件提供方便接口与调度环境的程序集合。</p>\n</li>\n<li>\n<p>系统调用</p>\n<p>系统资源需要从用户态切换到核心态</p>\n<p>所有I/O都是特权指令</p>\n</li>\n<li></li>\n</ol>\n<ul>\n<li>\n<p>选择题 20 ！！！</p>\n</li>\n<li>\n<p>简答题 30 = 5  * 6</p>\n<ul>\n<li>概念简述</li>\n</ul>\n</li>\n<li>\n<p>算法分析 50</p>\n<ul>\n<li>算法 30</li>\n<li>综合 20</li>\n</ul>\n</li>\n</ul>\n<p>前13章，前2章（基本概念，系统调用，接口，包含操作系统安全【每个进程xx空间分离，要调用使用陷进】，方便用户使用、管理系统资源、提高扩展，进程线程定义属性特点生命周期，）</p>\n<ol>\n<li>\n<p>操作系统接口类型</p>\n<p>1.命令接口</p>\n<p>提供一组命令供用户直接或间接操作。</p>\n<p>根据作业的方式不同，命令接口又分为联机命令接口和脱机命令接口。</p>\n<p>2.程序接口</p>\n<p><a href=\"https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3\" target=\"_blank\" rel=\"noopener noreferrer\">程序接口</a>由一组系统调用命令组成，提供一组系统调用命令供<a href=\"https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E7%A8%8B%E5%BA%8F\" target=\"_blank\" rel=\"noopener noreferrer\">用户程序</a>使用。</p>\n<p>3.图形界面接口</p>\n<p>通过图标 窗口 <a href=\"https://baike.baidu.com/item/%E8%8F%9C%E5%8D%95\" target=\"_blank\" rel=\"noopener noreferrer\">菜单</a> 对话框及其他元素,和文字组合,在<a href=\"https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2\" target=\"_blank\" rel=\"noopener noreferrer\">桌面</a>上形成一个直观易懂 使用方便的计算机操作环境.</p>\n</li>\n<li>\n<p>CPU工作模式</p>\n<p>？</p>\n</li>\n<li>\n<p>进程结构、状态、状态转换</p>\n<p>程序段、数据段、进程控制段；</p>\n<p>PCB是进程的唯一标志；</p>\n<p>进程是程序运行的过程，是系统进行资源分配和调度的独立单位</p>\n</li>\n<li>\n<p>资源分配方式【抢占与否、画甘特图】</p>\n</li>\n<li>\n<p>临时区原则</p>\n<p>空则让进</p>\n<p>忙则等待</p>\n<p>有限等待</p>\n<p>让权等待</p>\n</li>\n<li>\n<p>死锁条件（4个条件、2个原因）</p>\n<p>互斥条件、不可剥夺条件、请求并保持、循环等待</p>\n<p>系统资源竞争、进程推进顺序非法</p>\n</li>\n<li>\n<p>存贮体系、存贮保护（页面存贮管理、碎片、缺页置换算法优缺点、静/动态文件重定位）</p>\n</li>\n<li>\n<p>文件系统，文件组织（文件结构发展）</p>\n</li>\n</ol>\n<p><strong>综合题</strong></p>\n<ol>\n<li>进程同步算法 FCFS\\RR\\SJF\\优先级\\多级反馈队列\\xxx（6个）</li>\n<li>任务调度</li>\n<li>系统安全状态检测（死锁）</li>\n<li>页面置换算法、存贮管理方案（）</li>\n<li>文件存贮</li>\n<li>磁盘调度策略</li>\n</ol>\n<p>理发问题、吃水果、哲学家【临界】</p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202203011048058.png",
      "date_published": "2022-02-21T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "课程笔记"
      ]
    },
    {
      "title": "数据库复习",
      "url": "https://blog.yzketx.online/course/db-read-data.html",
      "id": "https://blog.yzketx.online/course/db-read-data.html",
      "summary": "数据库复习 事务特性（ACID）",
      "content_html": "<h1> 数据库复习</h1>\n<h2> 事务特性（ACID）</h2>\n<blockquote>\n<p>事务是并发控制的单位，是用户定义的一个操作序列。</p>\n</blockquote>\n<p><strong>原子性</strong>：是指事务一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 不能够单独运行。 把一组操作放入事务中。</p>\n<p><strong>一致性</strong>：事务的执行的前后，数据的完整性要得到保证。</p>\n<p><strong>隔离性</strong>：强调的是多个用户并发访问数据库的时候，一个用户事务不能被其他用户的事务所干扰到，多个并发事务之间的数据要相互隔离。 解决多个用户对同一个数据进行操作， 数据库会有 事务的 隔离级别来进行解决。</p>\n<p><strong>持久性</strong>:一个事务一旦被提交，它对数据库中数据的改变就是永久性，即使数据库发生故障也不应该对其有任何影响。</p>\n<h2> 数据库中读数据的一些概念</h2>\n<p>（1）脏读：脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</p>\n<p>（2）不可重复读：这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。\n一种更易理解的说法是：在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。</p>\n<p>（3）幻读：幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样。一般解决幻读的方法是增加范围锁 RangeS，锁定检索范围为只读，这样就避免了幻读。</p>\n",
      "date_published": "2022-02-22T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "课程复习"
      ]
    },
    {
      "title": "课程笔记",
      "url": "https://blog.yzketx.online/course/",
      "id": "https://blog.yzketx.online/course/",
      "content_html": "",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "课程笔记"
      ]
    },
    {
      "title": "algolia 搜索",
      "url": "https://blog.yzketx.online/daily/algolia.html",
      "id": "https://blog.yzketx.online/daily/algolia.html",
      "summary": "icon: b fa-simplybuilt category: 天天笔记",
      "content_html": "<h2> icon: b fa-simplybuilt\ncategory: 天天笔记</h2>\n<h1> algolia 搜索</h1>\n<h2> 简介</h2>\n<p><strong>Flexible Search &amp;Discovery Hosted APIs</strong></p>\n<p>Algolia enables developers to build next generation apps with composable APIs, delivering relevant content in milliseconds.</p>\n<h2> 使用</h2>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "常用名词【Common nouns】",
      "url": "https://blog.yzketx.online/daily/common-nouns.html",
      "id": "https://blog.yzketx.online/daily/common-nouns.html",
      "summary": "常用名词【Common nouns】",
      "content_html": "<h1> 常用名词【Common nouns】</h1>\n<ol>\n<li>\n<p><code>Thread</code> <strong>[θred]</strong> 线程</p>\n</li>\n<li>\n<p><code>ReentrantLock</code> <strong>[riːˈɛntrənt]</strong> 可重入锁</p>\n</li>\n<li>\n<p><code>synchronized</code> <strong>[ˈsɪŋkrənaɪzd]</strong> 同步锁</p>\n</li>\n<li>\n<p><code>iterator</code> <strong>['it reit ]</strong> 迭代器</p>\n</li>\n<li></li>\n</ol>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "如何理解 Python 装饰器",
      "url": "https://blog.yzketx.online/daily/decorator.html",
      "id": "https://blog.yzketx.online/daily/decorator.html",
      "summary": "如何理解 Python 装饰器",
      "content_html": "<h1> 如何理解 Python 装饰器</h1>\n<p><a href=\"https://www.jianshu.com/p/ee82b941772a\" target=\"_blank\" rel=\"noopener noreferrer\">理解Python装饰器(Decorator) - 简书 (jianshu.com)</a></p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Django自定义认证",
      "url": "https://blog.yzketx.online/daily/django-auth.html",
      "id": "https://blog.yzketx.online/daily/django-auth.html",
      "summary": "Django自定义认证 django中request.user的由来 - 知乎 (zhihu.com)",
      "content_html": "<h1> Django自定义认证</h1>\n<p><a href=\"https://zhuanlan.zhihu.com/p/415424659\" target=\"_blank\" rel=\"noopener noreferrer\">django中request.user的由来 - 知乎 (zhihu.com)</a></p>\n<p>重点是通过重写 <code>from django.contrib.auth.backends import BaseBackend</code> 的 <code>authenticate</code> 和 <code>get_user</code> 方法实现</p>\n<p>可以参考 <code>ModelBackend</code> 写法，Django  <code>AbstractUser(AbstractBaseUser, PermissionsMixin)</code> 中的 <code>PermissionsMixin</code> 便是调用了其中的 验权方法，2者有着较高的耦合。</p>\n<p>request.user 由 auth.get_user() 维护最上层 session 验证，auth.login 通过调用该函数实现 request.user，可通过重写 auth.get_user auth.login auth.logout 等函数实现</p>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Docker - Docker Desktop(WSL2) 修改镜像等文件存储位置",
      "url": "https://blog.yzketx.online/daily/docker-desktop-wsl2-change-dir.html",
      "id": "https://blog.yzketx.online/daily/docker-desktop-wsl2-change-dir.html",
      "summary": "Docker - Docker Desktop(WSL2) 修改镜像等文件存储位置",
      "content_html": "<h1> Docker - Docker Desktop(WSL2) 修改镜像等文件存储位置</h1>\n<h2> 背景</h2>\n<p>以WSL2方式使用 Docker Desktop for Windows 确实带来了更好的体验，但同时也带来新的问题。其中最典型的问题就是系统盘空间的占用越来越大，而且还有典型的内存问题。</p>\n<h2> 说明</h2>\n<p>默认情况下，Docker Desktop for Window会创建如下两个发行版（distro）：</p>\n<ul>\n<li>\n<p>docker-desktop</p>\n</li>\n<li>\n<p>docker-desktop-data</p>\n</li>\n</ul>\n<p>如果访问<code>%LOCALAPPDATA%/Docker/wsl</code>目录，就可以看到两个文件夹，同时每个文件夹中都会有一个vhdx文件。</p>\n<p><code>%LOCALAPPDATA%/Docker/wsl</code> 就是当前登录用户的<code>AppData\\Local</code> 目录，假设当前登录的用户为Administrator，那么这个目录就是 <code>C:\\User\\Administrator\\AppData\\Local\\Docker\\wsl</code></p>\n<ul>\n<li>data/ext4.vhdx 是被docker-desktop-data 发行版使用</li>\n<li>distro/ext4.vhdx 是被 docker-desktop 发行版使用</li>\n</ul>\n<p>docker-desktop-data 是被用来存储 docker images 以及相关的数据。因此，它的大小会随着使用逐步增长，因此导致系统盘空间不足。</p>\n<p>vhdx文件最大支持256G，超出这个大小将会出错。参见：<a href=\"https://docs.microsoft.com/en-us/windows/wsl/compare-versions#understanding-wsl-2-uses-a-vhd-and-what-to-do-if-you-reach-its-max-size\" target=\"_blank\" rel=\"noopener noreferrer\">官方说明</a>。</p>\n<p>使用命令<code>wsl --list --v</code> 可进行查看:</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202202081952108.png\" alt=\"image-20220208195248995\" tabindex=\"0\"><figcaption>image-20220208195248995</figcaption></figure>\n<h2> 解决步骤</h2>\n<h3> 1. 删除所有容器</h3>\n<p>可以使用命令，查看所有容器：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>打开Docker Desktop for Window 的Dashboard界面，将该界面中的所有内容删除。</p>\n<p>这一步很重要，如果不这样操作，进行后续操作的时候，要么提示网络相关错误：cannot create a specific network，要么导入完成之后，vhdx文件会消失。</p>\n<h3> 2. 退出Docker Desktop</h3>\n<p>检查是否所有发行版都已经关闭</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h3> 3. 导出wsl子系统镜像:</h3>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h3> 4. 注销（删除）现有的wsl子系统：</h3>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h3> 5. 重新创建wsl子系统：</h3>\n<div class=\"language-bash\" data-ext=\"sh\"></div>",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202202081952108.png",
      "date_published": "2022-02-08T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "锁相关",
      "url": "https://blog.yzketx.online/daily/lock.html",
      "id": "https://blog.yzketx.online/daily/lock.html",
      "summary": "锁相关 死锁面试题（什么是死锁，产生死锁的原因及必要条件）_AddoilDan的博客-CSDN博客_死锁",
      "content_html": "<h1> 锁相关</h1>\n<p><a href=\"https://blog.csdn.net/hd12370/article/details/82814348\" target=\"_blank\" rel=\"noopener noreferrer\">死锁面试题（什么是死锁，产生死锁的原因及必要条件）_AddoilDan的博客-CSDN博客_死锁</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/31537871\" target=\"_blank\" rel=\"noopener noreferrer\">什么是悲观锁和乐观锁 - 知乎 (zhihu.com)</a></p>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Python mateclass",
      "url": "https://blog.yzketx.online/daily/python-mateclass.html",
      "id": "https://blog.yzketx.online/daily/python-mateclass.html",
      "summary": "Python mateclass",
      "content_html": "<h1> Python mateclass</h1>\n<p>一 你可以从这里获取什么？</p>\n<ol>\n<li>\n<p>也许你在阅读别人的代码的时候碰到过metaclass，那你可以参考这里的介绍。</p>\n</li>\n<li>\n<p>或许你需要设计一些底层的库，也许metaclass能帮你简化你的设计（也有可能复杂化：）</p>\n</li>\n<li>\n<p>也许你在了解metaclass的相关知识之后，你对python的类的一些机制会更了解。</p>\n</li>\n<li>\n<p>更多...</p>\n</li>\n</ol>\n<p>二 metaclass的作用是什么？（感性认识）</p>\n<p>metaclass能有什么用处，先来个感性的认识：</p>\n<ol>\n<li>\n<p>你可以自由的、动态的修改/增加/删除 类的或者实例中的方法或者属性</p>\n</li>\n<li>\n<p>批量的对某些方法使用decorator，而不需要每次都在方法的上面加入@decorator_func</p>\n</li>\n<li>\n<p>当引入第三方库的时候，如果该库某些类需要patch的时候可以用metaclass</p>\n</li>\n<li>\n<p>可以用于序列化（参见yaml这个库的实现，我没怎么仔细看）</p>\n</li>\n<li>\n<p>提供接口注册，接口格式检查等</p>\n</li>\n<li>\n<p>自动委托</p>\n</li>\n<li>\n<p>更多...</p>\n</li>\n</ol>\n<p>三 metaclass的相关知识</p>\n<ol>\n<li>什么是元类？</li>\n</ol>\n<p>1.1 在wiki上面，metaclass是这样定义的：在面向对象编程中，</p>\n<p>元类是其实例为类的类。</p>\n<p>就像普通类定义某些对象的行为一样，</p>\n<p>元类定义某些类及其实例的行为。</p>\n<p>也就是说metaclass的实例化结果是类，而class实例化的结果是instance。我是这么理解的：</p>\n<p>metaclass是类似创建类的模板，所有的类都是通过他来create的（调用__new__），这使得你可以自由的控制</p>\n<p>创建类的那个过程，实现你所需要的功能。</p>\n<p>1.2 元类基础</p>\n<p>* 一般情况下， 如果你要用类来实现metaclass的话，该类需要继承于type，而且通常会重写type的__new__方法来控制创建过程。</p>\n<p>当然你也可以用函数的方式（下文会讲）</p>\n<p>* 在metaclass里面定义的方法会成为类的方法，可以直接通过类名来调用</p>\n<ol start=\"2\">\n<li>使用气象类</li>\n</ol>\n<p>2.1 用类的形式</p>\n<p>2.1.1 类继承于type， 例如： class Meta（type）:p ass</p>\n<p>2.1.2 将需要使用metaclass来构建class的类的__metaclass__属性（不需要显示声明，直接有的了）赋值为Meta（继承于type的类）</p>\n<p>2.2 用函数的形式</p>\n<p>2.2.1 构建一个函数，例如叫metaclass_new， 需要3个参数：name， bases， attrs，</p>\n<p>名称： 类的名字</p>\n<p>bases： 基类，通常是tuple类型</p>\n<p>attrs： dict类型，就是类的属性或者函数</p>\n<p>2.2.2 将需要使用metaclass来构建class的类的__metaclass__属性（不需要显示声明，直接有的了）赋值为函数metaclas_new</p>\n<p>3 元类 原理</p>\n<p>3.1 基本</p>\n<p>metaclass的原理其实是这样的：当定义好类之后，创建类的时候其实是调用了type的__new__方法为这个类分配内存空间，创建</p>\n<p>好了之后再调用type的__init__方法初始化（做一些赋值等）。所以metaclass的所有magic其实就在于这个__new__方法里面了。</p>\n<p>说说这个方法：<strong>new</strong>（cls， name， bases， attrs）</p>\n<p>cls： 将要创建的类，类似与self，但是self指向的是instance，而这里cls指向的是class</p>\n<p>name： 类的名字，也就是我们通常用类名.__name__获取的。</p>\n<p>基类： 基类</p>\n<p>attrs： 属性的dict。dict的内容可以是变量（类属性），也可以是函数（类方法）。</p>\n<p>所以在创建类的过程，我们可以在这个函数里面修改name，bases，attrs的值来自由的达到我们的功能。这里常用的配合方法是</p>\n<p>getattr和setattr（只是一个建议）</p>\n<p>3.2 查找顺序</p>\n<p>再说说关于__metaclass__这个属性。这个属性的说明是这样的：</p>\n<p>此变量可以是名称、基数和字典的任何可调用接受参数。创建类时，将使用可调用对象而不是内置的 type（）。版本 2.2 中的新功能。(所以有了上面介绍的分别用类或者函数的方法）</p>\n<p>The appropriate metaclass is determined by the following precedence rules:</p>\n<p>If dict['<strong>metaclass</strong>'] exists, it is used.</p>\n<p>Otherwise, if there is at least one base class, its metaclass is used (this looks for a <strong>class</strong> attribute first and if not found, uses its type).</p>\n<p>Otherwise, if a global variable named <strong>metaclass</strong> exists, it is used.</p>\n<p>Otherwise, the old-style, classic metaclass (types.ClassType) is used.</p>\n<p>这个查找顺序也比较好懂，而且利用这个顺序的话，如果是old-style类的话，可以在某个需要的模块里面指定全局变量</p>\n<p><strong>metaclass</strong> = type就能把所有的old-style 变成 new-style的类了。(这是其中一种trick)</p>\n<p>四 例子</p>\n<p>针对第二点说的metaclass的作用，顺序来给些例子：</p>\n<ol>\n<li>你可以自由的、动态的修改/增加/删除 类的或者实例中的方法或者属性</li>\n</ol>\n<p>Python代码</p>\n<ol>\n<li>#!/usr/bin/python</li>\n<li>#coding :utf-8</li>\n<li></li>\n<li></li>\n<li><strong>def</strong> ma(cls):</li>\n<li><strong>print</strong> 'method a'</li>\n<li></li>\n<li><strong>def</strong> mb(cls):</li>\n<li><strong>print</strong> 'method b'</li>\n<li></li>\n<li>method_dict = {</li>\n<li>'ma': ma,</li>\n<li>'mb': mb,</li>\n<li>}</li>\n<li></li>\n<li><strong>class</strong> DynamicMethod(type):</li>\n<li><strong>def</strong> <strong>new</strong>(cls, name, bases, dct):</li>\n<li>​    <strong>if</strong> name[:3] == 'Abc':</li>\n<li>​      dct.update(method_dict)</li>\n<li>​    <strong>return</strong> type.<strong>new</strong>(cls, name, bases, dct)</li>\n<li></li>\n<li><strong>def</strong> <strong>init</strong>(cls, name, bases, dct):</li>\n<li>​    super(DynamicMethod, cls).<strong>init</strong>(name, bases, dct)</li>\n<li></li>\n<li></li>\n<li><strong>class</strong> AbcTest(object):</li>\n<li><strong>metaclass</strong> = DynamicMethod</li>\n<li><strong>def</strong> mc(self, x):</li>\n<li>​    <strong>print</strong> x * 3</li>\n<li></li>\n<li><strong>class</strong> NotAbc(object):</li>\n<li><strong>metaclass</strong> = DynamicMethod</li>\n<li><strong>def</strong> md(self, x):</li>\n<li>​    <strong>print</strong> x * 3</li>\n<li></li>\n<li><strong>def</strong> main():</li>\n<li>a = AbcTest()</li>\n<li>a.mc(3)</li>\n<li>a.ma()</li>\n<li><strong>print</strong> dir(a)</li>\n<li></li>\n<li>b = NotAbc()</li>\n<li><strong>print</strong> dir(b)</li>\n<li></li>\n<li><strong>if</strong> <strong>name</strong> == '<strong>main</strong>':</li>\n<li>main()</li>\n</ol>\n<p>通过DynamicMethod这个metaclass的原型，我们可以在那些指定了__metaclass__属性位DynamicMethod的类里面，</p>\n<p>根据类名字，如果是以'Abc'开头的就给它加上ma和mb的方法(这里的条件只是一种简单的例子假设了，实际应用上</p>\n<p>可能更复杂）,如果不是'Abc'开头的类就不加. 这样就可以打到动态添加方法的效果了。其实，你也可以将需要动态</p>\n<p>添加或者修改的方法改到__new__里面，因为python是支持在方法里面再定义方法的. 通过这个例子，其实可以看到</p>\n<p>只要我们能操作__new__方法里面的其中一个参数attrs，就可以动态添加东西了。</p>\n<ol start=\"2\">\n<li>批量的对某些方法使用decorator，而不需要每次都在方法的上面加入@decorator_func</li>\n</ol>\n<p>这个其实有应用场景的，就是比如我们cgi程序里面，很多需要验证登录或者是否有权限的，只有验证通过之后才</p>\n<p>可以操作。那么如果你有很多个操作都需要这样做，我们一般情况下可以手动在每个方法的前头用@login_required</p>\n<p>类似这样的方式。那如果学习了metaclass的使用的话，这次你也可以这样做:</p>\n<p>Python代码</p>\n<ol>\n<li>#!/usr/bin/python</li>\n<li>#coding :utf-8</li>\n<li><strong>from</strong> types <strong>import</strong> FunctionType</li>\n<li></li>\n<li><strong>def</strong> login_required(func):</li>\n<li><strong>print</strong> 'login check logic here'</li>\n<li><strong>return</strong> func</li>\n<li></li>\n<li></li>\n<li><strong>class</strong> LoginDecorator(type):</li>\n<li><strong>def</strong> <strong>new</strong>(cls, name, bases, dct):</li>\n<li>​    <strong>for</strong> name, value <strong>in</strong> dct.iteritems():</li>\n<li>​      <strong>if</strong> name <strong>not</strong> <strong>in</strong> ('<strong>metaclass</strong>', '<strong>init</strong>', '<strong>module</strong>') <strong>and</strong>\\</li>\n<li>​        type(value) == FunctionType:</li>\n<li>​        value = login_required(value)</li>\n<li></li>\n<li>​      dct[name] = value</li>\n<li>​    <strong>return</strong> type.<strong>new</strong>(cls, name, bases, dct)</li>\n<li></li>\n<li></li>\n<li><strong>class</strong> Operation(object):</li>\n<li><strong>metaclass</strong> = LoginDecorator</li>\n<li></li>\n<li><strong>def</strong> delete（self， x）：</li>\n<li><strong>打印</strong> '已删除 %s' % str（x）</li>\n<li></li>\n<li></li>\n<li><strong>def</strong> main（）：</li>\n<li>op = Operation（）</li>\n<li>op.delete（'test'）</li>\n<li></li>\n<li><strong>如果</strong> <strong>name</strong> == '<strong>main</strong>'：</li>\n<li>主（）</li>\n</ol>\n<p>这样子你就可以不用在delete函数上面写@login_required， 也能达到decorator的效果了。不过可读性就差点了。</p>\n<ol start=\"3\">\n<li>当引入第三方库的时候，如果该库某些类需要patch的时候可以用metaclass</li>\n</ol>\n<p>Python代码</p>\n<ol>\n<li>\n<p>#！/usr/bin/python</p>\n</li>\n<li>\n<p>#coding ：utf-8</p>\n</li>\n<li></li>\n<li>\n<p><strong>def</strong> monkey_patch（name， bases， dct）：</p>\n</li>\n<li>\n<p><strong>assert</strong> len（bases） == 1</p>\n</li>\n<li>\n<p>基数 = 基数[0]</p>\n</li>\n<li>\n<p><strong>对于</strong> name， value <strong>in</strong> dct.iteritems（）：</p>\n</li>\n<li>\n<p><strong>如果</strong>名称<strong>不在</strong> （“<strong>module</strong>”、“<strong>metaclass</strong>”）：</p>\n</li>\n<li>\n<p>setattr（base， name， value）</p>\n</li>\n<li>\n<p><strong>返回</strong>基地</p>\n</li>\n<li></li>\n<li>\n<p><strong>类</strong> A（对象）：</p>\n</li>\n<li>\n<p><strong>def</strong> a（自我）：</p>\n</li>\n<li>\n<p><strong>打印</strong>“我是一个对象”</p>\n</li>\n<li></li>\n<li></li>\n<li>\n<p><strong>类</strong> PatchA（A）：</p>\n</li>\n<li>\n<p><strong>metaclass</strong> = monkey_patch</p>\n</li>\n<li></li>\n<li>\n<p><strong>def</strong> patcha_method（自我）：</p>\n</li>\n<li>\n<p><strong>打印</strong>“这是为A类修补的方法”</p>\n</li>\n<li></li>\n<li>\n<p><strong>def</strong> main（）：</p>\n</li>\n<li>\n<p>pa = PatchA（）</p>\n</li>\n<li>\n<p>pa.patcha_method（）</p>\n</li>\n<li>\n<p>pa.a（）</p>\n</li>\n<li>\n<p><strong>print</strong> dir（pa）</p>\n</li>\n<li>\n<p><strong>print</strong> dir（PatchA）</p>\n</li>\n<li></li>\n<li>\n<p><strong>如果</strong> <strong>name</strong> == '<strong>main</strong>'：</p>\n</li>\n<li>\n<p>主（）</p>\n</li>\n<li>\n<p>提供接口注册，接口格式检查等, 这个功能可以参考这篇文章：</p>\n</li>\n</ol>\n<p>http://mikeconley.ca/blog/2010/05/04/python-metaclasses-in-review-board/</p>\n<ol start=\"6\">\n<li>自动委托</li>\n</ol>\n<p>以下是网上的例子：</p>\n<p>http://marlonyao.iteye.com/blog/762156</p>\n<p>五 总结</p>\n<ol>\n<li>元类的使用原则：</li>\n</ol>\n<p>如果你想知道你是否需要它们，你不需要（真正需要它们的人肯定地知道他们需要它们，并且不需要解释为什么）。--蒂姆·彼得斯</p>\n<p>也就是说如果你不知道能用metaclass来干什么的话，你尽量不要用，因为通常metaclass的代码会增加代码的复杂度，</p>\n<p>降低代码的可读性。所以你必需权衡metaclass的利弊。</p>\n<ol start=\"2\">\n<li>metaclass的优势在于它的动态性和可描述性（比如上面例子中的self.delegate.<strong>getitem</strong>（i）这样的代码，它</li>\n</ol>\n<p>可以用另外的函数代码生成,而无需每次手动编写）, 它能把类的动态性扩展到极致。</p>\n<p>六 补充</p>\n<p>以下是同事们的很好的补充：</p>\n<p>张同学：</p>\n<p>1.metaclass属于元编程（metaprogramming）的范畴，所谓元编程就是让程序来写</p>\n<p>（generate/modify）程序，这通常依赖于语言及其运行时系统的动态特性（其实像C</p>\n<p>这样的语言也可以进行元编程)。正如楼主所说，元编程的一个用途就是\"可以用另</p>\n<p>外的函数代码生成，而无需每次手动编写“，在python中我们可以做得更多。</p>\n<p>2.对于python而言，metaclass使程序员可以干涉class的创建过程，并可以在任何</p>\n<p>时候修改这样的class（包括修改metaclass），由于class的意义是为instance集合</p>\n<p>持有“方法”，所以修改了一个class就等于修改了所有这些instance的行为，这是</p>\n<p>很好的服务。</p>\n<p>3.注意metaclass的__new__和__init__的区别。</p>\n<p>类动态方法（类型）：</p>\n<p>def <strong>new</strong>（cls， name， bases， dct）： # cls=DynamicMethod</p>\n<p>def <strong>init</strong>（cls， name， bases， dct）： # cls=你创建的类对象</p>\n<p>这意味着在__new__中我们通常只是修改dct，但是在__init__中，我们可以直接修</p>\n<p>改创建好的类，所以我认为这两个接口的主要区别有2点：</p>\n<p>1)调用时机不同(用处请发散思维）;</p>\n<p>2）__init__比__new__更有用，我在实际项目中一般都是用__init__的。</p>\n<p>4.在python中我们为什么要修改class？那当然是为了改变它的行为，或者为了创</p>\n<p>建出独一无二的类。实际中常常需要为class动态添加方法。比如一个数据库表A有</p>\n<p>字段name， address等，表B有name， phone等，你希望A的模型类有</p>\n<p>find_by_address、find_by_name_and_address等方法，希望B的模型类有</p>\n<p>find_by_name、find_by_phone等方法，但是又不想手写这些方法（其实不可能手</p>\n<p>写，因为这种组合太多了），这时你可以在A、B共同的metaclass中定义一个自动添</p>\n<p>加方法的子程序，当然你也可以重写__getattr__之类的接口来hook所有</p>\n<p>find_by_XXX函数调用，这就是时间换空间了，想象你要执行find_by_XXX一百万</p>\n<p>次。也可以比较一下在c++/java中如何应对这种需求。</p>\n<p>5.python的成功之处在于它无处不在的namespace（就是那个__dict__，其意义可以</p>\n<p>参考SICP第一章的environment模型，对计算理论感兴趣的也可以用lambda演算来</p>\n<p>解释），而且函数又是first class对象，又强化了interface的使用。我们知道了</p>\n<p>metaclass-&gt;class-&gt;instance的关系，又知道了对象的方法是放在类里的（请详细</p>\n<p>考察python查找一个方法的流程），那么用python实现各种设计模式就比较简单了。</p>\n<p>6.metaclass不会使程序变晦涩，前提是了解了metaclass的固有存在，许多教程的</p>\n<p>问题就在于它没有告诉读者metaclass的存在，而是借助某些其他语言（比如c++）的</p>\n<p>类模型来讲解python。在ruby的类型系统中metaclass是无限的，metaclass也有自</p>\n<p>己的metaclass（你可以称之为metametaclass、metametametaclass等等），ruby</p>\n<p>善于实现DSL和语法分析器也部分得益于此。</p>\n<p>岳同学：</p>\n<p>不能说__init__比__new__更有用吧。我觉得要看场合。毕竟__new__能做到比</p>\n<p>__init__更多的事情。比如有时候想改生成的类型名字，或者改类型的父类。😃</p>\n<p>不过的确大多数场合用__init__就够用了。＋1</p>\n<p>在__init__中控制类生成的过程有一点要注意：在__init__（）的最后一个参</p>\n<p>数（attrs）中，对于类中定义的函数类型的属性，比如：</p>\n<p>def abc（self）：</p>\n<p>通过</p>\n<p>仍然具有以下的key-&gt;value形式：</p>\n<p>“abc”：&lt;函数对象&gt;</p>\n<p>但是在生成的类中，“abc”对应的属性已经从一个function变成了一个unbind</p>\n<p>方法：</p>\n<p>self.abc --&gt;解绑方法</p>\n<p>不过实际使用中影响不大</p>\n<p>七 其他</p>\n<ol>\n<li>哪些项目有用metaclass：</li>\n</ol>\n<p>据我所知就是django中的数据库部分的很多都使用metaclass来实现可描述性的</p>\n<p>还有谷歌 app engine的代码里面也有使用</p>\n<p>yaml中的序列化部分代码也有使用</p>\n<p>。。。</p>\n<ol start=\"2\">\n<li>参考资料:</li>\n</ol>\n<p>Python中的元类编程[http://gnosis.cx/publish/programming/metaclass_1.html]</p>\n<p>* Python中用MetaClass实现委托、不可变集合 [http://marlonyao.iteye.com/blog/762156]</p>\n<p>* 元类 [http://en.wikipedia.org/wiki/Metaclasses#Python_example]</p>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Tree",
      "url": "https://blog.yzketx.online/daily/tree.html",
      "id": "https://blog.yzketx.online/daily/tree.html",
      "summary": "Tree 概述",
      "content_html": "<h1> Tree</h1>\n<h2> 概述</h2>\n<p>我们平时其实接触到了各种树的应用，如二叉树、二叉搜索树、平衡二叉树、B树、B+树，下面将列出一些对其定义的个人理解。<a href=\"https://zhuanlan.zhihu.com/p/27700617\" target=\"_blank\" rel=\"noopener noreferrer\">平衡二叉树、B树、B+树、B*树 理解其中一种你就都明白了 - 知乎 (zhihu.com)</a></p>\n<h2> 二叉树</h2>\n<p>二叉树是每个节点最多有2个子节点的树</p>\n<p>二叉树的叶子节点有0个子节点，二叉树的根节点或者内部节点有一个或者2个子节点</p>\n<h2> 二叉搜索树 BST</h2>\n<p>二叉搜索树或者是一棵空树，或者满足以下条件：</p>\n<ol>\n<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>\n<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>\n<li>它的左、右子树也分别为二叉搜索树。</li>\n</ol>\n<h2> 平衡二叉树 AVL Tree</h2>\n<p>AVL树定义：所有节点的左右子树的高度差不超过1的二叉树。</p>\n<p>平衡二叉树是采用二分法思维把数据按规则组装成一个树形结构的数据，用这个树形结构的数据减少无关数据的检索，大大的提升了数据检索的速度；平衡二叉树的数据结构组装过程有以下规则：</p>\n<p>（1）非叶子节点只能允许最多两个子节点存在。</p>\n<p>（2）每一个非叶子节点数据分布规则为左边的子节点小当前节点的值，右边的子节点大于当前节点的值(这里值是基于自己的算法规则而定的，比如hash值)；</p>\n<p>平衡树的层级结构：因为平衡二叉树查询性能和树的层级（h高度）成反比，h值越小查询越快、为了保证树的结构左右两端数据大致平衡降低二叉树的查询难度一般会采用一种算法机制实现节点数据结构的平衡，实现了这种算法的有比如<a href=\"http://baike.baidu.com/item/Treap\" target=\"_blank\" rel=\"noopener noreferrer\">Treap</a>、红黑树，使用平衡二叉树能保证数据的左右两边的节点层级相差不会大于1.，通过这样避免树形结构由于删除增加变成线性链表影响查询效率，保证数据平衡的情况下查找数据的速度近于二分法查找；</p>\n<p>特点：</p>\n<ol>\n<li>非叶子节点最多拥有两个子节点；</li>\n<li>非叶子节值大于左边子节点、小于右边子节点；</li>\n<li>树的左右两边的层级数相差不会大于1;</li>\n<li>没有值相等重复的节点;</li>\n</ol>\n<h2> B树</h2>\n<p>B树和平衡二叉树稍有不同的是B树属于多叉树又名平衡多路查找树（查找路径不只两个）</p>\n<p>B树英文官方定义：</p>\n<p>1、Every node has at most m children.</p>\n<p>2、Every non-leaf node (except root) has at least [m/2] child nodes.</p>\n<p>3、The root has at least two children if it is not a leaf node.</p>\n<p>4、A non-leaf node with k children contains k − 1 keys.</p>\n<p>5、All leaves appear in the same level.</p>\n<p>B树定义：</p>\n<p>1、根节点至少有m个子节点；</p>\n<p>2、每个非叶子节点并且非根节点最少有m/2个，即内部节点的子节点个数最少也有m/2个。</p>\n<p>3、根节点最少有2个子节点。</p>\n<p>4、有k个关键字(关键字按递增次序排列)的非叶结点恰好有k+1个孩子。</p>\n<p>5、所有叶子节点在同一层，即所有叶子几点高度一致。</p>\n<p><strong>规则：</strong></p>\n<p>（1）排序方式：所有节点关键字是按递增次序排列，并遵循左小右大原则；</p>\n<p>（2）子节点数：非叶节点的子节点数&gt;1，且&lt;=M ，且M&gt;=2，空树除外（注：M阶代表一个树节点最多有多少个查找路径，M=M路,当M=2则是2叉树,M=3则是3叉）；</p>\n<p>（3）关键字数：枝节点的关键字数量大于等于ceil(m/2)-1个且小于等于M-1个（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2);</p>\n<p>（4）所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子;</p>\n<h2> B+树</h2>\n<p>B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。B+树查找的效率要比B树更高、更稳定；</p>\n<p><strong>规则</strong></p>\n<p>（1）B+跟B树不同B+树的<strong>非叶子</strong>节点不保存关键字记录的指针，只进行数据索引，这样使得B+树每个<strong>非叶子</strong>节点所能保存的关键字大大增加；</p>\n<p>（2）B+树<strong>叶子</strong>节点保存了父节点的所有关键字记录的指针，所有数据地址必须要到叶子节点才能获取到。所以每次数据查询的次数都一样；</p>\n<p>（3）B+树叶子节点的关键字从小到大有序排列，左边结尾数据都会保存右边节点开始数据的指针。</p>\n<p>（4）非叶子节点的子节点数=关键字数（来源百度百科）（根据各种资料 这里有两种算法的实现方式，另一种为非叶节点的关键字数=子节点数-1（来源维基百科)，虽然他们数据排列结构不一样，但其原理还是一样的Mysql 的B+树是用第一种方式实现）;</p>\n<p><strong>特点</strong></p>\n<p>1、B+<strong>树的层级更少</strong>：相较于B树B+每个<strong>非叶子</strong>节点存储的关键字数更多，树的层级更少所以查询数据更快；</p>\n<p>2、B+<strong>树查询速度更稳定</strong>：B+所有关键字数据地址都存在<strong>叶子</strong>节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;</p>\n<p>3、B+<strong>树天然具备排序功能：<strong>B+树所有的</strong>叶子</strong>节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。</p>\n<p>4、B+<strong>树全节点遍历更快：<strong>B+树遍历整棵树只需要遍历所有的</strong>叶子</strong>节点即可，，而不需要像B树一样需要对每一层进行遍历，这有利于数据库做全表扫描。</p>\n<p><strong>B树</strong>相对于<strong>B+树</strong>的优点是，如果经常访问的数据离根节点很近，而<strong>B树</strong>的<strong>非叶子</strong>节点本身存有关键字其数据的地址，所以这种数据检索的时候会要比<strong>B+树</strong>快。</p>\n<h2> B*树</h2>\n<p><strong>规则</strong></p>\n<p>B*树是B+树的变种，相对于B+树他们的不同之处如下：</p>\n<p>（1）首先是关键字个数限制问题，B+树初始化的关键字初始化个数是cei(m/2)，b<em>树的初始化个数为（cei(2/3</em>m)）</p>\n<p>（2）B+树节点满时就会分裂，而B*树节点满时会检查兄弟节点是否满（因为每个节点都有指向兄弟的指针），如果兄弟节点未满则向兄弟节点转移关键字，如果兄弟节点已满，则从当前节点和兄弟节点各拿出1/3的数据创建一个新的节点出来；</p>\n<p><strong>特点</strong></p>\n<p>在B+树的基础上因其初始化的容量变大，使得节点空间使用率更高，而又存有兄弟节点的指针，可以向兄弟节点转移关键字的特性使得B*树额分解次数变得更少；</p>\n<h2> 总结</h2>\n<p><strong>1、相同思想和策略</strong></p>\n<p>从平衡二叉树、B树、B+树、B*树总体来看它们的贯彻的思想是相同的，都是采用二分法和数据平衡策略来提升查找数据的速度；</p>\n<p><strong>2、不同的方式的磁盘空间利用</strong></p>\n<p>不同点是他们一个一个在演变的过程中通过IO从磁盘读取数据的原理进行一步步的演变，每一次演变都是为了让节点的空间更合理的运用起来，从而使树的层级减少达到快速查找数据的目的；</p>\n<h2> 补充概念：</h2>\n<p>附（二分法查找）：<a href=\"https://zhuanlan.zhihu.com/p/27597160\" target=\"_blank\" rel=\"noopener noreferrer\">二分法查找原理 - 知乎专栏</a></p>\n<p>附（B、B+、B*树）：<a href=\"http://blog.csdn.net/v_JULY_v/article/details/6530142/\" target=\"_blank\" rel=\"noopener noreferrer\">从B树、B+树、B*树谈到R 树</a></p>\n<p>附（B、B+、B*树）：<a href=\"http://blog.csdn.net/endlu/article/details/51720299\" target=\"_blank\" rel=\"noopener noreferrer\">end's coding life</a></p>\n<p>附：<a href=\"https://www.cnblogs.com/nullzx/p/8729425.html\" target=\"_blank\" rel=\"noopener noreferrer\">B树和B+树的插入、删除图文详解 - nullzx - 博客园</a></p>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "字节跳动面试",
      "url": "https://blog.yzketx.online/interview/bytedance.html",
      "id": "https://blog.yzketx.online/interview/bytedance.html",
      "summary": "字节跳动面试 微信视频设计用例！！！",
      "content_html": "<h1> 字节跳动面试</h1>\n<p>微信视频设计用例！！！</p>\n<p>测试在字节中的地位</p>\n<h2> Python</h2>\n<h3> Python为什么是解释型语言</h3>\n<p>顺序执行的 没有静态检查 没有编译链接过程 可以交互式运行</p>\n<p>c语言类型不对是编译抛的错误，python类型不对是运行抛的错误</p>\n<p>也就是python是一条条运行的，c需要整个编译过了才能运行</p>\n<h2> 面向对象和面向过程的区别</h2>\n<p>面向对象是把构成问题的事务分解成各个对象，建立对象来描述某个事务在解决问题的步骤中的行为；</p>\n<p>面向过程是分析出解决问题所需要的步骤，然后用一些函数把这些步骤一步步实现，使用的时候依次调用函数就行了。</p>\n<h2> Python有什么优势</h2>\n<p>解释型，语法简单易懂，可读性强</p>\n<p>有很多库可以用，可以让我们站在巨人的肩膀上简单的实现想要的功能</p>\n<p>可扩展，和其他编程语言或其他软件有可连接的接口</p>\n<p>免费开源、可移植</p>\n<p>自动内存管理，让程序员可以专注于代码的实现</p>\n<h3> 缺点：</h3>\n<p>他的可解释特征使其运行速度变慢</p>\n<p>动态语言的特点可能会增加运行时错误。</p>\n<h2> 装饰器</h2>\n<p>装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，它接受一个函数作为参数，并返回一个函数，利用python的@语法来放置</p>\n<p>功能：1.引入日志；2.函数执行时间统计；3.执行函数前预备处理；4.执行函数后清理功能；5.权限校验；6.缓存</p>\n<h3> python 装饰器@staticmethod和@classmethod区别和使用</h3>\n<p>@classmethod：类方法，类方法是给类用的，类在使用时会将类本身当做参数传给类方法的第一个参数，python为我们内置了函数classmethod来把类中的函数定义成类方法。</p>\n<p>@staticmethod：静态方法</p>\n<p>用上面两个装饰器就可以不用在使用类前对类进行实例化了，</p>\n<p>@property：将一个实例方法提升为属性，便于访问</p>\n<h3> 写一个装饰器</h3>\n<div class=\"language-text\" data-ext=\"text\"></div><p>functools.warp方法是把被wrapped的函数的属性传递给wrapper的函数，不写的话不支持参数</p>\n<h2> 深拷贝、浅拷贝和等号赋值</h2>\n<p>深拷贝：新建一个对象，把原来对象的内存完全复制过来，改变复制后的对象，不会改动原来内存的内容。（两个对象在复制之后是完全独立的对象）</p>\n<p>等号赋值：相当于为原来的对象打一个新的标签，两个引用指向同一个对象，修改其中的一个，另一个也会产生变化</p>\n<p>浅拷贝：两种情况，1. 浅拷贝的值是不可变对象（数值、字符、元组）时，和等于赋值一样，对象的id值和浅拷贝原来的值相同；2. 如果是可变对象（列表、字典等），a. 一个简单的没有嵌套的对象，复制前后的对象相互之间不会影响，b. 对象中有复杂子对象，如列表嵌套，如果改变原来的对象中复杂子对象的值，浅拷贝的值也会受影响，因为在浅拷贝时<strong>只复制了子对象的引用（只拷贝父对象）</strong>。</p>\n<h2> 在python中如何实现多线程</h2>\n<p>Thread，新建线程，然后可以用GIL实现线程通信</p>\n<h3> GIL</h3>\n<p>GIL（全局解释锁）能确保一次执行一个线程，线程轮流保存GIL并且在把他传给下一个线程之前执行一些操作，以达到多个进程在CPU上轮流运行，但是这个转换速度很快，让我们觉得他是并行的。</p>\n<h2> 类</h2>\n<p>类（Class）： 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p>\n<h3> 类的继承</h3>\n<p>当一个类继承自另一个类，它就被称为一个子类/派生类，继承自父类/基类/超类。它会继承/获取所有类成员（属性和方法）。</p>\n<h2> Python如何内存管理</h2>\n<p>\\1.   引用计数：python内部使用引用计数，来保持追踪内存中的对象，Python内部记录了对象有多少个引用，即引用计数，当对象被创建时就创建了一个引用计数，当对象不再需要时，这个对象的引用计数为0时，它被垃圾回收。</p>\n<p>\\2.   垃圾回收：python会检查引用计数为0的对象，清除其在内存占的空间；循环引用对象则用一个循环垃圾回收器来回收</p>\n<p>\\3.   内存池机制：在Python中，许多时候申请的内存都是小块的内存，这些小块内存在申请后，很快又会被释放，由于这些内存的申请并不是为了创建对象，所以并没有对象一级的内存池机制。这就意味着Python在运行期间会大量地执行malloc和free的操作，频繁地在用户态和核心态之间进行切换，这将严重影响Python的执行效率。为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。</p>\n<p>a) Python提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统。</p>\n<p>b) Python中所有小于256个字节的对象都使用pymalloc实现的分配器，而大的对象则使用系统的 malloc。另外Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。</p>\n<h3> Python垃圾回收机制</h3>\n<p>（自动处理分配回收内存的问题，没用了内存泄漏的隐患），以引用计数机制为主，标记-清楚和分代收集两种机制为辅</p>\n<p>计数机制就是python中的每一个对象都有一个引用计数的值，当有引用的时候，这个值会增加，引用他的对象被删除时，这个值减小，引用计数的值为0时，该对象生命结束，python会把这段内存自动回收。（缺点，循环引用，如果l1和l2相互引用，没用其他的对象引用他们，这两段内存永远无法被回收）</p>\n<h2> 猴子补丁</h2>\n<p>在运行期间动态修改一个类或模块，比较灵活？</p>\n<p><strong>为什么要用猴子补丁：</strong></p>\n<p>引用通用库里的模块，又想丰富模块的功能，就可以用猴子补丁。</p>\n<h2> 参数，传参</h2>\n<h3> 位置参数和关键字参数的区别</h3>\n<p>*args一定要在**kwargs前面</p>\n<h3> *args和**kwargs的含义</h3>\n<p>不知道向函数传递多少参数时，比如传递一个列表或元组，就使用*args</p>\n<p>def func(*args):…</p>\n<p>Func(1,2,3,4,5)</p>\n<p>不知道该传递多少关键字参数时，使用**kwargs来收集关键字参数（keyword argument）</p>\n<p>def func(**kwargs):…</p>\n<p>Func(a=1,b=2,c=3)</p>\n<h2> 全局变量和局部变量</h2>\n<h2> 常用方法</h2>\n<h3> join()和split()</h3>\n<p>join()，把指定的字符串添加到字符串中，也可以把join后面带的一个含字符串的列表用指定的字符串连接起来</p>\n<p>split()，把字符串用指定字符分割，结果是一个列表</p>\n<h3> strip(), lstrip(), rstrip()</h3>\n<p>移除字符串两边的空格</p>\n<h3> is家族 检查字符串…..</h3>\n<p>islower(), isupper(), istitle()…</p>\n<p>isalnum(), isdigit(), isnumeric(), isdecimal()…</p>\n<h3> pass</h3>\n<p>比如函数没想好怎么写的时候可以用来在函数中占位，保证语法正确</p>\n<p>continue直接跳到下一个循环，pass则是占位，虽然什么都不会发生，但是如果后面语句的话这些语句会继续运行</p>\n<h3> yield</h3>\n<p>1.保存当前运行状态（断点），然后暂停执行，即将函数挂起</p>\n<p>2.将yeild关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用，当使用next()、send()函数让函数从断点处继续执行，即唤醒函数。</p>\n<h3> match()和search()</h3>\n<p>match()检测RE是不是在字符串开始位置匹配，只有在0匹配成功才返回True，search()会扫描整个字符串查找有无匹配</p>\n<h2> 模块和包</h2>\n<p>模块：python中包含并有组织的代码片段，xxx.py的xxx就是模块名</p>\n<p>包：模块之上的有层次的目录结构，定义了由很多模块或很多子包组成的应用程序执行环境。包是一个包含__init__.py文件和若干模块文件的文件夹。</p>\n<p>库：具有相关功能模块的集合，python有很多标准库、第三方库…</p>\n<h2> 闭包</h2>\n<p>闭包使得局部变量在函数外被访问成为可能。</p>\n<h2> python运算符（7）</h2>\n<p>算术、关系、赋值、逻辑、位、成员、身份运算符</p>\n<h2> 多进制数字</h2>\n<p>0b二进制（bin），0o八进制，0x十六进制</p>\n<h2> Python标准数据类型（5）</h2>\n<p>Numbers数字，Strings字符串，Lists列表，Tuples元组，Dictionary字典</p>\n<p>他们的一些特点：</p>\n<p>元组解封装</p>\n<p>Namedtuple：（从collections模块中导入）能够用标签获取一个元组的元素。</p>\n<p>集合：无序且元素不重复</p>\n<h2> PYTHONPATH变量是什么</h2>\n<p>Python中的环境变量，用于在导入模块的时候搜索路径。因此它必须包含Python源库目录以及含有Python源代码的目录。</p>\n<h2> 生成器generator和迭代器iterator</h2>\n<h3> 生成器</h3>\n<p>生成器是一种特殊迭代器。生成一系列的值用于迭代，在for循环的过程中不断计算出下一个元素并在恰当的条件结束循环</p>\n<p>使用了yield的函数，返回迭代器</p>\n<h3> 迭代器</h3>\n<p>迭代器是访问集合元素的一种方式，他的对象从集合的第一个元素开始访问，直到所有元素被访问完结束，用iter()创建迭代器，调用next()函数获取对象（迭代只能往前不能后退）。</p>\n<p>两者区别：</p>\n<p>\\1.   创建/生成，生成器创建一个函数，用关键字yield生成/返回对象；迭代器用内置函数iter()和next()</p>\n<p>\\2.   生成器中yield语句的数目可以自己在使用时定义，迭代器不能超过对象数目</p>\n<p>\\3.   生成器yield暂停循环时，生成器会保存本地变量的状态；迭代器不会使用局部变量，更节省内存</p>\n<h3> 生成器和函数：</h3>\n<p>生成器和函数的主要区别在于函数 return a value，生成器 yield a value同时标记或记忆 point of the yield 以便于在下次调用时从标记点恢复执行。 yield 使函数转换成生成器，而生成器反过来又返回迭代器。</p>\n<h2> 参数传递机制</h2>\n<p>如果实际参数的数据类型是可变对象（列表、字典），则函数参数的传递方式将采用引用传递方式。如果是不可变的，比如字符串、数值、元组，他们就是按值传递。</p>\n<h2> Python对象基本要素（3），id，type和value</h2>\n<p>==比较value，即值，is比较id</p>\n<h2> __new__和__init__的区别？</h2>\n<p><strong>new</strong>:创建对象时调用，会返回当前对象的一个实例</p>\n<p><strong>init</strong>:创建完对象后调用，对当前对象的一些实例初始化，无返回值</p>\n<p>调用顺序：先调用__new__生成一个实例再调用__init__方法对实例进行初始化，比如添加属性。</p>\n<h2> 全局变量和局部变量</h2>\n<h2> 主（main）函数的作用</h2>\n<p>作为整个程序文件的入口。</p>\n<p>调试代码的时候，在if <strong>name</strong> == ‘<strong>main</strong>’中加入一些我们的调试代码，我们可以让外部模块调用的时候不执行我们的调试代码，但是如果我们想排查问题的时候，直接执行该模块文件，调试代码能够正常运行！</p>\n<h2> cookie和session的关系和区别</h2>\n<p>cookie保存在浏览器端，session保存在服务器端，但是为了区分不同的客户端，服务器会在浏览器中发送一个对应的sessionid保存到cookies中，下次浏览器请求服务器的时候会将sessionid一并发送给服务器。所以session机制依赖于cookie机制</p>\n<p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>\n<p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。</p>\n<p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。</p>\n<p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>\n<p>5、建议：</p>\n<p>将登陆信息等重要信息存放为SESSION</p>\n<p>其他信息如果需要保留，可以放在COOKIE中</p>\n<h2> 什么是Python的命名空间？</h2>\n<p>在Python中，所有的名字都存在于一个空间中，它们在该空间中存在和被操作——这就是命名空间。它就好像一个盒子，每一个变量名字都对应装着一个对象。当查询变量的时候，会从该盒子里面寻找相应的对象。</p>\n<h1> 计算机网络</h1>\n<h2> 连不上网可能哪里有问题</h2>\n<h2> 网络模型</h2>\n<h3> 七层网络模型</h3>\n<p>\\1.   物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。</p>\n<p>\\2.   数据链路层</p>\n<p>\\3.   网络层   IP</p>\n<p>\\4.   传输层   TCP、UDP</p>\n<p>\\5.   会话层</p>\n<p>\\6.   表示层   对底层命令和数据进行解释，</p>\n<p>\\7.   应用层   应用层协议：DNS、HTTP、SMTP等，用户在这一层与网络进行交互</p>\n<h3> TCP/IP四层</h3>\n<p>\\1.   网络接口层</p>\n<p>\\2.   网际层   IP</p>\n<p>\\3.   运输层   TCP、UDP</p>\n<p>\\4.   应用层   HTTP、SMTP、FTP等</p>\n<h3> 五层协议</h3>\n<p>\\1.   物理层   实现相邻计算机之间比特流的透明传递</p>\n<p>\\2.   数据链路层   将IP数据报组装成帧，控制信息在相邻两节点的链路上进行传输</p>\n<p>\\3.   网络层   IP，为不同主机分组交换信息服务</p>\n<p>\\5.   运输层   TCP、UDP，为两台主机之间的通信提供通用的数据传输服务</p>\n<p>\\4.   应用层   HTTP、SMTP、FTP等</p>\n<h2> HTTP</h2>\n<h3> HTTP和HTTPS的区别</h3>\n<p>https需要到ca申请证书，因而需要一定费用</p>\n<p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议，成本较高</p>\n<p>http的连接很简单，是无状态的，https协议是由ssl+http协议构建的可进行加密串苏，身份验证的网络协议</p>\n<p>http用的端口是80，https用的端口是443</p>\n<h3> HTTP请求报文的内容</h3>\n<p>请求行包括请求方法（GET、POST…），URL，HTTP协议版本</p>\n<p>请求头。格式为，头部字段：值。常见头部字段有…</p>\n<p>请求正文</p>\n<h3> HTTP头部有哪些主要字段</h3>\n<p>Host：接受请求的服务器地址，可以是IP或者是域名</p>\n<p>User-Agent：发送请求的应用名称</p>\n<p>Connection：指定与连接相关的属性，例如（Keep_Alive，长连接）</p>\n<p>Accept-Charset：通知服务器端可以发送的编码格式</p>\n<p>Accept-Encoding：通知服务器端可以发送的数据压缩格式</p>\n<p>Accept-Language：通知服务器端可以发送的语言</p>\n<h3> HTTP响应报文</h3>\n<p>状态行：协议版本，状态码，状态码描述</p>\n<p>响应头</p>\n<p>响应正文</p>\n<h3> HTTP响应头主要字段</h3>\n<p>Server：服务器应用软件的名称和版本</p>\n<p>Content-Type：响应正文的类型</p>\n<p>Content-Length：响应正文的长度</p>\n<p>Content-Charset：响应正文所使用的编码</p>\n<p>Content-Encoding：响应正文使用的数据压缩格式</p>\n<p>Content-Language：响应正文使用的语言</p>\n<h3> HTTP状态码</h3>\n<p>1xx 服务器收到请求，需要请求者继续执行操作</p>\n<p>2xx ok，请求成功</p>\n<p>3xx 重定向，资源已经重新分配</p>\n<p>4xx 客户端请求错误，403 forbidden请求资源被拒绝，404 not found找不到请求资源</p>\n<p>5xx 服务器错误，500 服务器故障，503 服务器超载或停机维护</p>\n<p>200，请求成功</p>\n<p>301，资源（网页等）被永久转移到其它URL</p>\n<p>302，资源临时移动</p>\n<p>403，forbidden，服务器理解请求客户端的请求，但是拒绝执行此请求。请求资源被拒绝，通常原因是服务器上某些文件或目录设置了权限，客户端权限不够</p>\n<p>404，not found，用户输入错误的链接，该链接指向的网页不存在。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p>\n<p>500，internal server error 服务器内部错误（比如浏览器代理除了问题，ip，端口不对等）该状态码表明服务器端在执行请求时发生了错误。也有可能是Web应用存在的bug或某些临时的故障。</p>\n<p>502，Bad Gateway，作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</p>\n<p>503，服务器超载或停机维护</p>\n<p>504，Gateway Timeout网关超时 服务器作为网关或代理，未及时从上游服务器接收请求。</p>\n<h3> HTTP劫持</h3>\n<p>在正常的数据流中插入特定的网络数据报文，让客户端解释错误的数据，并以弹出新窗口的形式向使用者展示小广告或网页内容</p>\n<p>步骤：</p>\n<p>在TCP连接中标识HTTP协议链接；</p>\n<p>改HTTP响应体；</p>\n<p>将篡改后的数据包抢先回发到用户，这样后面的数据包在到达后会被直接丢弃。而客户端显示改后的网页</p>\n<p>防范：</p>\n<p>事前加密：HTTPS，防止明文传输被挟持，（但防不了DNS挟持）</p>\n<p>事中加密：拆分HTTP请求数据包，运营商的旁路设备没有完整的TCP/IP协议栈，不能标记，web服务器有完整的TCP/IP协议栈，能把接收到的数据包拼成完整的HTTP请求，不影响服务</p>\n<p>事后屏蔽：前端显示HTTP时对内容进行检测，在DOM结构发生变化时触发回调</p>\n<p>DNS劫持：通过劫持DNS服务器，获得某域名的解析记录控制权，修改此域名的解析结果。把原来对A域名的访问转入B域名，返回错误的查询结果。可能是一些产品的持续的推广</p>\n<p>区别：DNS劫持倾向于持续性，访问一个界面时强行推送广告，HTTP劫持频率多变，劫持过程也非常快，一般多出现于网站小尾巴</p>\n<p>HTTPS挟持：伪造证书来进行挟持….</p>\n<h3> 跨域</h3>\n<p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器施加的安全限制。</p>\n<p>同源：域名，协议，端口均相同</p>\n<p>即浏览器只能执行相同协议、相同域名、相同端口下的网站脚本，执行的时候如果网站的脚本不属于现在这个界面，就不会执行</p>\n<h3> HTTP请求响应中断原因</h3>\n<p>网断了，网络阻塞，请求超时，浏览器出问题，服务器出问题</p>\n<h4> 如何检查</h4>\n<p>检查网络，检查本地…</p>\n<h3> HTTP有几种请求方式</h3>\n<p>HTTP1.0 定义了三种请求方法： GET, POST 和HEAD方法。</p>\n<p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和CONNECT 方法。</p>\n<h3> GET和POST的区别</h3>\n<p>GET的参数放在url中，返回服务器拿数据；POST在request body里自带一个参数去服务器拿指定的数据；</p>\n<p>因为GET的参数暴露在url上，所以安全性不能保证，也有长度的限制</p>\n<h4> 应用场景</h4>\n<p>GET用来查询数据，POST用来修改数据，以及其他更需要安全性的场景如密码</p>\n<h2> DNS的查找过程（应用层）</h2>\n<p>用于将用户提供的主机名解析为ip地址</p>\n<p>\\0.   浏览器从接收到的url中抽取出域名地址，将域名传给DNS应用的客户端</p>\n<p>\\1.   检查浏览器缓存、本地hosts文件是否有这个网址的映射，如果有，就调用这个IP地址映射</p>\n<p>\\2.   如果没有，则查找本地DNS解析器缓存是否有这个网址的映射，如果有，返回映射</p>\n<p>\\3.   如果没有，则向DNS服务器提出查询请求</p>\n<p>\\4.   服务器接收到查询时，查询本地配置区域资源，查到就返回结果</p>\n<p>\\5.   如果查不到，但服务器缓存了此网址映射关系，返回查找结果</p>\n<p>\\6.   如果没有缓存，就继续间请求转发至上一级DNS服务器进行查询。最终将解析结果依次返回本地DNS服务器，本地DNS服务器在返回给客户端，并把这个映射存到服务器的缓存中</p>\n<h2> IP</h2>\n<h3> IP地址分类</h3>\n<p>A类：1字节（8位）网络号，3字节（24位）主机号。网络号第一位固定为0，剩下7位随便用。保留地址0（00000000）表示“本文网络”，127（01111111）表示本地环回软件测试</p>\n<p>B类：2字节（16位）网络号，2字节（16位）主机号。网络号前两位固定为10，剩下16位随便用。保留地址</p>\n<p>C类：3字节（24位）网络号，1字节（8位）主机号。前三位固定为110，剩下21位可用。</p>\n<p>D类：</p>\n<p>E类：</p>\n<p>主机号全是0的IP地址表示是“本主机”所连接到的单个网络。</p>\n<p>主机号全是1的IP地址表示是该网络上的所有主机。</p>\n<p>A类地址的表示范围是：0.0.0.0-126.255.255.255，默认网络掩码为：255.0.0.0，A类地址分配给规模特别大的网络使用，</p>\n<p>B类地址表示范围是：128.0.0.0-191.255.255.255，默认网络掩码为：255.255.0.0，B类地址分配给一般的中型网络</p>\n<p>C类地址的表示范围是192.0.0.0-223.255.255.255，默认网络掩码是：255.255.255.0，C类地址分配给小型网络，如局域网</p>\n<p>D类地址称为广播地址，共特殊协议向选定的节点发送信息使用。</p>\n<h3> ipv4和ipv6的转换。ipv4到ipv6的过渡手段</h3>\n<p>ipv4和ipv6的过渡是一个循序渐进的过程，在用户体验IPv6带来的好处的同时仍能与网络中其余的IPv4用户通信。</p>\n<p>主流技术：1. 双栈策略：（最直接方式）在IPv6结点中加入IPv4协议栈。这种具有双协议栈的结点称作“IPv6/v4结点”，这些结点可以使用IPv4与IPv4结点互通，也可以直接使用IPv6与IPv6结点互通。</p>\n<p>\\2. 隧道技术：（为解决局部纯IPv6网络与IPv4骨干隔离形成的孤岛问题，用隧道技术的方式解决）利用穿越现存IPv4互联网的隧道技术将孤岛连接起来，逐步扩大IPv6的实现范围。在隧道的入口处，路由器将IPv6的数组分组封装进入IPv4中，IPV4分组的源地址和目的地址分别是隧道入口和出口的IPV4地址。在隧道的出口处再将IPV6分组取出转发给目的节点。</p>\n<p>隧道技术在实践中有四种具体形式：构造隧道、自动配置隧道、组播隧道以及6to4。</p>\n<p>\\3. 隧道代理TB，Tunnel Broker。（目的是简化隧道的配置，提供自动的配置手段），TB可以看作是一个虚拟的IPv6 ISP，它为已经连接到IPv4网络上的用户提供连接到IPv6网络的手段，而连接到IPv4网络上的用户就是TB的客户。</p>\n<p>\\4. 协议转换技术。其主要思想是在V6节点与V4节点的通信时需借助于中间的协议转换服务器，此协议转换服务器的主要功能是把网络层协议头进行V6/V4间的转换，以适应对端的协议类型。</p>\n<p>\\5. SOCKS64。</p>\n<p>在客户端里引入SOCKS库，它处于应用层和socket之间，对应用层的socket API和DNS域名解析API进行替换。</p>\n<p>另一种是SOCKS网关。</p>\n<p>\\6. 传输层中继</p>\n<p>与SOCKS64的工作机理相似，只不过是在传输层中继器进行传输层的“协议翻译”</p>\n<p>\\7. 应用层代理网关（ALG）</p>\n<p>类似。在应用层进行协议翻译。</p>\n<h2> ARP协议</h2>\n<p>Address Resolution <a href=\"https://www.nowcoder.com/jump/super-jump/word?word=Proto\" target=\"_blank\" rel=\"noopener noreferrer\">Proto</a>col，即地址解析协议， 用于实现从 IP 地址到 MAC 地址的映射，即询问目标IP对应的MAC地址</p>\n<p>\\1.   查主机缓存里（的ARP列表里）有没有记录这个IP和MAC地址的对应</p>\n<p>\\2.   有就直接发送，没有就向本网段所有主机发送广播，发送自己的IP地址和MAC地址，询问谁是这个IP地址，这个地址的MAC地址是什么</p>\n<p>\\3.   网络中的其他主机收到之后对照被询问的地址和自己能不能对上，是的话就从数据包中提取源主机的IP和mac地址写入自己的ARP列表，并将自己的MAC地址写入响应包，回复源主机</p>\n<p>\\4.   源主机收到ARP响应包之后，就可以用这些信息发送数据</p>\n<p><strong>为什么要用ARP****协议</strong>：OSI把网络分成7层，每层之间不直接交流，只有特定接口有交流。IP在第三层网络层，MAC地址工作在第二层数据链路层。协议发包时需要封装IP地址和MAC地址，但只知道IP，又不能跨层直接找，所以得用ARP协议的服务帮助获取目的节点的MAC地址</p>\n<h2> 浏览器中输入一个URL后，按下回车后发生了什么</h2>\n<p>URL，统一资源定位符，l简单点就是网址=ip或域名 + 端口号 + 资源位置 + 参数 + 锚点</p>\n<p>1．输入一个网址之后，首先浏览器通过查询DNS，查找这个URL的IP地址，（通过层层向上级DNS服务器查找直到找到对应URL的IP地址）</p>\n<p>2．得到目标服务器的IP地址及端口号（http 80端口，https 443端口），会调用系统库函数socket，请求一个TCP流套接字。客户端向服务器发送HTTP请求报文</p>\n<p>（1）应用层：客户端发送HTTP请求报文。</p>\n<p>（2）传输层：（加入源端口、目的端口）建立连接。实际发送数据之前，三次握手客户端和服务器建立起一个TCP连接。</p>\n<p>（3）网络层：（加入IP头）路由寻址。</p>\n<p>（4）数据链路层：（加入frame头）传输数据。</p>\n<p>（5）物理层：物理传输bit。</p>\n<p>3．服务器端经过物理层→数据链路层→网络层→传输层→应用层，解析请求报文，发送HTTP响应报文。</p>\n<p>4．关闭连接，TCP四次挥手。</p>\n<p>5．客户端解析HTTP响应报文，浏览器开始显示HTML</p>\n<h3> 网页卡顿原因</h3>\n<p>网速慢、带宽不足、硬件配置低、内存被占满。</p>\n<p>JS脚本过大，阻塞了页面的加载。</p>\n<p>网页资源过多、接受数据时间长、加载某个资源慢。</p>\n<p>DNS解析速度。</p>\n<h3> 一般怎么检查</h3>\n<p>硬件问题：检查网线或者无限网卡有没有插好，有没有连上路由器，就是底层是不是联通状态；</p>\n<p>软件问题：查看是否有对应的驱动，服务器好不好，DNS对不对，或者可能是代理没关</p>\n<h3> 当网页加载很慢的时候，应如何分析其原因并解决问题？</h3>\n<p>http请求次数太多</p>\n<p>资源过大，资源过多</p>\n<p>JS脚本过大</p>\n<p>网速慢</p>\n<p>…</p>\n<h3> 给一个网址先解析什么后解析什么（域名解析顺序）？</h3>\n<p>域名分层：从右到左分别为顶级域名、二级域名…最左为主机名（服务器名）。比如<a href=\"http://www.baidu.xn--comcom-rw6o/\" target=\"_blank\" rel=\"noopener noreferrer\">www.baidu.com的com</a>为顶级域名，email.tsinghua.edu.cn中cn为顶级域名，为中国国家域名，edu为教育科研部门域名，email为服务器名。</p>\n<p>域名解析时，优先查找匹配的子域名，如果子域名存在，则从子域名的配置文件查询解析结果，如果子域名不存在，就从上一级的配置文件查询结果</p>\n<h2> 高并发</h2>\n<p>响应时间、吞吐量、并发用户数…</p>\n<p>测试多用户同时访问，访问量的缓慢增加/迅速增加…</p>\n<p>大量相同类型访问，大量不同类型的访问</p>\n<p>服务器角度，能够承受多大的压力（？），客户端角度，数据能否成功得到需要的信息，响应时间怎么样</p>\n<p>实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息</p>\n<p>一方面保证数据不丢失、一方面保证性能</p>\n<h2> TCP、UDP</h2>\n<h3> TCP连接三次握手的过程</h3>\n<p>初始状态客户端CLOSED，服务器LISTEN</p>\n<p>\\1.   客户端A向服务器B发送SYN数据包（SYN, x:0）请求连接。此时状态为SYN_SENT，表示客户端已发送SYN报文。</p>\n<p>\\2.   服务器B收到，发送SYN/ACK数据包（SYN/ACK, y:x+1）回应。此时服务器状态由LISTEN（服务器socket处于监听状态，可以接受连接）变为SYN_RECV，表示收到SYN报文</p>\n<p>\\3.   客户端A收到并发出确认ACK（ACK, x+1:y+1），连接成功。双方状态ESTABLISHED</p>\n<h3> TCP四次挥手的过程</h3>\n<p>初始状态双方ESTABLISHED</p>\n<p>\\1. 客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。客户端FIN_WAIT_1。表示主动关闭连接，向对方发送了FIN，进入FIN_WAIT_1，等待对方的确认</p>\n<p>\\2. 服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。客户端FIN_WAIT_2，表示半连接，而服务器可能还有数据要发，这边稍后关闭。服务器CLOSE_WAIT。</p>\n<p>\\3. 服务器B关闭与客户端A的连接，发送一个FIN给客户端A。服务器LAST_ACK，等待对面的ACK报文</p>\n<p>\\4. 客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。客户端进入TIME_WAIT，表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。</p>\n<h4> 为何TIME_WAIT：</h4>\n<p>防止服务器在处于LAST_ACK状态下未收到ACK报文而重发FIN报文，这个TIME_WAIT 状态的作用就是用来重发可能丢失的ACK报文。</p>\n<h3> TCP和UDP的特点</h3>\n<p>TCP面向连接，UDP无连接</p>\n<p>TCP可靠，保证安全，UDP尽最大努力交付，不保证安全</p>\n<p>TCP是点对点的，UDP可以一对一 一对多 多对多 多对一</p>\n<p>TCP面向字节流，UDP无拥塞控制</p>\n<p>TCP开销较大，UDP开销小</p>\n<h3> TCP、UDP的应用场景</h3>\n<p>UDP使用场景 DNS协议（因为用UDP快），看视频、发语音、QQ聊天、多媒体教室屏幕广播</p>\n<p>TCP使用场景 HTTP协议，QQ传文件，邮件，登陆</p>\n<h3> TCP怎么实现可靠传输</h3>\n<p>确认和重传机制：建立连接、发送包时的确认，运输过程中校验失败、丢包或延时发送端重传</p>\n<p>数据<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener noreferrer\">排序</a>：把数据分成很多包，按顺序进行传输</p>\n<p>流量控制：滑动窗口和计时器</p>\n<p>拥塞控制：慢启动、拥塞避免、快速重传、快速恢复</p>\n<h3> 流量控制</h3>\n<p>作用于接收方，控制发送者的发送速度从而使接收者来得及接收，防止分组丢失的。</p>\n<p>由滑动窗口实现</p>\n<h4> 滑动窗口</h4>\n<p>TCP进行流量控制的方式，接收方通过告诉对方自己的窗口大小，从而控制发送方的发送速度，以防止由于发送方发送速度过快而导致自己被淹没的现象</p>\n<h4> 计时器</h4>\n<p>发送端收到为0的窗口后开启一个计时器，时间到了之后发包询问现在的滑动窗口，防止死锁（接收端发回的不为0的窗口的包丢失，双方相互等待）</p>\n<h3> 拥塞控制</h3>\n<p>作用于网络，防止过多的数据注入到网络中，避免出现网络负载过大的情况。</p>\n<p>拥塞：对网络中某一资源的需求超过了该资源所能提供的可用部分，影响到网络性能</p>\n<p>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</p>\n<h4> 拥塞窗口</h4>\n<p>发送方使用的流量控制，另外考虑到接受方的接收能力，发送窗口可能小于拥塞窗口。</p>\n<h4> 慢启动和拥塞避免</h4>\n<p>慢启动：不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。</p>\n<p>拥塞窗口一开始设为1 ，每收到一次确认，就让拥塞窗口变为原来的两倍，当窗口值为16时（慢启动门限），改为加法增大，每次+1，直到网络拥塞。拥塞时让新的慢启动门限设为拥塞时的一半，并把拥塞窗口置为1，再让他重复，这时一瞬间会将网络数据量大量降低。</p>\n<p>拥塞避免：拥塞避免<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。</p>\n<h4> 快重传和快恢复</h4>\n<p>快重传：接收方每收到一个失序的报文段（收完2后就收到了4说明3丢了）就立即发出包2的重复确认，这样可以让发送方尽早知道丢包了。</p>\n<p>发送端连续收到三个重复确认就立即重传3</p>\n<p>快恢复：发送方收到3个连续确认时，把慢开始门限减半，把拥塞窗口的值置为慢开始门限的一半，实行拥塞避免<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>，每次确认收到后+1</p>\n<h1> 操作系统</h1>\n<p>操作系统（Operating System，OS）：</p>\n<p>控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境的程序集合。</p>\n<p>为用户提供服务，使用户能在计算机上使用各种应用程序来操作计算机资源</p>\n<p>是用户和计算机硬件系统之间的接口</p>\n<p>处理机：</p>\n<p>计算机系统中存储程序和数据，并按照程序规定的步骤执行指令的部件。包括中央处理器、主存储器、I/O接口，处理器+外围设备（鼠标键盘之类）构成完整的操作系统</p>\n<p>程序是描述处理机完成某项任务的指令序列。</p>\n<p>指令则是处理机能直接解释、执行的信息单位。</p>\n<p>中央处理器（CPU，Central Processing Unit）：</p>\n<p>是一块超大规模的集成电路，是一台计算机的运算核心和控制核心。它的功能主要是解释计算机指令以及处理计算机软件中的数据。</p>\n<p>内核：</p>\n<p>操作系统的最基本部分、核心，决定一个程序在什么时候对某部分硬件操作多长时间</p>\n<p>提供操作系统的最基本的功能，是操作系统工作的基础，它负责管理系统的进程、内存、设备驱动程序、文件和网络系统，决定着系统的性能和稳定性</p>\n<h2> 操作系统的四个特性</h2>\n<p>并发：同一段时间内多个程序执行（与并行区分，并行指的是同一时刻有多个事件，多处理器系统可以使程序并行执行）</p>\n<p>共享：系统中的资源可以被内存中多个并发执行的进线程共同使用</p>\n<p>虚拟：通过分时复用（如分时系统）以及空分复用（如虚拟内存）技术把一个物理实体虚拟为多个</p>\n<p>异步：系统进程用一种走走停停的方式执行，（并不是一下子走完），进程什么时候以怎样的速度向前推进是不可预知的</p>\n<h2> 操作系统的目标和功能</h2>\n<p>处理机管理：</p>\n<p>处理机的运行以进程（或线程）为基本单位，对处理机的管理可归结为对进程的管理。</p>\n<p>管理进程的资源共享：进程控制、进程同步、进程通信、死锁处理、处理机调度</p>\n<p>存储器管理：</p>\n<p>给多道程序的运行提供良好环境，方便用户使用+提高内存利用率</p>\n<p>内存分配、地址映射、内存保护与共享、内存扩充</p>\n<p>文件管理：</p>\n<p>计算机中的信息以文件形式存在。</p>\n<p>文件存储空间管理、目录管理、文件读写管理和保护</p>\n<p>设备管理：</p>\n<p>完成用户的I/O请求，方便用户使用各种设备，并提高设备利用率</p>\n<p>缓冲管理、设备分配、设备处理、虚拟设备</p>\n<h2> 线程和进程</h2>\n<p>进程是操作系统进行资源分配和调度的最小单位，多个进程之间相互独立，如果一个进程崩溃，不会影响其他进程；</p>\n<p>线程是CPU进行分配和调度的最小单位（或者说是进程的最小单位，进程的一部分），一个进程下可以有很多个线程共享该进程的所有资源，如果一个线程崩溃，整个进程就会崩溃。</p>\n<h3> 进程和线程的区别</h3>\n<p>进程是操作系统进行资源分配和调度的最小单位，每个进程有自己的一部分独立的资源，如果一个进程崩溃，不会影响其他进程；线程是CPU进行分配和调度的最小单位，一个进程下可以有很多个线程共享该进程的所有资源，如果一个线程崩溃，整个进程就会崩溃。</p>\n<p>线程一般是共享资源，在创建、或是进行调度的时候开销比进程小很多，通信同步也比较方便</p>\n<p>通信方面进程间通讯需要同步或互斥手段的辅助，来保证数据的一致性，线程间可以直接读/写进程数据段（如全局变量）来进行通信。</p>\n<h3> 简述多进程和多线程</h3>\n<h3> 线程间通讯和进程间通讯的方法</h3>\n<p><strong>线程间：互斥锁、信号量、临界区…</strong></p>\n<p>互斥量（全局变量）：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。</p>\n<p>信号量：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</p>\n<p>临界区：是一个访问共用资源的程序片段，而这些共用资源又无法同时被多个线程访问的特性。当有线程进入临界区段时，其他线程或是进程必须等待，有一些同步的机制必须在临界区段的进入点与离开点实现，以确保这些共用资源是被互斥获得使用。</p>\n<p><strong>进程间：共享内存、信号量、管道、消息队列…</strong></p>\n<p>共享内存就是映射一段能被其它进程访问的内存，这段共享内存由一个进程创建，但是多个进程可以访问。读写操作时需要用同步互斥的工具，保证在一个进程对这段内存进行访问的时候其他进程不能同时来</p>\n<p>信号量是一个计数器，用来控制多个进程对资源的访问，它通常作为一种锁机制。</p>\n<p>管道是一种半双工的通信方式，数据只能单项流动，并且只能在具有亲缘关系的进程间流动，进程的亲缘关系通常是父子进程。Pipe（管道），FIFO（有名管道）。调用管道，在内核里开辟一块缓冲区（一个共享文件）来进行进程间通信，有一个读端和一个写端（单向通信）</p>\n<p>消息队列是消息的<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8\" target=\"_blank\" rel=\"noopener noreferrer\">链表</a>，存放在内核中并由消息队列标识符标识。</p>\n<h3> 进程同步</h3>\n<p>目的：对多个相关进程在执行顺序上进行协调，使并发执行的进程可以有效的共享资源和相互合作，保证程序执行的可再现性。</p>\n<h3> 进程死锁</h3>\n<p>多个并发的进程中，如果每个进程都持有某种资源由等待其他进程释放它现在保持的资源，这些资源都只允许一个进程占用，结果两个进程都不能继续执行，也不会释放自己占有的资源，所以这种双方循环等待的现象回无限期持续，发生死锁。</p>\n<p><strong>原因（<strong><strong>4</strong></strong>）</strong></p>\n<p>互斥条件：资源不能共享，只能一个进程用</p>\n<p>请求与保持条件：已经得到资源的进程可以再次申请新的资源</p>\n<p>非剥夺条件：已经分配的资源不能从相应进程中强制剥夺</p>\n<p>循环等待条件：系统中若干进程形成环路，环路中的每个进程都在等待相邻进程正占用的资源</p>\n<p><strong>死锁处理</strong></p>\n<p>预防：破环四个原因中的一个或多个，但会影响到资源利用率及吞吐量</p>\n<p>避免：在资源的动态分配中防止系统进入不安全状态</p>\n<p>检测：死锁发生后，用一定的<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>进行检测，并确定相关死锁相关的资源和进程，采取方法清楚死锁。</p>\n<p>解除：对死锁相关进程，通过撤销或挂起的方式，释放一些资源</p>\n<h3> 处理机调度</h3>\n<h3> 常用的调度<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a></h3>\n<p>先来先服务调度：按进程到达的先后顺序依次调度</p>\n<p>短作业优先调度：选择队列中估计时间较短的先进行处理</p>\n<p>优先权调度：为不同队列设不同的优先级，等待时间长的适当提高优先级</p>\n<p>时间片轮转：按进程到达的先后顺序放入队列，给队首进程分配CPU时间片，用完后计时器发出中断，暂停当前进程并将其放到队伍尾部，循环。</p>\n<h3> 线程状态（5）</h3>\n<p>创建：new Thread(r)创建，有了相应的内存空间和其他资源，但还未开始执行</p>\n<p>就绪：start()方法启动，进入线程队列排队，等待CPU服务</p>\n<p>运行：获得处理器资源</p>\n<p>阻塞：需要进行耗时的输入输出操作时，要等阻塞清除才能进入队列排队</p>\n<p>终止：stop()、destory()或run()结束后，不在具有继续运行的能力</p>\n<h3> 进程三态的转化（也有说5态的，和线程差不多）</h3>\n<p>运行状态：进程正在处理机上运行。在单处理机环境下，每一时刻最多只有一个进程处于运行状态。</p>\n<p>就绪状态：进程已处于准备运行的状态，即进程获得了除处理机之外的一切所需资源，一旦得到处理机即可运行。（只缺处理机这个资源）</p>\n<p>阻塞状态，又称等待状态：进程正在等待某一事件而暂停运行，如等待某资源为可用（不包括处理机）或等待输入/输出完成。即使处理机空闲，该进程也不能运行。（缺除了处理机之外的其他资源）</p>\n<h4> 四个转换的过程</h4>\n<h3> 僵尸进程</h3>\n<p>僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵尸进程。</p>\n<h3> 孤儿进程</h3>\n<p>孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</p>\n<h2> 内存</h2>\n<h3> 内存分区</h3>\n<p>（高地址）</p>\n<p>栈区：编译器自动分配，存放函数的参数值、局部变量的值，系统自动回收用完的内存</p>\n<p>堆区：一般由程序员分配（malloc申请内存和free释放内存），如果不释放内存容易因引起内存泄漏</p>\n<p>全局区（静态区）：静态变量和全局变量，内存被分配后直到程序结束之后才释放</p>\n<p>常量区：（只读）存一些字符串常量、数组名等</p>\n<p>代码区：（只读）存一些CPU执行的一些机器指令</p>\n<p>（低地址）</p>\n<h4> 堆和栈的区别</h4>\n<p>栈：先进后出，生长方向向下，系统自动分配回收，高效快速；但有限制，数据不灵活。申请内存时，只要栈的剩余空间大于所申请的空间，系统将为程序员提供内存，否则报栈溢出。</p>\n<p>堆：向上生长，需要程序员自己申请并指明大小。堆里分布的内存是不连续的。操作系统应该有记录空闲内存地址的<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8\" target=\"_blank\" rel=\"noopener noreferrer\">链表</a>，申请内存时遍历<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8\" target=\"_blank\" rel=\"noopener noreferrer\">链表</a>，找第一个空间大于申请空间的堆节点，分配内存…</p>\n<p>把数据存到栈里比堆更快，因为系统会自动分配内存，堆需要自己分配和释放内存；另外访问堆的一个具体单元需要两次访问内存，一次获得指针，第二次才是真正的数据，而栈只要一次。</p>\n<h3> 缓冲区</h3>\n<p>又称缓存。在内存空间中预留一定的存储空间，用来缓冲输入输出的数据。</p>\n<p>原因：CPU直接从磁盘读数据速度慢，增加读写次数对磁盘性能会有影响；使用缓冲区减小读写次数，CPU对缓冲区的操作速度也远大于磁盘的操作速度，增加计算机的运行速度。</p>\n<h4> 缓冲区溢出</h4>\n<p>计算机向缓冲区填充数据的时候超出了缓冲区本身的容量，溢出的数据覆盖在合法数据上。导致程序崩溃、趁这个机会获取程序乃至系统的控制权。</p>\n<h3> 虚拟内存</h3>\n<p>相当于从逻辑上扩充内存容量，在程序装入的时候，只把程序的一部分装入内存，就启动程序执行，执行过程中，访问的信息不在内存里时，操作系统将需要的部分调入内存，并把暂时不适用的内容换到外存上，腾出内存空间。让应用程序认为他用了一个比实际内存大得多的存储器。</p>\n<p>虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。</p>\n<p>多次性、对换性、虚拟性</p>\n<h3> 内存泄漏</h3>\n<p>程序没有释放已经不再使用的内存，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，因此这段内存一直被占用，无法释放，造成空间的浪费。</p>\n<h4> 怎么查</h4>\n<p>\\1.   用封装的malloc函数，写代码时在malloc外封装一层，封装函数内打印一下malloc地址，free也是，然后运行时收集打印信息，可以用另外的脚本来分析内存的申请和释放是否一一对应。</p>\n<p>\\2. dmalloc库，第三个方案是valgrind工具 提一下常用的用法就行。</p>\n<h3> 内存溢出</h3>\n<p>要求分配的内存超过了系统能给我的，系统不能满足需求。内存泄漏的堆积如果不及时处理最终会导致内存溢出</p>\n<h3> 基本分页储存管理方式</h3>\n<p>把主存空间划分为大小相等且固定的块，作为主存的基本单位，每个进程也以块为单位进行划分，进程执行时，以块为单位逐个申请主存中的块空间。用页表记录分散的内存分布情况。</p>\n<p><strong>页表</strong>：</p>\n<p>用来记录逻辑地址和实际存储地址之间的映射关系，以实现从页号到物理块号的映射。</p>\n<p>访问分页系统中内存数据需要两次内存访问，一次从内存中访问页表，找到实际物理地址，第二次根据得到的物理地址访问内存</p>\n<p>页表储存在内存中。</p>\n<p>逻辑空间-&gt;页表-&gt;物理空间</p>\n<p><strong>快表机制：</strong></p>\n<p>访问内存数据的时候先在快表里查询，如果查到了就可以直接读取相应的物理块号，如果每找到再访问页表，得到物理地址并访问，同时把该页表中的该映射项添加到块表中</p>\n<p><strong>两级页表或多级页表</strong></p>\n<h3> 基本分段储存管理方式</h3>\n<p>分段管理：每个段内部连续内存分配，但段与段之间是离散的，因此会用到段表，记录每段在内存中的起始地址和该段长度。</p>\n<p>段表可以放在内存或寄存器中。</p>\n<h4> 分页和分段的比较</h4>\n<p>页是信息的物理单位，是出于系统内存利用率的角度提出的离散分配机制；</p>\n<p>段是信息的逻辑单位，每个段含有一组意义完整的信息，是出于用户角度提出的内存管理机制</p>\n<p>页的大小是固定的，由系统决定；</p>\n<p>段的大小是不确定的，由用户决定</p>\n<h3> 页面置换<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a></h3>\n<p>为什么：</p>\n<p>地址映射的过程中，如果页面中发现要访问的页面不在内存中，会产生缺页中断。此时操作系统必须在内存里选择一个页面把他移出内存，为即将调入的页面让出空间。选择淘汰哪一页的规则就是页面置换<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a></p>\n<p>分类：</p>\n<p><strong>最佳置换<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>（理想）</strong>：将当前页面中在未来最长时间内不会被访问的页置换出去</p>\n<p><strong>先进先出</strong>：淘汰最早调入的页面</p>\n<p><strong>最近最久未使用 LRU</strong>**：**每个页面有一个t来记录上次页面被访问直到现在，每次置换时置换t值最大的页面（用寄存器或栈实现）</p>\n<p><strong>时钟<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>clock</strong>（也被称为最近未使用<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>NRU）：页面设置访问为，将页面链接为一个环形列表，页面被访问的时候访问位设为1。页面置换的时候，如果当前指针的访问位为0，置换，否则将这个值置为0，循环直到遇到访问位为0的页面。</p>\n<p><strong>改进型Clock</strong>**<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>**：在clock<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>的基础上添加一个修改位，优先替换访问位和修改位都是0的页面，其次替换访问位为0修改位为1的页面。</p>\n<p><strong>最少使用<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">算法</a>LFU</strong>：设置寄存器记录页面被访问次数，每次置换当前访问次数最少的</p>\n<h2> 用户态 内核态</h2>\n<p>内核态：cpu可以访问内存的所有数据，包括外围设备，例如硬盘，网卡，cpu也可以将自己从一个程序切换到另一个程序。</p>\n<p>用户态：只能受限的访问内存，且不允许访问外围设备，占用cpu的能力被剥夺，cpu资源可以被其他程序获取。</p>\n<p>最大的区别就是权限不同，在运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。</p>\n<h3> 为什么要有这两态：</h3>\n<p>需要限制不同的程序之间的访问能力，防止他们获取别的程序的内存数据，或者获取外围设备的数据，并发送到网络，CPU划分出<strong>两个权限等级</strong> -- 用户态和内核态。</p>\n<h3> 什么时候转换</h3>\n<p><strong>系统调用</strong>：</p>\n<p>用户进程主动发起的。用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作，比如fork()就是执行一个创建新进程的系统调用</p>\n<p>用户程序使用系统调用，系统调用会转换为内核态并调用操作系统</p>\n<p><strong>异常</strong>：</p>\n<p>会从当前运行进程切换到处理次此异常的内核相关程序中</p>\n<p><strong>外围设备的中断</strong>：</p>\n<p>所有程序都运行在用户态，但在从硬盘读取数据、或从键盘输入时，这些事情只有操作系统能做，程序需要向操作系统请求以程序的名义来执行这些操作。这个时候用户态程序切换到内核态。</p>\n<p>用户接口程序（GUI或shell）</p>\n<p>GUI，Graphical User Interface，图形用户界面，带有图形界面的操作系统；基于文本、命令行的叫shell</p>\n<p>处于用户态中，位于用户态的最底层，允许用户运行其他程序</p>\n<p>（而操作系统运行在内核态中</p>\n<h1> Linux</h1>\n<h2> Linux常用命令</h2>\n<table>\n<thead>\n<tr>\n<th>系统管理命令</th>\n<th>::su</th>\n<th>切换账户</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ifconfig</td>\n<td>查看IP地址</td>\n<td></td>\n</tr>\n<tr>\n<td>Ping</td>\n<td>检查网络是否连接</td>\n<td></td>\n</tr>\n<tr>\n<td>Kill</td>\n<td>杀死进程</td>\n<td></td>\n</tr>\n<tr>\n<td>Kill -9</td>\n<td>强制杀死</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>系统资源查询命令</td>\n<td>ps</td>\n<td>查看进程</td>\n</tr>\n<tr>\n<td>Ps -ef</td>\n<td>查看所有的进程</td>\n<td></td>\n</tr>\n<tr>\n<td>Netstat</td>\n<td>查看网络状况</td>\n<td></td>\n</tr>\n<tr>\n<td>Netstat -apn</td>\n<td>查看所有的端口</td>\n<td></td>\n</tr>\n<tr>\n<td>df</td>\n<td>显示磁盘空间使用情况</td>\n<td></td>\n</tr>\n<tr>\n<td>top</td>\n<td>查看进程资源占用</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>管道命令（同时执行）</td>\n<td>Ps -ef | grep</td>\n<td>查看所有进程，通过管道找到相应的进程包名</td>\n</tr>\n<tr>\n<td>Chmod</td>\n<td>赋权命令</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>目录操作命令</td>\n<td>cd</td>\n<td>进入目录里面</td>\n</tr>\n<tr>\n<td>cd /</td>\n<td>根目录</td>\n<td></td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>当前目录</td>\n<td></td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>创建目录</td>\n<td></td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>删除目录</td>\n<td></td>\n</tr>\n<tr>\n<td>ls</td>\n<td>查看现有的目录</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>文件编辑就命令</td>\n<td>vi + 文件</td>\n<td>编辑文件</td>\n</tr>\n<tr>\n<td>Cat a.txt</td>\n<td>查看文件，显示内容</td>\n<td></td>\n</tr>\n<tr>\n<td>rm -rf</td>\n<td>强制删除</td>\n<td></td>\n</tr>\n<tr>\n<td>find / -name .txt</td>\n<td>在根目录下面查找txt文件</td>\n<td></td>\n</tr>\n<tr>\n<td>cp -ai a.txt test</td>\n<td>复制a.txt到test目录下</td>\n<td></td>\n</tr>\n<tr>\n<td>tail -f pin.log</td>\n<td>显示pin.log文件末尾内容</td>\n<td></td>\n</tr>\n<tr>\n<td>Find</td>\n<td>查找</td>\n<td></td>\n</tr>\n<tr>\n<td>grep</td>\n<td>文本搜索</td>\n<td></td>\n</tr>\n<tr>\n<td>touch</td>\n<td>如果没有就创建，有就不理它</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>文件解压压缩命令</td>\n<td>tar -czvf test.tar.gz.test</td>\n<td>压缩 将文件压缩成.test.tar.gz</td>\n</tr>\n<tr>\n<td>tar -xzvf test.tar.gz.test</td>\n<td>解压 将文件解压成.test.tar.gz</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2> linux和windows的区别，linux相比windows有什么优势</h2>\n<p>Linux是一个以开发者为中心的操作系统，而windows是以消费者为中心的操作系统</p>\n<p>Linux是免费的、开源的，更容易得到他的源代码，也就更容易实现个性化定制</p>\n<p>Linux的命令行功能强大，windows的命令行没这么厉害…</p>\n<p>Linux基于网络，只要有相应权限，就能远程操控相应的服务器</p>\n<p>…..</p>\n<p>| 是什么：</p>\n<p>管道符，就是把符号左边命令本来要打印到终端上的信息当做右边命令的操作对象</p>\n<p>Linux命令 如何杀死占用指定端口的进程</p>\n<p>先查端口对应的进程，然后kill进程号</p>\n<p>（ss、netstat查进程</p>\n<p>grep怎么输出文本中包含某个关键字的行，不包含的呢</p>\n<p>grep -v xxx输出不包含的</p>\n<p>装软件</p>\n<p>系统是debian的，apt-get</p>\n<p>其他方式还有yum、rpm</p>\n<p>du，df的区别</p>\n<p>VI 显示所有行的行号：vi set number</p>\n<p>找到共用80端口的线程</p>\n<p>linux基本指令 awk、find、grep</p>\n<p>shell脚本：统计一个文件中重复的行和重复次数</p>\n<p>linux 如何将文件从一台服务器转移到另一台服务器</p>\n<p>如何查找出现频率最高的100个ip地址</p>\n<p>sh .sh source .sh ./a.sh区别</p>\n<h1> 数据结构</h1>\n<p>用列表实现队列</p>\n<p>用队列实现栈</p>\n<p>用栈实现队列</p>\n<p><a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树</a>节点间最小距离</p>\n<p><strong><a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树</a>中的最大路径和</strong></p>\n<p><a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树</a>的序列化和反序列化</p>\n<p>深度优先搜素、宽度优先搜索</p>\n<p>堆<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F\" target=\"_blank\" rel=\"noopener noreferrer\">排序</a>的原理和复杂度</p>\n<p>…</p>\n<h1> C</h1>\n<h2> Static/const</h2>\n<p>static，静态：1. 将函数或变量对其他源文件隐藏，只能被本地模块引用，即局部有效。2. 静态局部变量，在函数体内用static修饰变量，将本来要被存在栈中的局部变量保存在了静态空间中，函数退出时他仍然存在，延长了该变量的生命周期。</p>\n<p>const，只读：被const修饰的量为常量，表示禁止这个量被修改；同时向阅读代码的人传递信息表示：这一块的内容不要区改他，只读的，同样也能保护代码。</p>\n<h2> 字节序</h2>\n<p>在存储器中储存字节的顺序，分大端和小端两种。大端：高位字节在前，低位字节在后，是人类的读写方式；小端反过来，是计算机的读写方式</p>\n<h2> Strcpy(destination, sourse)</h2>\n<p>从sourse字符串的第一位开始往后赋值，直到遇到”\\0”</p>\n<p>Printf %s也是打印到\\0停止</p>\n<h2> Sizeof</h2>\n<p>内存地址的大小和指针指向无关，只和操作系统位数有关。</p>\n<p>函数传参不能传数组，编译器会自动把数组转换成指针形式</p>\n<h2> Volatile</h2>\n<p>程序读取变量时一般是向寄存器里读值而不是在内存读值（编译器的优化），Volatile告诉程序这个值随时都能变化，需要保证每次执行的时候都从内存里取值。</p>\n<p>数组指针</p>\n<p>a+1数组下一个值首地址，&amp;a表示数组地址，&amp;a+1为下一个数组首地址</p>\n<h2> 运算符优先级</h2>\n<p>*/+-位运算</p>\n<h2> 函数宏</h2>\n<p>#define MYPOW(x) ((x)*(x))</p>\n<p>宏名要大写，每个变量都要加括号</p>\n<h3> 内存对齐</h3>\n<h3> 隐式转换</h3>\n<p>…</p>\n<h2> 数据库</h2>\n<p>事务的特性：原子性、一致性、隔离性、持久性。</p>\n<p>联合主键：设置多个字段同时为主键（PRIMARY KEY(Name, Age)）</p>\n<p>复合主键：多个主键联合形成一个主键组合。（成绩表中的学号、课程标号）</p>\n<p>mysql怎么优化</p>\n<p>数据库的备份是如何实现的</p>\n<p>mysql创建一个学生表，包含id（int）和name（string），主键的创建：CREATE TABLE stu(id INT (5), name VARCHAR (100), PRIMARY KEY (id));</p>\n<p>mysql建立索引 CREATE INDEX index_name ON table_name (column_list) CREATE INDEX idx_c4 ON t(c4);</p>\n<p>数据库查询10-20行内容：select * from stu limit 10, 10;</p>\n<p>查找135开头的电话：select * from table where tel like '135%';</p>\n<p>left join, right join和inner join的影响性能的因素。</p>\n<p>sql：三表查询、两表查询</p>\n<p>…</p>\n<h2> 测试相关</h2>\n<h3> 测试理论</h3>\n<h4> 白盒测试</h4>\n<p>白盒测试也称为结构测试或逻辑驱动测试，是针对被测单元内部是如何进行工作的测试。检查程序内部逻辑结构，对所有的逻辑路径进行测试，是一种穷举路径的测试方法，</p>\n<p>常见的白盒测试的方法有：语句覆盖，条件覆盖，判定覆盖，条件组合覆盖，基本路径覆盖等等。</p>\n<p>优点：可以检测代码的每条分支和路径；可以揭示隐藏在代码中的错误；对代码的测试比较彻底。</p>\n<p>缺点：耗费比较大；不能检测到代码中遗漏的逻辑；不能直接验证需求的正确性</p>\n<h4> 黑盒测试</h4>\n<p>黑盒测试也称功能测试或数据驱动测试，它不看代码内部的逻辑，只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数锯而产生正确的输出信息，并且保持外部信息（如数据库或文件）的完整性。</p>\n<p>常见方法有等价类划分法；边界值分析法；因果图法；场景法；正交实验设计法；判定表驱动分析法；错误推测法；功能图分析法。</p>\n<p>优点：容易实施，不需要关注内部实现；贴近用户需求。</p>\n<p>缺点：覆盖率比较低，因为不知道内部逻辑</p>\n<h4> 单元测试</h4>\n<p>单元测试：软件组成单元进行测试，其目的是检验软件基本组成单位的正确性，通常情况下是白盒的，能够尽早的发现错误，降低修改成本。</p>\n<h4> 性能测试关注啥</h4>\n<p>指标：响应时间（RT）、每秒能完成的响应数（TPS）、CPU利用率、内存占用、网络（带宽使用率）、手机app的话还考虑耗电量……</p>\n<p>考虑负载加大时，各项指标如何变化，联网的考虑各种不同的网络环境（正常网、超快网、网速慢、断网）时指标的变化</p>\n<h4> 压力测试关注啥</h4>\n<h4> 并发用户数和在线用户数的区别</h4>\n<p>在线用户数：用户同时在一定时间段的在线数量</p>\n<p>并发用户数：某一时刻同时向服务器发送请求的用户数</p>\n<p>（在线用户只要在线就好了，并发用户计算的是和服务器有交流的用户，一般比例5%-20%）</p>\n<h3> 测试的阶段</h3>\n<p>测试应该尽早进行。越早就可以花越少的消耗得到越大的回报。</p>\n<h3> 单元测试</h3>\n<p>单元测试是对软件组成单元进行测试，其目的是检验软件基本组成单位的正确性，测试的对象是软件设计的最小单位：函数、或者类。</p>\n<p>项目中的测试类就是测试接口类的，属于单元测试，一般由开发人员测试。</p>\n<h3> 集成测试</h3>\n<p>集成测试也称综合测试、组装测试、联合测试，将程序模块采用适当的集成策略组装起来，对系统的接口及集成后的功能进行正确性检测的测试工作。其主要目的是检查软件单位之间的接口是否正确，集成测试的对象是已经经过单元测试的模块。</p>\n<h3> 系统测试</h3>\n<p>系统测试是对整个系统的测试，将硬件、软件、操作人员看作一个整体，检验它是否有不符合系统说明书的地方，主要包括功能测试、界面测试、可靠性测试、易用性测试、性能测试。 功能测试主要针对包括功能可用性、功能实现程度（功能流程&amp;业务流程、数据处理&amp;业务数据处理）方面测试。在集成测试之后。</p>\n<h4> 集成测试和系统测试之间的比较：</h4>\n<p>1、测试内容：集成测试是测试各个单元模块之间的接口，系统测试是测试整个系统的功能和性能；</p>\n<p>2、测试角度：集成测试偏重于技术的角度进行测试，系统测试是偏重于业务的角度进行测试。</p>\n<h3> 验收测试</h3>\n<p>也称交付测试，是针对用户需求、业务流程进行的正式的测试，以确定系统是否满足验收标准，由用户、客户或其他授权机构决定是否接受系统。</p>\n<p>验收测试包括alpha测试和beta测试，alpha测试是由开发者进行的软件测试，beta测试是由用户在脱离开发环境下进行的软件测试。</p>\n<h3> 回归测试</h3>\n<h3> 测试的类型</h3>\n<p>功能测试：关注功能正常（包含兼容性测试），除了下面分类都测；</p>\n<p>性能测试：关注（比如前端性能、后端性能）；</p>\n<p>安全测试：关注传输、存储等安全；</p>\n<p>特性测试：特性指平台差异(即部分兼容性测试)，如PC端鼠标，键盘操作特性(Tab键等)；如手机触屏操作，横竖屏，中断恢复(来电)等</p>\n<h3> QPS（每秒查询率）</h3>\n<p>QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准</p>\n<p>用来衡量服务器的机器性能。</p>\n<h4> QPS和TPS的区别</h4>\n<p>TPS：Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。</p>\n<p>是软件测试结果的测量单位。</p>\n<h4> 系统吞吐量</h4>\n<h3> 测试生命周期</h3>\n<p>测试周期是指从测试项目计划建立到BUG提交的整个测试过程。</p>\n<p>包括软件项目测试计划，测试需求分析，测试用例设计，测试用例执行，BUG提交五个阶段。 软件测试周期并行与软件生命周期，存在于软件生命周期的各个阶段。</p>\n<h4> 软件生命周期</h4>\n<p>软件生命周期是指软件的产生直到报废的生命周期。</p>\n<p>包括问题的定义及规划，需求分析，软件设计（概要，详细），软件编码，软件测试（单元测试，集成测试，系统测试，验收测试），运行维护</p>\n<h3> 测试用例设计方法</h3>\n<p><strong>黑盒测试</strong>包括：等价类划分、边界值分析、因果图、场景法、正交实验设计法、判定表、驱动分析法、错误推测法、功能图分析法，<strong>依据</strong>是用户需求规格说明书、详细涉及说明书</p>\n<p><strong>白盒测试</strong>包括：语句覆盖、判断覆盖、条件覆盖、路径覆盖、条件组合覆盖，<strong>依据</strong>是代码结构和逻辑</p>\n<p>等价类划分：把可能的数据输入集合分为若干子集，每个子集中的子集内的元素对于揭露程序中的错误都是等效的，在每个等价类中取的数据用来测试，比较有代表性。 先划分等价类，“有效等价类”和“无效等价类”，根据划分的等价类编写测试。</p>\n<p>边界值分析：选取指定数据集中的边界值进行测试。上点，内点，离点。</p>\n<p>设计测试用例的方法</p>\n<h4> 测试用例的组成元素</h4>\n<p>用例编号</p>\n<p>用例标题</p>\n<p>功能模块名称</p>\n<p>前置条件</p>\n<p>输入数据</p>\n<p>操作步骤</p>\n<p>预期结果</p>\n<p>优先级</p>\n<p>执行结果</p>\n<p>编写人</p>\n<p>执行人</p>\n<p>其他补充项</p>\n<h3> BUG描述、评级</h3>\n<p>对bug的描述尽量简短但要求清晰，对bug出现的条件进行详细的描述，包括输入的测试用例、使用的环境、有没有和其他软件同时运行，以及需要写清bug出现的位置，帮助开发更好定位。</p>\n<p>按照用户体验（bug是否很严重的影响用户体验）、影响系统的程度进行评级。</p>\n<h4> 一条bug记录的组成</h4>\n<p>（1）bug内容</p>\n<p>（2）bug发现时间</p>\n<p>（3）测试条件（系统配置信息、环境、软件版本、浏览器版本…）</p>\n<p>（4）预期结果和实际结果的对比，相关的分析</p>\n<p>（5）如何重现这个bug的步骤</p>\n<p>（6）这个bug的严重性（会多大程度的影响系统或用户使用）</p>\n<p>（7）bug发生的位置</p>\n<p>……</p>\n<h3> 瀑布模型和敏捷模型</h3>\n<p>瀑布模型：</p>\n<p>把软件开发模型分为好几个阶段，包括软件计划、需求分析、设计、实现、软件测试、软件运行维护。</p>\n<p>具有一种比较明显的分层，每一阶段的结果文档会作为下一阶段的输入，强调文档，整个周期完成的差不多了才能看到结果；</p>\n<p>没有迭代和反馈，只能一步一步来，流程没有回头路。不能适应客户不断变化的需求，后期需要改动时成本也比较大</p>\n<p>测试比较晚，基本上是在软件完成之后进行的测试</p>\n<p>敏捷开发：</p>\n<p>按一个短的迭代周期工作，强调“快”，每次迭代交付一些成果，（或者说先做出一个不完美但能实现一定的功能的版本）；让客户参与进来，有新需求就，快速响应变化，迭代产生新版本，缩短软件版本的周期。</p>\n<p>强调开发软件而不是文档。</p>\n<p>特点：让客户参与进来，客户需求的变动和软件有些不符合需求的地方可以第一时间进行了解和改动； 缩短版本周期； 每隔一段时间（一个迭代周期），团队可以在工作方面进行反省和改进，调整自己的行为； 强调开发软件而不是文档，提高编程人员的积极性。</p>\n<p>敏捷测试：</p>\n<p>以用户需求为中心，在每一个迭代周期都需要进行测试，</p>\n<p>基于自动化测试-&gt;速度快、敏捷</p>\n<p>更强调测试的速度和适应性，侧重计划的不断调整以适应需求的变化</p>\n<p>强调面对面的沟通、协作，强调团队的责任，不太关注对缺陷的记录与跟踪。缺陷修复的成本也较低</p>\n<h3> V模型和W模型</h3>\n<p>V模型：把测试过程作为在需求分析、系统设计及编码之后的一个阶段，忽视了测试对需求分析，系统设计的验证，需求的满足情况一直到后期的验收测试才被验证。（应该比较多包括系统测试和验收测试）</p>\n<p>W模型：测试的活动与软件开发同步进行，测试的对象不仅仅是程序，还包括需求和设计。因为在需求阶段测试就已经介入了，后面每一阶段的开发都需要经过测试，能够尽早发现软件的缺陷，降低debug的成本</p>\n<h3> Web和app测试的区别</h3>\n<ol>\n<li>\n<p>首先是web和app的区别：web是b/s架构的，基于浏览器；app是c/s架构的，必须要有客户端。Web测试中只要更新了服务器，客户端就会同步更新，保证每个用户用的客户端一样；app就不能保证完全一致，因为app客户端需要用户主动更新，如果app测试中修改了服务器，就意味着客户端用户使用的所有核心版本都要进行回归测试</p>\n</li>\n<li>\n<p>性能方面：web主要看响应速度；app还看电量、流量、CPU、内存…</p>\n</li>\n<li>\n<p>兼容方面：web基于浏览器，主要看电脑硬件、电脑系统；app依赖于手机或平板，关注的系统主要是安卓和ios，还要关心分辨率、屏幕尺寸</p>\n</li>\n<li>\n<p>App比web测试多一些专项测试：弱网测试，安装、卸载、更新，界面操作、触摸手势等</p>\n</li>\n</ol>\n<h3> 软件测试流程</h3>\n<p>需求分析；制定测试计划（在研发计划制定时就应该定好测试计划）；设计测试用例；执行测试（包括单元测试、集成测试、系统测试、回归测试、验收测试）；测试评估（出报告，确认是否可以上线）；面向用户</p>\n<h3> 测试一款产品/一个功能</h3>\n<p>（角度）</p>\n<p>功能：</p>\n<p>性能：响应速度、CPU占用，联网的话考虑多用户并发/弱网环境，app的话考虑耗电量</p>\n<p>易用性</p>\n<p>兼容性：多平台/多系统/多版本</p>\n<p>安全：用户名密码有没有保存功能，数据往服务器传是不是加密的，有没有防止一些脚本或者SQL注入攻击</p>\n<p>UI：符合大众期望，有无错别字，排版和颜色搭配</p>\n<p>稳定性：压力测试、极端条件测试</p>\n<p>（查看产品的使用说明书）</p>\n<p>软件质量模型的6大特性：</p>\n<p>功能性，可靠性，易用性，效率，维护性，可移植性</p>\n<h3> 案例/情景题</h3>\n<h4> 以<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%99%BE%E5%BA%A6\" target=\"_blank\" rel=\"noopener noreferrer\">百度</a>搜索为例，设计测试方案</h4>\n<p>从以下几个角度进行测试</p>\n<p><strong>功能测试：</strong></p>\n<p>输入搜索信息，点击搜索按钮是否能获取搜索结果，跳到结果界面；</p>\n<p>搜索结果界面弹出的信息是不是符合我输入的信息</p>\n<p>没有输入信息，按搜索看会有什么结果</p>\n<p>对输入框能输入的最大字符数进行边界测试，（假设限制是30个字符），那么分别输入20，30，31个字符的文本进行测试，测试超出输入限制会出现的结果</p>\n<p>测试输入敏感词时的搜索结果</p>\n<p>输入不同国家语言的搜索结果</p>\n<p>查询不到搜索结果的情况显示的结果</p>\n<p>从搜索结果界面返回的按钮能不能正常返回</p>\n<p>点击<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%99%BE%E5%BA%A6\" target=\"_blank\" rel=\"noopener noreferrer\">百度</a>的标签能不能跳到相关的热搜界面</p>\n<p>测试<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%99%BE%E5%BA%A6\" target=\"_blank\" rel=\"noopener noreferrer\">百度</a>的图片搜索能不能正常使用</p>\n<p>图片拖曳和上传的功能是否均能实现，粘贴图片网址能不能用</p>\n<p>如果粘贴的图片网址不存在是否能给出正确的提示反馈</p>\n<p>输入特别大的图会发生什么现象</p>\n<p><strong>性能测试：</strong></p>\n<p>测试搜索时的响应时间能否符合需求</p>\n<p>网速慢的条件下还能不能正常搜索</p>\n<p>多用户同时访问，或者一个时间点访问量突然增大的情况，对这些特殊情况进行模拟，测试还能不能进行正常搜索</p>\n<p><strong>易用性测试：</strong></p>\n<p>使用操作是否简单，是不是输入查询信息之后点击搜索按钮就行了；</p>\n<p>在输入框输入搜索词的过程中下拉框能否弹出相关的<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E8%81%94%E6%83%B3\" target=\"_blank\" rel=\"noopener noreferrer\">联想</a>搜索（你可能要搜）</p>\n<p>输入框有没有保存最近搜索的信息的记录</p>\n<p>除了点击搜索按钮进行搜索，测试按回车进行检索的功能</p>\n<p><strong>兼容性测试：</strong></p>\n<p>多种系统下的多种不同的浏览器下是否能正常显示、正常使用；</p>\n<p>在不同的手机浏览器中打开是否能正常显示、正常使用；</p>\n<p>各种语言平台下是否都能正常使用</p>\n<p><strong>安全性测试：</strong></p>\n<p>能不能防止搜索时对数据库的恶意攻击的情况，如SQL注入</p>\n<p><strong>UI</strong>**：**</p>\n<p>界面设计是否简介，是否符合用户审美</p>\n<p>图标能不能正常显示，界面有无错别字</p>\n<h4> 测试用例：上传文件</h4>\n<h4> 测试用例：微信扫码点餐</h4>\n<h4> 如何测试网站的高并发性（不是很会…）</h4>\n<p>测试多用户同时访问，访问量的缓慢增加/迅速增加。。。</p>\n<p>大量相同类型访问，大量不同类型的访问</p>\n<p>服务器角度，能够承受多大的压力（？），客户端角度，数据能否成功得到需要的信息，响应时间怎么样</p>\n<p>实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息</p>\n<p>一方面保证数据不丢失、一方面保证性能</p>\n<h4> 测试一个前端页面，button按钮不好使，原因，不获取源码的前提下，如何解决（提示接口测试）</h4>\n<p>因为这是个前端界面，可以按F12打开开发者工具，在network里按钮点击时请求有没有发出去，看状态码，有没有生成新文件之类的，确定是不是连接的问题。</p>\n<p>postman模拟发包过去测试也行。</p>\n<h3> selenium流程、获取元素方法</h3>\n<p>先import，然后webdriver模拟打开一个浏览器（初始化），获取特定的网址，然后通过获取元素模拟鼠标点击页面上的按钮（或者其他动作，比如在特定的文本框输入特定的内容），（最后quit()一下）</p>\n<p>获取元素方法：xpath，css选择器，文本内容…..等等，比如find_element_by_xpath、find_element_by_css_selector、find_element_by_link_text</p>\n<h3> 其他</h3>\n<p>app登录和网页登录的区别</p>\n<p>估计<a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E7%BE%8E%E5%9B%A2\" target=\"_blank\" rel=\"noopener noreferrer\">美团</a>外卖一天内的全国订单量</p>\n<p>淘宝页面价格显示不出来，该怎么测</p>\n<p>如果有一部分用户反馈APP的视频加载不出来，你会从哪里方面去定位问题</p>\n<p>在一个产品的周期中，你会怎么安排测试工作</p>\n<h3> 岗位理解题</h3>\n<ul>\n<li>\n<p>为什么投测试</p>\n</li>\n<li>\n<p>对测试开发的理解</p>\n</li>\n<li>\n<p>为什么做测试而不是去做开发</p>\n</li>\n<li>\n<p>如何处理矛盾</p>\n</li>\n<li>\n<p>职业规划</p>\n</li>\n<li>\n<p>你认为测试人员需要具备哪些素质</p>\n</li>\n<li>\n<p>你的优点和缺点</p>\n</li>\n</ul>\n<h2> 测试开发工程师</h2>\n<ol>\n<li>\n<p>浏览器输入连接之后，发生的事</p>\n</li>\n<li>\n<p>进程和线程</p>\n</li>\n<li>\n<p><a href=\"https://www.nowcoder.com/jump/super-jump/word?word=%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2\" target=\"_blank\" rel=\"noopener noreferrer\">最长回文子串</a>和最长无重复字符子串，时间复杂度</p>\n</li>\n<li>\n<p>自我介绍</p>\n</li>\n<li>\n<p>项目背景</p>\n</li>\n<li>\n<p>项目遇到的难点</p>\n</li>\n<li>\n<p>springboot常见注解</p>\n</li>\n<li>\n<p>Tcp udp的区别</p>\n</li>\n<li>\n<p>使用udp提高视频可靠性</p>\n</li>\n<li>\n<p>网络波动排查</p>\n</li>\n<li>\n<p>如果让你测试现在的视频会议，会从哪几个方面进行测试</p>\n</li>\n<li>\n<p>算法：喝饮料</p>\n</li>\n<li>\n<p>前端了解多少？</p>\n</li>\n<li>\n<p>后续计划？</p>\n</li>\n<li>\n<p>反问</p>\n</li>\n<li>\n<p>http和https区别</p>\n</li>\n<li>\n<p>怎样使用https</p>\n</li>\n<li>\n<p>tcp和socket的区别</p>\n</li>\n<li>\n<p>redis解决了什么问题</p>\n</li>\n<li>\n<p>redis持久化问题</p>\n</li>\n<li>\n<p>redis哨兵模式，主从模式</p>\n</li>\n<li>\n<p>gc过程</p>\n</li>\n<li>\n<p>springboot常见注解</p>\n</li>\n<li>\n<p>@autowired注解是干啥的</p>\n</li>\n<li>\n<p>Ioc aop</p>\n</li>\n<li>\n<p>控制反转怎么理解</p>\n</li>\n<li>\n<p>面向切面怎么理解</p>\n</li>\n<li>\n<p>面向切面编程使用场景</p>\n</li>\n<li>\n<p>容器怎么理解</p>\n</li>\n<li>\n<p>实习规划</p>\n</li>\n<li>\n<p>怎么认识测试开发</p>\n</li>\n<li>\n<p>自动化测试框架</p>\n</li>\n<li>\n<p>进程和线程</p>\n</li>\n<li>\n<p>死锁，死锁产生的条件，怎么预防</p>\n</li>\n<li>\n<p>三挥四握，为什么不是两次和三次</p>\n</li>\n<li>\n<p>cookie、session和token</p>\n</li>\n<li>\n<p>python中字典、元组、集合列表</p>\n</li>\n<li>\n<p>python中函数的参数可以传递的数据类型</p>\n</li>\n<li>\n<p>数据库范式</p>\n</li>\n<li>\n<p>栈和队列</p>\n</li>\n<li>\n<p>对于QA的理解</p>\n</li>\n<li>\n<p>实践中印象深刻的事，为什么印象深刻</p>\n</li>\n<li>\n<p>http,https都是啥</p>\n</li>\n<li>\n<p>实际场景题</p>\n<ul>\n<li>\n<p>第一个，抖音下滑视频的时候，应用卡推了，你觉得会是哪些问题，（内存爆了？页面切换代码问题？空指针?）</p>\n</li>\n<li>\n<p>第二个，一个调起支付宝or微信进行支付操作的功能，怎么写测试样例（我说先看支付功能能不能正常使用，获取相机权限能否正常工作，{事后想起来，应该还有能够输入正确的数，负数肯定不行}）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>常见端口</p>\n</li>\n</ol>\n<h2> 反问</h2>\n<p>人工智能在软件测试中的应用实例，它目前处于字节软件测试中的什么地位</p>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "面试瞎想"
      ]
    },
    {
      "title": "",
      "url": "https://blog.yzketx.online/interview/code.html",
      "id": "https://blog.yzketx.online/interview/code.html",
      "summary": "大数相乘 零钱兑换 链表判环 大数除法 leetcode440 ip复原",
      "content_html": "<ol>\n<li>大数相乘</li>\n<li>零钱兑换</li>\n<li>链表判环</li>\n<li>大数除法</li>\n<li>leetcode440</li>\n<li>ip复原</li>\n</ol>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "滴滴",
      "url": "https://blog.yzketx.online/interview/didi.html",
      "id": "https://blog.yzketx.online/interview/didi.html",
      "summary": "滴滴 测开",
      "content_html": "<h1> 滴滴</h1>\n<h2> 测开</h2>\n<ol>\n<li>\n<p>IOC和AOP，DI</p>\n<p><strong>区分</strong></p>\n<p>AOP、OOP在字面上虽然非常类似，但却是面向不同领域的两种设计思想。OOP（<a href=\"https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B\" target=\"_blank\" rel=\"noopener noreferrer\">面向对象编程</a>）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的<a href=\"https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E5%8D%95%E5%85%83\" target=\"_blank\" rel=\"noopener noreferrer\">逻辑单元</a>划分。</p>\n<p>而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低<a href=\"https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E6%80%A7\" target=\"_blank\" rel=\"noopener noreferrer\">耦合性</a>的隔离效果。这两种设计思想在目标上有着本质的差异。</p>\n<p>上面的陈述可能过于理论化，举个简单的例子，对于“雇员”这样一个<a href=\"https://baike.baidu.com/item/%E4%B8%9A%E5%8A%A1%E5%AE%9E%E4%BD%93\" target=\"_blank\" rel=\"noopener noreferrer\">业务实体</a>进行封装，自然是OOP/OOD的任务，我们可以为其建立一个“Employee”类，并将“雇员”相关的属性和行为封装其中。而用AOP设计思想对“雇员”进行封装将无从谈起。</p>\n<p>同样，对于“权限检查”这一动作片断进行划分，则是AOP的目标领域。而通过OOD/OOP对一个动作进行封装，则有点不伦不类。</p>\n<p>换而言之，OOD/OOP面向名词领域，AOP面向动词领域。</p>\n<p><strong>关系</strong></p>\n<p>很多人在初次接触 AOP 的时候可能会说，AOP 能做到的，一个定义良好的 OOP 的接口也一样能够做到，我想这个观点是值得商榷的。AOP和定义良好的 OOP 的接口可以说都是用来解决并且实现需求中的横切问题的方法。但是对于 OOP 中的接口来说，它仍然需要我们在相应的模块中去调用该接口中相关的方法，这是 OOP 所无法避免的，并且一旦接口不得不进行修改的时候，所有事情会变得一团糟；AOP 则不会这样，你只需要修改相应的 Aspect，再重新编织（weave）即可。 当然，AOP 也绝对不会代替 OOP。核心的需求仍然会由 OOP 来加以实现，而 AOP 将会和 OOP 整合起来，以此之长，补彼之短。</p>\n</li>\n<li>\n<p>冒泡排序、归并排序、快排、选择排序、归并排序、最长重复子串</p>\n</li>\n<li>\n<p>如何理解容器</p>\n</li>\n<li>\n<p>http和https，ssl建立连接过程</p>\n</li>\n<li>\n<p>tcp3次握手，4次挥手</p>\n</li>\n<li></li>\n</ol>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "海康威视",
      "url": "https://blog.yzketx.online/interview/hikvision.html",
      "id": "https://blog.yzketx.online/interview/hikvision.html",
      "summary": "海康威视 测试开发",
      "content_html": "<h1> 海康威视</h1>\n<blockquote>\n<p>测试开发</p>\n</blockquote>\n<h2> 进程与线程的区别，2者与程序的关系？</h2>\n<ol>\n<li>\n<p>线程由进程创建，在进程下运行，一个进程可以包含多个线程</p>\n</li>\n<li>\n<p>不同进程间很难通信（pipe无名管道，有名管道，共享内存，信号量，）；线程间通讯相对容易，他们共享本进程的资源</p>\n</li>\n<li>\n<p>进程间互不影响，一个线程挂掉可能导致整个进程挂掉</p>\n</li>\n<li>\n<p>进程可以扩展到多核，比如同一进程创建的线程可运行于不同核心。python 因为GIL 所以进程的多个线程，都在同一CPU中，C,Java 等的多线程， 没有这个限制 是真正的并行。</p>\n</li>\n<li>\n<p>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。如\"互斥锁\"</p>\n</li>\n<li>\n<p>进程使用的内存地址可以限定使用量，信号量</p>\n</li>\n<li>\n<p>线程只由相关<a href=\"https://baike.baidu.com/item/%E5%A0%86%E6%A0%88\" target=\"_blank\" rel=\"noopener noreferrer\">堆栈</a>（<a href=\"https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"noopener noreferrer\">系统</a>栈或<a href=\"https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E6%A0%88\" target=\"_blank\" rel=\"noopener noreferrer\">用户栈</a>）<a href=\"https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8\" target=\"_blank\" rel=\"noopener noreferrer\">寄存器</a>和线程控制表TCB组成。<a href=\"https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8\" target=\"_blank\" rel=\"noopener noreferrer\">寄存器</a>可被用来存储线程内的<a href=\"https://baike.baidu.com/item/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\" target=\"_blank\" rel=\"noopener noreferrer\">局部变量</a>，但不能存储其他线程的相关变量。</p>\n</li>\n<li>\n<p><a href=\"https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B\" target=\"_blank\" rel=\"noopener noreferrer\">进程</a>是资源分配的基本单位。所有与该进程有关的资源，都被记录在<a href=\"https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%9D%97\" target=\"_blank\" rel=\"noopener noreferrer\">进程控制块</a>PCB中。以表示该进程拥有这些资源或正在使用它们。</p>\n<p>另外，进程也是抢占处理机的调度单位，它拥有一个完整的虚拟地址空间。当进程发生调度时，不同的进程拥有不同的虚拟地址空间，而同一进程内的不同线程共享同一地址空间。</p>\n</li>\n<li>\n<p>线程上下文切换比进程上下文切换要快得多。</p>\n</li>\n</ol>\n<h2> 进程5个状态</h2>\n<p>创建、阻塞【阻塞挂起】、就绪【就绪挂起】、运行、结束</p>\n<h2> 数据库可以根据哪些字段（不）索引？</h2>\n<p>建议索引：</p>\n<ul>\n<li>在<mark>经常需要搜索</mark>的列上，可以加快搜索的速度；</li>\n<li>在作为<mark>主键</mark>的列上，强制该列的唯一性和组织表中数据的排列结构；</li>\n<li>在<mark>经常用在连接</mark>的列上，这 些列主要是一些外键，可以加快连接的速度；</li>\n<li>在<mark>经常需要根据范围</mark>进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；</li>\n<li>在<mark>经常需要排序</mark>的列上创 建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；</li>\n<li>在<mark>经常使用在WHERE</mark>子句中的列上面创建索引，加快条件的判断速度。</li>\n</ul>\n<p>不建议：</p>\n<ul>\n<li>第一，对于那些在<mark>查询中很少使用或者参考</mark>的列不应该创建索引。这是因 为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</li>\n<li>第二，对于那 些只有<mark>很少数据值的列</mark>也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</li>\n<li>第三，对于那些定义为<mark>text, image和bit</mark>数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。</li>\n<li>第四，当<mark>修改性能远远大于检索性能</mark>时，不应该创建索 引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因 此，当修改性能远远大于检索性能时，不应该创建索引。</li>\n</ul>\n<h2> 数据库建立索引的优缺点</h2>\n<p><a href=\"https://blog.csdn.net/u013310119/article/details/52527632?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_antiscanv2&amp;utm_relevant_index=3\" target=\"_blank\" rel=\"noopener noreferrer\">数据库索引的作用优点和缺点 · 建议/不建议创建索引的情况</a></p>\n<p>优点：</p>\n<ul>\n<li>大大提高查询效率</li>\n<li>通过创建唯一索引，可以保证数据库表中每一行的数据唯一性</li>\n<li>可以加快表与表之间的连接</li>\n<li>在使用分组和排序子句进行数据索引时也可显著减少耗时</li>\n<li>可以使用优化隐藏器，提高系统性能</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>选取的字段不当不但无法提高查询效率，还可能拖慢查询时间；</li>\n<li>由于建立索引需要额外的时间，索引是动态维护的，当表中数据变动时，索引都要相应改变，所以一定范围的数据量级需要考虑建立索引的开销和直接查询的开销。</li>\n<li>需要占用额外的物理空间，且与数据量呈正相关。</li>\n</ul>\n<h2> 数据库有哪些锁？</h2>\n<p>行锁、表锁、页锁【间隙锁，颗粒度不同】，读写锁，共享锁</p>\n<h2> 删除数据表的方式</h2>\n<p>drop、delete、truncate，在执行速度上，drop &gt; truncate &gt; delete；</p>\n<p>drop：<code>drop table 表名称</code> 删除内容和定义，删除的是整个表（结构和数据），同时删除表的结构所依赖的约束、触发器、索引，将表所占用的空间全释放掉。无法回滚，所以删除是不能恢复的，如果再次使用的话需要新建表。</p>\n<p>delete：<code>delete from 表名称 [where 列名称 = 值]</code> 删除表中的行，不删除表的结构。执行删除的过程是每次从表中删除一行，并且将该行的删除操作作为事务在日志中保存，以便进行进行回滚操作。delete会根据指定的条件删除表中满足条件的数据，where就是条件判断。如果不指定where子句，那么删除表中所有记录。\ndelete操作不会减少表或索引所占用的空间。</p>\n<p>truncate：<code>truncate table 表名称</code> 只是清空表，删除内容，释放空间，但不删除定义（保留表的<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;spm=1001.2101.3001.7020\" target=\"_blank\" rel=\"noopener noreferrer\">数据结构</a>）。且不会把删除操作记录记入日志保存，无法回滚，所以删除是不能恢复的。并且在删除的过程中不会激活与表有关的删除触发器【级联更新？】。执行速度快。</p>\n<p><strong>相同点</strong></p>\n<p>truncate和不带where子句的delete，drop都会删除表内的数据；</p>\n<p>drop，truncate都是DDL语句(数据定义语言)，执行后会自动提交；</p>\n<p><strong>不同点</strong></p>\n<p>语句类型：delete语句是数据库操作语言(DML)，truncate，drop是数据库定义语言(DDL)；</p>\n<p>是否删除表结构：truncate和delete 只删除数据不删除表结构，truncate 删除后将重建索引(新插入数据后id从0开始记起)，而 delete不会删除索引 (新插入的数据将在删除数据的索引后继续增加)，drop语句将删除表的结构包括依赖的约束，触发器，索引等；</p>\n<p>安全性：drop和truncate删除时不记录MySQL日志，不能回滚，delete删除会记录MySQL日志，可以回滚；</p>\n<h2> SQL的 char 和 vchar 区别</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>char</th>\n<th>vchar</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>长度</td>\n<td>0-255【2^8 - 1】</td>\n<td>0-65535【2^16 - 1】</td>\n</tr>\n<tr>\n<td>可变性</td>\n<td>定长</td>\n<td>实际占用空间比预分配的空间大一到两字节（用于记录分配的实际空间长度）</td>\n</tr>\n<tr>\n<td>碎片</td>\n<td>由于存储空间都是一次性分配的。为此某个字段的内容，其都是存储在一起的。单从这个角度来讲，其不存在碎片的困扰</td>\n<td>存储的长度是可变的。当其更改前后数据长度不一致时，就不可避免的会出现碎片的问题。故使用可变长度的字符型数据时，数据库管理员要时不时的对碎片进行整理。如执行数据库导出导入作业，来消除碎片</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>vchar不可因为其实际占用空间是变长，就给的过于慷慨，虽然物理空间如此，但内存确实按开始设置的值分配的。</p>\n<p>对于vchar，若更改后，其原先的存储位置已经无法满足其存储的需求。此时系统就需要进行额外的操作。如根据存储引擎不同，有的会 采用拆分机制，而有的则会采用分页机制。这也是碎片的一个原因。</p>\n<h2> 项目的难点</h2>\n<p>前期，起点高，没有基础</p>\n<p>期间，redis事件，当初年少无知【源于一次后端无故挂掉，老师找来，一开始只是简单重启，半天后发现没问题就以为是什么玄学问题没放在心上；过了一天，又出现了，那肯定是出什么大问题了，我就开始观察出错的场景，发现问题列表获取没问题，但是用户登入接口却报错了，导致需要用户认证相关服务全部用不了了，然而我们也没动这方面代码，去看我们的关联代码没发现有什么问题，于是我们打算重启再观察一天，期间想起了平台的日志，过了一天果然又挂了，然后我在日志里发现了问题所在，Django里有一条报错，大致是说redis快照持久化写入硬盘出错，更进一步查看redis发现是该位置没有写入权限，当时查了很多资料，有说是配置文件里内存不足或硬盘空间不够，首先排除硬盘空间，那我把内存调高，结果一天后还是报错，很诡异的是还是一天后出问题，然后百思不得其解，我再导出它的配置仔细看，终于发现不对了，因为之前我是特意看过redis配置的，发现它的持久化目录被改到了好像是/etc/还是哪个需要管理员权限的目录下，我当时就有点懵逼，咋自己目录就变了，再有目标地一查发现，原来是被黑客攻击了，当时我为了图方便，直接将redis的端口暴露到了公网，也没设密码，年少无知呐】</p>\n<h2> Redis基本数据类型</h2>\n<ul>\n<li>字符串（<code>STRING</code>）</li>\n<li>列表（<code>LIST</code>）</li>\n<li>集合（<code>SET</code>）</li>\n<li>哈希（<code>HASH</code>）</li>\n<li>有序集合（<code>ZSET</code>）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>结构类型</th>\n<th>存储的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>STRING</code></td>\n<td>字符串、整数或浮点数</td>\n</tr>\n<tr>\n<td><code>LIST</code></td>\n<td>一个链表，上面的每个节点都是一个字符串</td>\n</tr>\n<tr>\n<td><code>SET</code></td>\n<td>包含若干个字符串的无序集合，且集合中的元素都是唯一的</td>\n</tr>\n<tr>\n<td><code>HASH</code></td>\n<td>包含键值对的无序散列表</td>\n</tr>\n<tr>\n<td><code>ZSET</code></td>\n<td>成员中的字符串与分值的有序映射，其排序由分值决定</td>\n</tr>\n</tbody>\n</table>\n<p>其中有序集合可以说是redis特有，不过应该是在Python3.6后它的dict和set也支持有序集合。</p>\n<h2> Redis 用户登录缓存选用何种数据类型，理由是？</h2>\n<p>hash，实现的 dict</p>\n<h2> Redis持久化</h2>\n<p>RDB：在指定时间间隔内生成数据集的时间点快照</p>\n<p>AOF：</p>\n<ul>\n<li>记录服务器所有的写操作</li>\n<li>新的操作命令将被通过追加的方式写入文件尾部</li>\n<li>当服务器启动时，通过重新执行这些命令还原数据集</li>\n</ul>\n<p><strong>优缺点</strong></p>\n<h2> Redis主从复制</h2>\n<blockquote>\n<p>扩展 <code>Redis</code>的读性能，并为 <code>Redis</code>提供故障转移支持</p>\n</blockquote>\n<p>执行复制的从服务连接主服务器</p>\n<ul>\n<li>接受主服务器发送的初始副本</li>\n<li>接受主服务器执行的所有写命令</li>\n</ul>\n<p>在从服务器上执行所有写操作，实时更新数据集</p>\n<p>读命令可以发往任意服务器</p>\n<p>保障：哨兵机制</p>\n<h2> Redis哨兵机制</h2>\n<p>由redis相互监督，一个作为主，间隔呼叫其他redis</p>\n<h2> Redis 3种缓存失效问题</h2>\n<p><strong>缓存雪崩</strong>：由于某时刻数据大批量过期，此时数据库收到大量查询导致压力过大挂掉。</p>\n<p><strong>缓存击穿</strong>：由于某条热点数据不在缓存中但在数据库中，导致大量查询直接打到数据库，数据库瞬间压力过大挂掉。</p>\n<p><strong>缓存穿透</strong>：由于某条数据在缓存和数据库中都不存在，所有哪怕查询过数据库也无法将确切的值写入缓存，下次请求照样打到数据库，就好像缓存不存在一样，当请求量一大，数据库照样挂掉。</p>\n<p><code>解决方法</code></p>\n<p><strong>雪崩</strong>：</p>\n<ul>\n<li>为缓存数据固定的过期时间加上一个合理的随机时间，防止同时过期。</li>\n<li>使用Redis集群，将热点数据平均分配到各个服务器上，避免单点故障。</li>\n<li>设置热点事件永不过期。</li>\n</ul>\n<p><strong>击穿</strong>：</p>\n<ul>\n<li>设置热点数据永不过期。</li>\n<li>接口限流与熔断，进行服务降级，失败快速返回响应机制。</li>\n<li>设置互斥锁，在并发查询请求中，只允许第一个请求线程拿到锁执行数据库查询，其他请求线程进行阻塞，等到数据写入缓存后，直接走缓存。【可借助Redis分布式锁】</li>\n</ul>\n<p><strong>穿透</strong>：</p>\n<ul>\n<li>接口层增加校验。如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截。</li>\n<li>缓存设置无效key，直接key-null，不过需要将失效时间设置短点，如30秒，防止正常数据访问失败。</li>\n<li>布隆过滤器。</li>\n</ul>\n<h2> Redis 过期时间删除策略</h2>\n<p><strong>定时删除</strong>：放入数据后，设置定时器，读秒完毕将对应数据从dict中删除。</p>\n<ul>\n<li>优点：内存友好，数据一旦过期就会从内存中删除。</li>\n<li>缺点：CPU不友好，定时器需要占用较多的CPU资源，同时频繁的删除操作也是。</li>\n</ul>\n<p><strong>惰性删除</strong>：数据过期时，不做任何操作。当访问到过期数据时，直接返回NULL，再将数据从内存删除。</p>\n<ul>\n<li>优点：CPU友好，过期数据只有在访问到时才会被删除。</li>\n<li>缺点：内存不友好，可能会占用大量内存。</li>\n</ul>\n<p><strong>定期删除</strong>：上述2者的折中方案，每隔一段时间对redis中的所有数据库的expires依次进行随机抽取检查。</p>\n<p>redis中会维护一个<code>current_db</code>变量来标志当前检查的数据库。<code>current_db++</code>，当超过数据库的数量的时候，会重新从0开始。</p>\n<p>定期检查就是一个循环，每轮循环都会对<code>current_db</code>对应的数据库依次随机取出x个key，查看是否过期【expireIfNeeded()】，过期则执行删除，如果过期的key占到了25%以上，就会继续检查当前数据库，若小于25%则继续检查下一个数据库。当执行时间超过规定的最大执行时间会退出本次检查，下次检查将延续当前<code>current_db</code>对应的数据库。</p>\n<ul>\n<li>优点： 通过控制定时时间来动态的调整CPU和内存之间的状态，十分灵活。</li>\n<li>缺点：定期删除的定时时间十分重要，如果时间过短，就会对CPU造成很大压力。如果时间过长，就会造成过期数据挤压内存。</li>\n</ul>\n<p><mark>Redis 采取的是 惰性删除 + 定期检查的策略</mark></p>\n<p>主从复制时，从不会主动删除主数据库设置的过期key，而是根据惰性删除策略直接返回null，删除由主库执行过期删除后发送 del 命令进行同步。【我想这也是主从中主的概念，防止出现数据冲突】</p>\n<h2> Redis 内存淘汰策略</h2>\n<p>Redis 中的内存只有达到了阀值，才会触发内存淘汰算法,这个阀值就是我们设置的最大运行内存，在配置文件redis.conf中，通过参数 maxmemory &lt;bytes&gt; 来设置。</p>\n<p>1、volatile-lru:淘汰所有设置了过期时间的键值中最久未使用的键值；<code>istep选这个</code></p>\n<p>2、allkeys-lru:淘汰整个键值中最久未使用的键值；</p>\n<p>3、volatile-random:随机淘汰设置了过期时间的任意键值；</p>\n<p>4、allkeys-random:随机淘汰任意键值;</p>\n<p>5、volatile-ttl:优先淘汰更早过期的键值;</p>\n<p>6、noeviction:不淘汰任何数据，当内存不足时，新增操作会报错，Redis 默认内存淘汰策略；</p>\n<h2> QPS 和 TPS</h2>\n<p>QPS即每秒查询率，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p>\n<ul>\n<li>QPS = 并发量 / 平均响应时间</li>\n<li>并发量 = QPS * 平均响应时间</li>\n</ul>\n<p>TPS【Transactions Per Second】（每秒传输的事物处理个数），即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS = CAPS × 每个呼叫平均TPS）</p>\n<p>TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p>\n<p>一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。</p>\n<h2> 7层模型 / 5层模型</h2>\n<p>【TCP/IP 5层模型】物理层 -&gt; 数据链路层 -&gt; 网络层 -&gt; 运输层 -&gt; 应用层</p>\n<p>【传统 7层模型】网络层 -&gt; 数据链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 会话层 -&gt; 表示层 -&gt; 应用层</p>\n<p><code>作用</code></p>\n<h2> TCP / UDP 区别</h2>\n<h2> TCP 3次握手</h2>\n<h2> TCP 4次挥手</h2>\n<h2> Http 和 Https</h2>\n<h2> Http 连接过程</h2>\n<h2> Https 连接过程</h2>\n<p>在 Http 连接的基础上，在它之前先进行 SSL 握手，</p>\n<h2> 常见状态码</h2>\n<p><strong>2xx</strong>：</p>\n<ul>\n<li>200:</li>\n<li></li>\n</ul>\n<p><strong>4xx</strong>：</p>\n<ul>\n<li>403:</li>\n<li>404:</li>\n</ul>\n<p><strong>5xx</strong>：</p>\n<p><strong>3xx</strong>：</p>\n<ul>\n<li>301:</li>\n<li>302:</li>\n<li>304:</li>\n<li></li>\n</ul>\n<h2> Python 基本数据类型，list 和 set 、和 tuple 区别</h2>\n<h2> Python 闭包、装饰器</h2>\n<h3> 闭包</h3>\n<p>看看维基百科中的解释：</p>\n<blockquote>\n<p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。</p>\n</blockquote>\n<p>官方的解释总是不说人话，but talk is cheap，show me the code:</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>msg</code>是一个局部变量，在<code>print_msg</code>函数执行之后应该就不会存在了。但是嵌套函数引用了这个变量，将这个局部变量封闭在了嵌套函数中，这样就形成了一个闭包。</p>\n<p>结合这个例子再看维基百科的解释，就清晰明了多了。<mark>闭包就是引用了(上层函数)自有变量的函数，这个函数保存了执行的上下文，可以脱离原本的作用域独立存在</mark>。</p>\n<h3> 装饰器</h3>\n<p>装饰器这一语法体现了Python中函数是第一公民，函数是对象、是变量，可以作为参数、可以是返回值，非常的灵活与强大。</p>\n<p>普通的装饰器一般是这样：</p>\n<div class=\"language-go line-numbers-mode\" data-ext=\"go\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这样就定义了一个打印出方法名及其参数的装饰器。</p>\n<p>调用之：</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>输出：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>装饰器在使用时，用了<code>@</code>语法，让人有些困扰。其实，装饰器只是个方法，与下面的调用方式没有区别：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p><code>@</code>语法只是将函数传入装饰器函数，并无神奇之处。</p>\n<p>值得注意的是<code>@functools.wraps(func)</code>，这是python提供的装饰器。它能把原函数的元信息拷贝到装饰器里面的 func 函数中。函数的元信息包括docstring、<strong>name</strong>、参数列表等等。可以尝试去除<code>@functools.wraps(func)</code>，你会发现<code>test.__name__</code>的输出变成了wrapper。</p>\n<h3> 带参数的装饰器</h3>\n<p>装饰器允许传入参数，一个携带了参数的装饰器将有三层函数，如下所示：</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>看到这个代码是不是又有些疑问，内层的decorator函数的参数func是怎么传进去的？和上面一般的装饰器不大一样啊。</p>\n<p>其实道理是一样的，将其<code>@</code>语法去除，恢复函数调用的形式一看就明白了：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>输出结果与正常使用装饰器相同：</p>\n<div class=\"language-rust\" data-ext=\"rs\"></div><p>至此，装饰器这个有点费解的特性也没什么神秘了。</p>\n<h2> Python 赋值、浅拷贝、深拷贝（具体函数）</h2>\n<p>等号赋值：相当于为原来的对象打一个新的标签，<mark>两个引用指向同一个对象</mark>，修改其中的一个：若是可变对象，将在原对象上直接修改，即指向的地址值发生改变，因此另一个也会产生变化；若是不可变对象，则是新分配了一个地址空间，直接将该变量指向该处，对于原对象不做修改，故不会影响另一个。</p>\n<p>浅拷贝：两种情况，1. 浅拷贝的值是不可变对象（数值、字符、元组）时，和等于赋值一样，对象的id值和浅拷贝原来的值相同；2. 如果是可变对象（列表、字典等），a. 一个简单的没有嵌套的对象，复制前后的对象相互之间不会影响，b. 对象中有复杂子对象，如列表嵌套，如果改变原来的对象中复杂子对象的值，浅拷贝的值也会受影响，因为在浅拷贝时<strong>只复制了子对象的引用（只拷贝父对象）</strong>。</p>\n<p>深拷贝：新建一个对象，把原来对象的内存完全复制过来，改变复制后的对象，不会改动原来内存的内容。（两个对象在复制之后是完全独立的对象）</p>\n<p>举个例子，注意区分浅拷贝和直接赋值的差异：</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Python 怎么写多线程？</h2>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>多线程</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Python 多线程、GIL，与其他程序区别</h2>\n<p>全局解释锁，由其解释器 CPython 支持，是一把全局排他锁几乎等于Python是个单线程的程序。</p>\n<p><a href=\"/reprint/pythonMultithreading.html\" target=\"blank\">Python 多线程与 GIL</a></p>\n<h2> Python 内存管理机制，垃圾回收机制</h2>\n<p>内存管理：</p>\n<p>垃圾回收：</p>\n<h2> Django、FastApi、Flask</h2>\n<p>上牛客</p>\n<h2> PyTest 详细介绍</h2>\n<blockquote>\n<p>自动化测试框架</p>\n</blockquote>\n<h2> 接口自动化测试平台框架底层逻辑交互实现</h2>\n<h2> 测试按测试层次划分</h2>\n<p>单元测试 -&gt; 集成测试 -&gt; 系统测试</p>\n<p>单元测试：</p>\n<p>集成测试：</p>\n<p>系统测试：</p>\n<h2> 接口测试、回归测试</h2>\n<h2> 常用 Linux 命令</h2>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h2> Linux 怎么实现定时任务，Django呢?</h2>\n<h2> Docker</h2>\n<p>镜像 - 容器 - Engine，镜像和容器的关系就好比类和实例化对象</p>\n<p>docker域 - 守护进程</p>\n<h2> Postgresql</h2>\n<h2> 测试实例设计</h2>\n<h3> 微信视频</h3>\n<h3> 微信点赞</h3>\n<h3> 微信转账</h3>\n<h2> 怎么看待测开岗？（对测开职位的理解？）</h2>\n<p>一开始所实话也以为是测试什么程序的岗位，后来我上网了解了很多才发觉，</p>\n<h2> 未来职业规划</h2>\n<p>说实话，我这个人不太喜欢长远的规划，不过会有一个大体的方向在心中。</p>\n<p>首先，我是想在杭州定居的，所以最近的打算就是找份好工作安定下来，我认为海康就是很好的选择，说实话，我一开始也面试过字节、阿里，人往高处走嘛，这点无可厚非，当然结果是没过，后来也和阿里的学长交流过，现在觉得，人看清自己的位置很重要，好的位置更能创造价值。所以，假如这次我能加入海康，那最好在接下来的表现中拿到转正，那我的想法就是好好工作，未来3-5年内争取能够带领小团队，根据我个人及公司情况往管理或者技术继续发展。</p>\n<h2> 对Hikvision的了解，为什么选择Hikvision？</h2>\n<ol>\n<li>首先，自然是海康的实力是广受认可的，无论在技术上还是在市场上。</li>\n<li>其次，可能是受我表哥的影响吧，我和他关系挺好，他就在杭州工作，家刚好也在滨江区，和海康挺近。我在高中的时候就考虑在杭州生活了，所以大学也是选在了杭州，海康在杭州自然是不错的选择。</li>\n<li>之前也有面试过杭州的其他大厂，比如字节、阿里，我的技术栈和所招岗位需求不太匹配，而海康的这个测开岗是我目前了解到最匹配的岗位，加之我大学选择的也是移动互联方向，也学过一点硬件知识，和海康更是有更多的联系。</li>\n<li>最后，我对将来的规划一是保研，如果不行就找个好平台好工作，目前情况保研可能有一些困难，我个人也是更偏向于就业的，如果我表现的好，也希望可以争取转正的机会，继续留在海康。</li>\n</ol>\n<h2> 大学面临的最大挑战</h2>\n<p>istep算是一个吧，再讲讲我数学建模的经历吧。</p>\n<h2> 学生工作中印象最深的一次经历</h2>\n<h2> 看你简历中写了2个安卓开发，为什么不选择安卓开发？</h2>\n<p>我可以把它当作课余的爱好，</p>\n<h2> 你如何看待xxx消息？（一些关于公司的负面消息）</h2>\n<p>我觉得这些都是幸存者偏差罢了，只是极少数人的问题被放大了，目前站在一个第三者，我觉得这顶多说明少数组存在一定问题，但如果是我，既然当初我选择加入了公司，就应当真正把自己作为公司的一员，应当是与它一起慢慢成长，慢慢变好，而不是这种没用，甚至损害公司利益的行为。</p>\n<h2> 牛客收藏</h2>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-20T10:50:34.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "知识点整理",
      "url": "https://blog.yzketx.online/interview/note.html",
      "id": "https://blog.yzketx.online/interview/note.html",
      "summary": "知识点整理 SQL",
      "content_html": "<h1> 知识点整理</h1>\n<h2> SQL</h2>\n<h3> sql执行顺序</h3>\n<ol>\n<li>FROM：笛卡积</li>\n<li>ON：主表保留</li>\n<li>JOIN：</li>\n<li>WHERE：无法聚合、无法使用别名</li>\n<li>GROUP BY：改变表的引用（开始使用select中的别名，后面的语句中都可以使用）</li>\n<li>AGG_FUNC：聚合计算</li>\n<li>WITH ROOLUP/CUBE</li>\n<li>HAVING：仅用于分组后</li>\n<li>SELECT：选择列，表达式计算</li>\n<li>DISTINCT：行去重</li>\n<li>ORDER BY：无法运用表达式</li>\n<li>LIMIT：选择指定数量行</li>\n</ol>\n<h2> Java</h2>\n<h3> CopyOnWriteArrayList</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "API 必知必会",
      "url": "https://blog.yzketx.online/knowledge_base/api.html",
      "id": "https://blog.yzketx.online/knowledge_base/api.html",
      "summary": "API 必知必会 安全",
      "content_html": "<h1> API 必知必会</h1>\n<h2> 安全</h2>\n<p>API 在生产环境中不可返回缺失的参数信息，最多只可在调试阶段返回。</p>\n<h2> ？？</h2>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "备忘清单",
      "url": "https://blog.yzketx.online/knowledge_base/",
      "id": "https://blog.yzketx.online/knowledge_base/",
      "summary": "::: details deprecated 目录 SQL必知必会 (sql.md) updating… API必知必会 (api.md) updating… :::",
      "content_html": "",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "备忘清单"
      ]
    },
    {
      "title": "SQL 必知必会",
      "url": "https://blog.yzketx.online/knowledge_base/sql.html",
      "id": "https://blog.yzketx.online/knowledge_base/sql.html",
      "summary": "SQL 必知必会 count",
      "content_html": "<h1> SQL 必知必会</h1>\n<h2> count</h2>\n<ul>\n<li>count(*) ：它会获取所有行的数据，不做任何处理，行数加1。</li>\n<li>count(1)：它会获取所有行的数据，每行固定值1，也是行数加1。</li>\n<li>count(id)：id代表主键，它需要从所有行的数据中解析出id字段，其中id肯定都不为NULL，行数加1。</li>\n<li>count(普通索引列)：它需要从所有行的数据中解析出普通索引列，然后判断是否为NULL，如果不是NULL，则行数+1。</li>\n<li>count(未加索引列)：它会全表扫描获取所有数据，解析中未加索引列，然后判断是否为NULL，如果不是NULL，则行数+1。</li>\n</ul>\n<p>由此，最后count的性能从高到低是：</p>\n<blockquote>\n<p>count(*) ≈ count(1) &gt; count(id) &gt; count(普通索引列) &gt; count(未加索引列)</p>\n</blockquote>\n<p>所以，其实<code>count(*)</code>是最快的。</p>\n<p>参考自：https://mp.weixin.qq.com/s/g2NsLkclSTeUQoeDRER3Qg</p>\n<h2> group by</h2>\n<p>有一个原则，就是 select 后面的所有列中，没有使用聚合函数的列，必须出现在 group by 后面，否则会报错。可用 group_concat() 包裹输出。</p>\n<p>基础用法参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzU3Mjk2NDc3Ng==&amp;mid=2247483790&amp;idx=1&amp;sn=a3e69709dd27eff171d8754babe88026&amp;chksm=fcc9ab49cbbe225f55492bcbbc6ac12fe2734c4a3ac06801e1e72d536b481a6ac90d10155e6f&amp;scene=27\" target=\"_blank\" rel=\"noopener noreferrer\">想要弄懂GROUP BY看这一篇就够了</a></p>\n<h2> 关键字的执行顺序</h2>\n<div class=\"language-sql\" data-ext=\"sql\"></div><div class=\"language-sql\" data-ext=\"sql\"></div><p><mark>重要</mark> 进一步的，由于SQL语句执行顺序如下：</p>\n<div class=\"language-sql\" data-ext=\"sql\"></div><p>仅三类可以跟聚合函数：select、having、order by</p>\n<p>where 先于 having 执行，having 属于二次过滤，故能先 where 过滤的条件先过滤，性能会高很多。</p>\n<blockquote>\n<p>问：join on 和 where 的区别？</p>\n<p>答：一般两者的比较可以限定在联表查询的前提下</p>\n\n</blockquote>\n<h2> 子查询与连接查询</h2>\n<p>子查询方法在子查询内可排除大量数据的时候性能将优于连接查询</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 合并操作</h2>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "总结",
      "url": "https://blog.yzketx.online/leetcode/tips.html",
      "id": "https://blog.yzketx.online/leetcode/tips.html",
      "summary": "总结 思路",
      "content_html": "<h1> 总结</h1>\n<h2> 思路</h2>\n<ol>\n<li>\n<p>对于 <code>int</code> 数据处理可考虑：</p>\n<ul>\n<li>排序</li>\n<li>位运算，如异或</li>\n<li>数学规律</li>\n</ul>\n</li>\n<li>\n<p>递归【以中间情况来思考】</p>\n</li>\n<li>\n<p>从后往前！！比如在特定空间排序</p>\n</li>\n<li>\n<p>左右匹配：可用栈，左值直接入栈，右值与栈尾匹配</p>\n</li>\n<li>\n<p><code>连续长度的最值问题</code>优先考虑<code>滑动窗口</code></p>\n</li>\n<li>\n<p>对于多种走法的最值问题大多数情况下优先考虑BFS，如果用BFS解决不了再考虑DFS。\n对于多种走法的概率或种数问题则考虑用动态规划。</p>\n</li>\n<li>\n<p>利用位运算：</p>\n<ul>\n<li>\n<p>奇偶判断：&amp;1 -&gt; 与运算</p>\n</li>\n<li>\n<p>2倍运算：利用 &gt;&gt;n -&gt; /2^n，n&lt;&lt; -&gt;*2^n</p>\n</li>\n</ul>\n</li>\n<li>\n<p>由于python的特性，或许在一开始就申请完空间会比采用append更高效</p>\n</li>\n<li>\n<p>首尾指针：left, right = 0, length - 1; left &lt; right</p>\n</li>\n<li>\n<p>快慢指针：slow, fast = 0, 0; fast走的快</p>\n</li>\n<li>\n<p>快排的base可以取nums[low]/nums[high]</p>\n<p>对应：需要注意取nums[low]则需先从从高位开始向前，取nums[high]则需先从低位向后。</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>巧妙利用 短路特性</p>\n</li>\n<li>\n<p>搜索二叉树与中序遍历，左小右大</p>\n</li>\n<li>\n<p>完全二叉树叶子节点为所有节点的一半</p>\n</li>\n<li>\n<p>建立【大顶堆/小顶堆】只能保证堆顶的【最大/最小值】</p>\n</li>\n<li>\n<p>线段树？<a href=\"https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/\" target=\"_blank\" rel=\"noopener noreferrer\">最大子序和 - 最大子数组和 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n</li>\n<li>\n<p>HashMap用于解决匹配问题，如两数之和等</p>\n</li>\n<li></li>\n</ol>\n<h2> 常用函数</h2>\n<h3> C</h3>\n<p><code>调研快排</code></p>\n<div class=\"language-c\" data-ext=\"c\"></div><h3> Python</h3>\n<p><code>字符串反转</code></p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>字符串大小写转换</code></p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "算法"
      ]
    },
    {
      "title": "Typora",
      "url": "https://blog.yzketx.online/tip/typora.html",
      "id": "https://blog.yzketx.online/tip/typora.html",
      "summary": "Typora Typora is a cross-platform minimal markdown editor, providing seamless experience for both markdown readers and writers.",
      "content_html": "<h1> Typora</h1>\n<blockquote>\n<p>Typora is a cross-platform minimal markdown editor, providing seamless experience for both markdown readers and writers.</p>\n</blockquote>\n<h2> Markdown 格式</h2>\n<p><a href=\"https://support.typoraio.cn/Markdown-Reference/\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown Reference (typoraio.cn)</a></p>\n<h2> 快捷键</h2>\n<p><a href=\"https://support.typora.io/Shortcut-Keys/\" target=\"_blank\" rel=\"noopener noreferrer\">Shortcut (typora.io)</a></p>\n<h3> 文件</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">Hotkey （Windows/Linux）</th>\n<th>热键 （macOS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><mark>新建</mark></td>\n<td style=\"text-align:left\">Ctrl + N</td>\n<td>Command + N</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">新窗口</td>\n<td style=\"text-align:left\">Ctrl + Shift + N</td>\n<td>Command + Shift + N</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">新建Option卡</td>\n<td style=\"text-align:left\"><em>（不支持）</em></td>\n<td>Command + T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">打开</td>\n<td style=\"text-align:left\">Ctrl + O</td>\n<td>Command + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>快速打开</mark></td>\n<td style=\"text-align:left\">Ctrl + P</td>\n<td>Command + Shift + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">重新打开已关闭的文件</td>\n<td style=\"text-align:left\">Ctrl + Shift + T</td>\n<td>Command + Shift + T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">保存</td>\n<td style=\"text-align:left\">Ctrl + S</td>\n<td>Command + S</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">另存为/重复</td>\n<td style=\"text-align:left\">Ctrl + Shift + S</td>\n<td>Command + Shift + S</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">偏好</td>\n<td style=\"text-align:left\">Ctrl + ，</td>\n<td>Command + ，</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>关闭</mark></td>\n<td style=\"text-align:left\">Ctrl + W</td>\n<td>Command + W</td>\n</tr>\n</tbody>\n</table>\n<h3> 编辑</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">Hotkey （Windows/Linux）</th>\n<th>热键 （macOS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">新建段落</td>\n<td style=\"text-align:left\">Enter</td>\n<td>Enter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>新建行</mark></td>\n<td style=\"text-align:left\">Shift + Enter</td>\n<td>Shift + Enter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">剪切</td>\n<td style=\"text-align:left\">Ctrl + X</td>\n<td>Command + X</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复制</td>\n<td style=\"text-align:left\">Ctrl + C</td>\n<td>Command + C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">粘贴</td>\n<td style=\"text-align:left\">Ctrl + V</td>\n<td>Command + V</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复制为 Markdown</td>\n<td style=\"text-align:left\">Ctrl + Shift + C</td>\n<td>Command + Shift + C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">粘贴为纯文本</td>\n<td style=\"text-align:left\">Ctrl + Shift + V</td>\n<td>Command + Shift + V</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">全选</td>\n<td style=\"text-align:left\">Ctrl + A</td>\n<td>Command + A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>选择行/句子 选择行（在表中）</mark></td>\n<td style=\"text-align:left\">Ctrl + L</td>\n<td>Command + L</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>删除行（在表中）</mark></td>\n<td style=\"text-align:left\">Ctrl + Shift + Backspace</td>\n<td>Command + Shift + Backspace</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>选择样式范围 选择单元格（在表中）</mark></td>\n<td style=\"text-align:left\">Ctrl + E</td>\n<td>Command + E</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>选择单词</mark></td>\n<td style=\"text-align:left\">Ctrl + D</td>\n<td>Command + D</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>删除单词</mark></td>\n<td style=\"text-align:left\">Ctrl + Shift + D</td>\n<td>Command + Shift + D</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">跳到顶部</td>\n<td style=\"text-align:left\">Ctrl + Home</td>\n<td>Command + ↑</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>跳到选择</mark></td>\n<td style=\"text-align:left\">Ctrl + J</td>\n<td>Command + J</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">跳到底部</td>\n<td style=\"text-align:left\">Ctrl + End</td>\n<td>Command + ↓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">找到</td>\n<td style=\"text-align:left\">Ctrl + F</td>\n<td>Command + F</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找下一个</td>\n<td style=\"text-align:left\">F3 / Enter</td>\n<td>Command + G / Enter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找上一页</td>\n<td style=\"text-align:left\">Shift + F3 / Shift + Enter</td>\n<td>Command + Shift + G / Shift + Enter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>替换</mark></td>\n<td style=\"text-align:left\">Ctrl + H</td>\n<td>Command + H</td>\n</tr>\n</tbody>\n</table>\n<h3> 段</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">Hotkey （Windows/Linux）</th>\n<th>热键 （macOS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">标题 1 到 6</td>\n<td style=\"text-align:left\">Ctrl + 1/2/3/4/5/6</td>\n<td>Command + 1/2/3/4/5/6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">段</td>\n<td style=\"text-align:left\">Ctrl + 0</td>\n<td>Command + 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提高标题级别</td>\n<td style=\"text-align:left\">Ctrl + =</td>\n<td>Command + =</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">降低标题级别</td>\n<td style=\"text-align:left\">Ctrl + -</td>\n<td>Command + -</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">插入表格</td>\n<td style=\"text-align:left\">Ctrl + T</td>\n<td>Command + Option + T</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">代码块</td>\n<td style=\"text-align:left\">Ctrl + Shift + K</td>\n<td>Command + Option + C</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数学块</td>\n<td style=\"text-align:left\">Ctrl + Shift + M</td>\n<td>Command + Option + B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Quote[提示块]</td>\n<td style=\"text-align:left\">Ctrl + Shift + Q</td>\n<td>Command + Option + Q</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">有序列表</td>\n<td style=\"text-align:left\">Ctrl + Shift + [</td>\n<td>Command + Option + O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">无序列表</td>\n<td style=\"text-align:left\">Ctrl + Shift + ]</td>\n<td>Command + Option + U</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">缩进</td>\n<td style=\"text-align:left\">Ctrl + [ / Tab</td>\n<td>Command + [ / Tab</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">取消缩进</td>\n<td style=\"text-align:left\">Ctrl + ] / Shift + Tab</td>\n<td>Command + ] / Shift + Tab</td>\n</tr>\n</tbody>\n</table>\n<h3> 格式</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">Hotkey （Windows/Linux）</th>\n<th>热键 （macOS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>粗体</strong></td>\n<td style=\"text-align:left\">Ctrl + B</td>\n<td>Command + B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>斜体</em></td>\n<td style=\"text-align:left\">Ctrl + I</td>\n<td>Command + I</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><u>下划线</u></td>\n<td style=\"text-align:left\">Ctrl + U</td>\n<td>Command + U</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>容器块</code></td>\n<td style=\"text-align:left\">Ctrl + Shift + '</td>\n<td>Command + Shift + '</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><s>删除线</s></td>\n<td style=\"text-align:left\">Alt + Shift + 5</td>\n<td>Control + Shift + '</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"\">超链接</a></td>\n<td style=\"text-align:left\">Ctrl + K</td>\n<td>Command + K</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">![图像](xxx)</td>\n<td style=\"text-align:left\">Ctrl + Shift + I</td>\n<td>Command + Control + I</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">清除格式</td>\n<td style=\"text-align:left\">Ctrl + \\</td>\n<td>Command + \\</td>\n</tr>\n</tbody>\n</table>\n<h3> 视图</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">Hotkey （Windows/Linux）</th>\n<th>热键 （macOS）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><mark>切换侧边栏</mark></td>\n<td style=\"text-align:left\">Ctrl + Shift + L</td>\n<td>Command + Shift + L</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大纲</td>\n<td style=\"text-align:left\">Ctrl + Shift + 1</td>\n<td>Command + Control + 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文章</td>\n<td style=\"text-align:left\">Ctrl + Shift + 2</td>\n<td>Command + Control + 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文件树</td>\n<td style=\"text-align:left\">Ctrl + Shift + 3</td>\n<td>Command + Control + 3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">源代码模式</td>\n<td style=\"text-align:left\">Ctrl + /</td>\n<td>Command + /</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark>聚焦模式</mark></td>\n<td style=\"text-align:left\">F8</td>\n<td>F8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">打字机模式</td>\n<td style=\"text-align:left\">F9</td>\n<td>F9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">切换全屏</td>\n<td style=\"text-align:left\">F11</td>\n<td>Command + Option + F</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">实际大小</td>\n<td style=\"text-align:left\">Ctrl + Shift + 0</td>\n<td><em>（不支持）</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">放大</td>\n<td style=\"text-align:left\">Ctrl + Shift + =</td>\n<td><em>（不支持）</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">缩小</td>\n<td style=\"text-align:left\">Ctrl + Shift + -</td>\n<td><em>（不支持）</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在打开的文档之间切换</td>\n<td style=\"text-align:left\">Ctrl + Tab</td>\n<td>Command + '</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">切换开发工具</td>\n<td style=\"text-align:left\">Ctrl + Shift + I</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2022-02-15T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "开源协议",
      "url": "https://blog.yzketx.online/book/ddia/LICENSE.html",
      "id": "https://blog.yzketx.online/book/ddia/LICENSE.html",
      "summary": "Attribution 4.0 International",
      "content_html": "<h1> Attribution 4.0 International</h1>\n<p>=======================================================================</p>\n<p>Creative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.</p>\n<p>Using Creative Commons Public Licenses</p>\n<p>Creative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.</p>\n\n<p>=======================================================================</p>\n<p>Creative Commons Attribution 4.0 International Public License</p>\n<p>By exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution 4.0 International Public License (\"Public License\"). To the\nextent this Public License may be interpreted as a contract, You are\ngranted the Licensed Rights in consideration of Your acceptance of\nthese terms and conditions, and the Licensor grants You such rights in\nconsideration of benefits the Licensor receives from making the\nLicensed Material available under these terms and conditions.</p>\n<p>Section 1 -- Definitions.</p>\n<p>a. Adapted Material means material subject to Copyright and Similar\nRights that is derived from or based upon the Licensed Material\nand in which the Licensed Material is translated, altered,\narranged, transformed, or otherwise modified in a manner requiring\npermission under the Copyright and Similar Rights held by the\nLicensor. For purposes of this Public License, where the Licensed\nMaterial is a musical work, performance, or sound recording,\nAdapted Material is always produced where the Licensed Material is\nsynched in timed relation with a moving image.</p>\n<p>b. Adapter's License means the license You apply to Your Copyright\nand Similar Rights in Your contributions to Adapted Material in\naccordance with the terms and conditions of this Public License.</p>\n<p>c. Copyright and Similar Rights means copyright and/or similar rights\nclosely related to copyright including, without limitation,\nperformance, broadcast, sound recording, and Sui Generis Database\nRights, without regard to how the rights are labeled or\ncategorized. For purposes of this Public License, the rights\nspecified in Section 2(b)(1)-(2) are not Copyright and Similar\nRights.</p>\n<p>d. Effective Technological Measures means those measures that, in the\nabsence of proper authority, may not be circumvented under laws\nfulfilling obligations under Article 11 of the WIPO Copyright\nTreaty adopted on December 20, 1996, and/or similar international\nagreements.</p>\n<p>e. Exceptions and Limitations means fair use, fair dealing, and/or\nany other exception or limitation to Copyright and Similar Rights\nthat applies to Your use of the Licensed Material.</p>\n<p>f. Licensed Material means the artistic or literary work, database,\nor other material to which the Licensor applied this Public\nLicense.</p>\n<p>g. Licensed Rights means the rights granted to You subject to the\nterms and conditions of this Public License, which are limited to\nall Copyright and Similar Rights that apply to Your use of the\nLicensed Material and that the Licensor has authority to license.</p>\n<p>h. Licensor means the individual(s) or entity(ies) granting rights\nunder this Public License.</p>\n<p>i. Share means to provide material to the public by any means or\nprocess that requires permission under the Licensed Rights, such\nas reproduction, public display, public performance, distribution,\ndissemination, communication, or importation, and to make material\navailable to the public including in ways that members of the\npublic may access the material from a place and at a time\nindividually chosen by them.</p>\n<p>j. Sui Generis Database Rights means rights other than copyright\nresulting from Directive 96/9/EC of the European Parliament and of\nthe Council of 11 March 1996 on the legal protection of databases,\nas amended and/or succeeded, as well as other essentially\nequivalent rights anywhere in the world.</p>\n<p>k. You means the individual or entity exercising the Licensed Rights\nunder this Public License. Your has a corresponding meaning.</p>\n<p>Section 2 -- Scope.</p>\n<p>a. License grant.</p>\n\n<p>b. Other rights.</p>\n\n<p>Section 3 -- License Conditions.</p>\n<p>Your exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.</p>\n<p>a. Attribution.</p>\n\n<p>Section 4 -- Sui Generis Database Rights.</p>\n<p>Where the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:</p>\n<p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right\nto extract, reuse, reproduce, and Share all or a substantial\nportion of the contents of the database;</p>\n<p>b. if You include all or a substantial portion of the database\ncontents in a database in which You have Sui Generis Database\nRights, then the database in which You have Sui Generis Database\nRights (but not its individual contents) is Adapted Material; and</p>\n<p>c. You must comply with the conditions in Section 3(a) if You Share\nall or a substantial portion of the contents of the database.</p>\n<p>For the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.</p>\n<p>Section 5 -- Disclaimer of Warranties and Limitation of Liability.</p>\n<p>a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\nEXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\nAND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\nANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\nIMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\nWARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\nACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\nKNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\nALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.</p>\n<p>b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\nTO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\nNEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\nINCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\nCOSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\nUSE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\nADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\nDAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\nIN PART, THIS LIMITATION MAY NOT APPLY TO YOU.</p>\n<p>c. The disclaimer of warranties and limitation of liability provided\nabove shall be interpreted in a manner that, to the extent\npossible, most closely approximates an absolute disclaimer and\nwaiver of all liability.</p>\n<p>Section 6 -- Term and Termination.</p>\n<p>a. This Public License applies for the term of the Copyright and\nSimilar Rights licensed here. However, if You fail to comply with\nthis Public License, then Your rights under this Public License\nterminate automatically.</p>\n<p>b. Where Your right to use the Licensed Material has terminated under\nSection 6(a), it reinstates:</p>\n\n<p>c. For the avoidance of doubt, the Licensor may also offer the\nLicensed Material under separate terms or conditions or stop\ndistributing the Licensed Material at any time; however, doing so\nwill not terminate this Public License.</p>\n<p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\nLicense.</p>\n<p>Section 7 -- Other Terms and Conditions.</p>\n<p>a. The Licensor shall not be bound by any additional or different\nterms or conditions communicated by You unless expressly agreed.</p>\n<p>b. Any arrangements, understandings, or agreements regarding the\nLicensed Material not stated herein are separate from and\nindependent of the terms and conditions of this Public License.</p>\n<p>Section 8 -- Interpretation.</p>\n<p>a. For the avoidance of doubt, this Public License does not, and\nshall not be interpreted to, reduce, limit, restrict, or impose\nconditions on any use of the Licensed Material that could lawfully\nbe made without permission under this Public License.</p>\n<p>b. To the extent possible, if any provision of this Public License is\ndeemed unenforceable, it shall be automatically reformed to the\nminimum extent necessary to make it enforceable. If the provision\ncannot be reformed, it shall be severed from this Public License\nwithout affecting the enforceability of the remaining terms and\nconditions.</p>\n<p>c. No term or condition of this Public License will be waived and no\nfailure to comply consented to unless expressly agreed to by the\nLicensor.</p>\n<p>d. Nothing in this Public License constitutes or may be interpreted\nas a limitation upon, or waiver of, any privileges and immunities\nthat apply to the Licensor or You, including from the legal\nprocesses of any jurisdiction or authority.</p>\n<p>=======================================================================</p>\n<p>Creative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.</p>\n<p>Creative Commons may be contacted at creativecommons.org.</p>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Markdown 示例",
      "url": "https://blog.yzketx.online/tip/markdown/demo.html",
      "id": "https://blog.yzketx.online/tip/markdown/demo.html",
      "summary": "二级标题 三级标题 四级标题 五级标题 六级标题 文本 这句话里拥有加粗、倾斜和 段落 这是一个段落。 这是另一个段落。 换行 这是一句话不过我要在这里 换行 上方的代码中 这里 后面有两个空格 引用 引用也可以连用 可以添加额外的大于号制造更深的引用 列表 无序列表 无序列表项; 无序列表项; 列表中的列表项; 更多的列表项; 更多的列表项; 更多的...",
      "content_html": "<!-- markdownlint-disable -->\n<h1> 一级标题</h1>\n<!-- markdownlint-restore -->\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> 二级标题</h2>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h3> 三级标题</h3>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h4> 四级标题</h4>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h5> 五级标题</h5>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h6> 六级标题</h6>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> 文本</h2>\n<p>这句话里拥有<strong>加粗</strong>、<em>倾斜</em>和<s>删除</s></p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> 段落</h2>\n<p>这是一个段落。</p>\n<p>这是另一个段落。</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> 换行</h2>\n<p>这是一句话不过我要在这里<br>\n换行</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>上方的代码中 <code>这里</code> 后面有两个空格</p>\n</div>\n<h2> 引用</h2>\n<blockquote>\n<p>引用也可以连用</p>\n<blockquote>\n<p>可以添加额外的大于号制造更深的引用</p>\n</blockquote>\n</blockquote>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> 列表</h2>\n<h3> 无序列表</h3>\n<ul>\n<li>\n<p>无序列表项</p>\n</li>\n<li>\n<p>无序列表项</p>\n<ul>\n<li>\n<p>列表中的列表项</p>\n<ul>\n<li>更多的列表项</li>\n<li>更多的列表项</li>\n<li>更多的列表项</li>\n</ul>\n</li>\n<li>\n<p>列表中的长列表项，这个列表项很长。</p>\n<p>而且由很多个段落构成。</p>\n<p>甚至最后一个段落还包含了<a href=\"#%E9%93%BE%E6%8E%A5\">链接</a>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>无序列表项</p>\n</li>\n</ul>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 有序列表</h3>\n<ol>\n<li>有序列表第一项</li>\n<li>有序列表第二项<br>\n第二项的需要换行<br>\n再次换行</li>\n<li>有序列表第三项</li>\n</ol>\n<div class=\"language-markdown\" data-ext=\"md\"></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>上方的代码中<code>换行</code>后面有也两个空格</p>\n</div>\n<h2> 分割线</h2>\n<hr>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> 链接</h2>\n<blockquote>\n<p>由于该示例转至 <a href=\"https://github.com/vuepress-theme-hope/vuepress-theme-hope/tree/main/docs/theme/src/zh/cookbook/markdown\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-hope-theme 文档</a>,故原链接不适配，所幸去掉了。</p>\n</blockquote>\n<p>[根目录访问主页]</p>\n<p>[相对路径访问主页]</p>\n<p>[根目录访问示例]</p>\n<p>[相对路径访问示例]</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>VuePress 还兼容如下跳转到主页的写法:</p>\n<ul>\n<li>\n<p>[相对路径访问，兼容 Markdown 编写时相互跳转]</p>\n</li>\n<li>\n<p>[根目录访问主页 2]</p>\n</li>\n<li>\n<p>[HTML 形式]</p>\n</li>\n</ul>\n<p>如果希望在使用编辑器编辑 Markdown 时也能够进行相互跳转的话，则需要全部使用<strong>相对路径</strong>，并且<code>README.md</code><strong>不能省略</strong>。</p>\n<p>代码:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div></div>\n<h2> 图片</h2>\n<figure><img src=\"/logo.png\" alt=\"Logo\" tabindex=\"0\"><figcaption>Logo</figcaption></figure>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> Emoji</h2>\n<p>经典方式:</p>\n<p>😉 😢 😆 😋</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>简写:</p>\n<p>😎 😃 :* 😦 😃 😦 😉</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>更多详见<a href=\"/tip/markdown/emoji/\" target=\"blank\">emoji 列表</a></p>\n</div>\n<h2> 表格</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">居中</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:left\">左对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">居中使用<code>:-:</code></td>\n<td style=\"text-align:right\">右对齐使用<code>-:</code></td>\n<td style=\"text-align:left\">左对齐使用<code>:-</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:right\">aaaaaaaaa</td>\n<td style=\"text-align:left\">aaaa</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:right\">aaaa</td>\n<td style=\"text-align:left\">a</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> 代码</h2>\n<p>行内代码效果: <code>code</code></p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>缩进代码:</p>\n<div class=\"language-text\" data-ext=\"text\"></div><p>实际代码:</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>块级代码</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><div class=\"language-markdown\" data-ext=\"md\"></div><p>高亮格式:</p>\n<div class=\"language-javascript\" data-ext=\"js\"></div><div class=\"language-markdown\" data-ext=\"md\"></div>",
      "image": "https://blog.yzketx.online/logo.png",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "Markdown Emoji v1 汇总",
      "url": "https://blog.yzketx.online/tip/markdown/emoji/emoji.html",
      "id": "https://blog.yzketx.online/tip/markdown/emoji/emoji.html",
      "summary": "\"100\": \"💯\", \"1234\": \"🔢\", \"grinning\": \"😀\", \"smiley\": \"😃\", \"smile\": \"😄\", \"grin\": \"😁\", \"laughing\": \"😆\", \"satisfied\": \"😆\", \"sweat_smile\": \"😅\", \"rofl\": \"🤣\", \"joy\": \"😂\", \"slightly_smiling_face\": \"🙂\", \"upside_down_face\": \"🙃\", \"wink\": \"😉\", \"blush\": \"😊\", \"innocent\": \"😇\", \"smiling_face_with_three_hearts\": \"🥰\", \"heart_eyes\": \"😍\", \"star_struck\": \"🤩\", \"kissing_heart\": \"😘\", \"kissing\": \"😗\", \"relaxed\": \"☺️\", \"kissing_closed_eyes\": \"😚\", \"kissing_smiling_eyes\": \"😙\", \"smiling_face_with_tear\": \"🥲\", \"yum\": \"😋\", \"stuck_out_tongue\": \"😛\", \"stuck_out_tongue_winking_eye\": \"😜\", \"zany_face\": \"🤪\", \"stuck_out_tongue_closed_eyes\": \"😝\", \"money_mouth_face\": \"🤑\", \"hugs\": \"🤗\", \"hand_over_mouth\": \"🤭\", \"shushing_face\": \"🤫\", \"thinking\": \"🤔\", \"zipper_mouth_face\": \"🤐\", \"raised_eyebrow\": \"🤨\", \"neutral_face\": \"😐\", \"expressionless\": \"😑\", \"no_mouth\": \"😶\", \"smirk\": \"😏\", \"unamused\": \"😒\", \"roll_eyes\": \"🙄\", \"grimacing\": \"😬\", \"lying_face\": \"🤥\", \"relieved\": \"😌\", \"pensive\": \"😔\", \"sleepy\": \"😪\", \"drooling_face\": \"🤤\", \"sleeping\": \"😴\", \"mask\": \"😷\", \"face_with_thermometer\": \"🤒\", \"face_with_head_bandage\": \"🤕\", \"nauseated_face\": \"🤢\", \"vomiting_face\": \"🤮\", \"sneezing_face\": \"🤧\", \"hot_face\": \"🥵\", \"cold_face\": \"🥶\", \"woozy_face\": \"🥴\", \"dizzy_face\": \"😵\", \"exploding_head\": \"🤯\", \"cowboy_hat_face\": \"🤠\", \"partying_face\": \"🥳\", \"disguised_face\": \"🥸\", \"sunglasses\": \"😎\", \"nerd_face\": \"🤓\", \"monocle_face\": \"🧐\", \"confused\": \"😕\", \"worried\": \"😟\", \"slightly_frowning_face\": \"🙁\", \"frowning_face\": \"☹️\", \"open_mouth\": \"😮\", \"hushed\": \"😯\", \"astonished\": \"😲\", \"flushed\": \"😳\", \"pleading_face\": \"🥺\", \"frowning\": \"😦\", \"anguished\": \"😧\", \"fearful\": \"😨\", \"cold_sweat\": \"😰\", \"disappointed_relieved\": \"😥\", \"cry\": \"😢\", \"sob\": \"😭\", \"scream\": \"😱\", \"confounded\": \"😖\", \"persevere\": \"😣\", \"disappointed\": \"😞\", \"sweat\": \"😓\", \"weary\": \"😩\", \"tired_face\": \"😫\", \"yawning_face\": \"🥱\", \"triumph\": \"😤\", \"rage\": \"😡\", \"pout\": \"😡\", \"angry\": \"😠\", \"cursing_face\": \"🤬\", \"smiling_imp\": \"😈\", \"imp\": \"👿\", \"skull\": \"💀\", \"skull_and_crossbones\": \"☠️\", \"hankey\": \"💩\", \"poop\": \"💩\", \"shit\": \"💩\", \"clown_face\": \"🤡\", \"japanese_ogre\": \"👹\", \"japanese_goblin\": \"👺\", \"ghost\": \"👻\", \"alien\": \"👽\", \"space_invader\": \"👾\", \"robot\": \"🤖\", \"smiley_cat\": \"😺\", \"smile_cat\": \"😸\", \"joy_cat\": \"😹\", \"heart_eyes_cat\": \"😻\", \"smirk_cat\": \"😼\", \"kissing_cat\": \"😽\", \"scream_cat\": \"🙀\", \"crying_cat_face\": \"😿\", \"pouting_cat\": \"😾\", \"see_no_evil\": \"🙈\", \"hear_no_evil\": \"🙉\", \"speak_no_evil\": \"🙊\", \"kiss\": \"💋\", \"love_letter\": \"💌\", \"cupid\": \"💘\", \"gift_heart\": \"💝\", \"sparkling_heart\": \"💖\", \"heartpulse\": \"💗\", \"heartbeat\": \"💓\", \"revolving_hearts\": \"💞\", \"two_hearts\": \"💕\", \"heart_decoration\": \"💟\", \"heavy_heart_exclamation\": \"❣️\", \"broken_heart\": \"💔\", \"heart\": \"❤️\", \"orange_heart\": \"🧡\", \"yellow_heart\": \"💛\", \"green_heart\": \"💚\", \"blue_heart\": \"💙\", \"purple_heart\": \"💜\", \"brown_heart\": \"🤎\", \"black_heart\": \"🖤\", \"white_heart\": \"🤍\", \"anger\": \"💢\", \"boom\": \"💥\", \"collision\": \"💥\", \"dizzy\": \"💫\", \"sweat_drops\": \"💦\", \"dash\": \"💨\", \"hole\": \"🕳️\", \"bomb\": \"💣\", \"speech_balloon\": \"💬\", \"eye_speech_bubble\": \"👁️‍🗨️\", \"left_speech_bubble\": \"🗨️\", \"right_anger_bubble\": \"🗯️\", \"thought_balloon\": \"💭\", \"zzz\": \"💤\", \"wave\": \"👋\", \"raised_back_of_hand\": \"🤚\", \"raised_hand_with_fingers_splayed\": \"🖐️\", \"hand\": \"✋\", \"raised_hand\": \"✋\", \"vulcan_salute\": \"🖖\", \"ok_hand\": \"👌\", \"pinched_fingers\": \"🤌\", \"pinching_hand\": \"🤏\", \"v\": \"✌️\", \"crossed_fingers\": \"🤞\", \"love_you_gesture\": \"🤟\", \"metal\": \"🤘\", \"call_me_hand\": \"🤙\", \"point_left\": \"👈\", \"point_right\": \"👉\", \"point_up_2\": \"👆\", \"middle_finger\": \"🖕\", \"fu\": \"🖕\", \"point_down\": \"👇\", \"point_up\": \"☝️\", \"+1\": \"👍\", \"thumbsup\": \"👍\", \"-1\": \"👎\", \"thumbsdown\": \"👎\", \"fist_raised\": \"✊\", \"fist\": \"✊\", \"fist_oncoming\": \"👊\", \"facepunch\": \"👊\", \"punch\": \"👊\", \"fist_left\": \"🤛\", \"fist_right\": \"🤜\", \"clap\": \"👏\", \"raised_hands\": \"🙌\", \"open_hands\": \"👐\", \"palms_up_together\": \"🤲\", \"handshake\": \"🤝\", \"pray\": \"🙏\", \"writing_hand\": \"✍️\", \"nail_care\": \"💅\", \"selfie\": \"🤳\", \"muscle\": \"💪\", \"mechanical_arm\": \"🦾\", \"mechanical_leg\": \"🦿\", \"leg\": \"🦵\", \"foot\": \"🦶\", \"ear\": \"👂\", \"ear_with_hearing_aid\": \"🦻\", \"nose\": \"👃\", \"brain\": \"🧠\", \"anatomical_heart\": \"🫀\", \"lungs\": \"🫁\", \"tooth\": \"🦷\", \"bone\": \"🦴\", \"eyes\": \"👀\", \"eye\": \"👁️\", \"tongue\": \"👅\", \"lips\": \"👄\", \"baby\": \"👶\", \"child\": \"🧒\", \"boy\": \"👦\", \"girl\": \"👧\", \"adult\": \"🧑\", \"blond_haired_person\": \"👱\", \"man\": \"👨\", \"bearded_person\": \"🧔\", \"red_haired_man\": \"👨‍🦰\", \"curly_haired_man\": \"👨‍🦱\", \"white_haired_man\": \"👨‍🦳\", \"bald_man\": \"👨‍🦲\", \"woman\": \"👩\", \"red_haired_woman\": \"👩‍🦰\", \"person_red_hair\": \"🧑‍🦰\", \"curly_haired_woman\": \"👩‍🦱\", \"person_curly_hair\": \"🧑‍🦱\", \"white_haired_woman\": \"👩‍🦳\", \"person_white_hair\": \"🧑‍🦳\", \"bald_woman\": \"👩‍🦲\", \"person_bald\": \"🧑‍🦲\", \"blond_haired_woman\": \"👱‍♀️\", \"blonde_woman\": \"👱‍♀️\", \"blond_haired_man\": \"👱‍♂️\", \"older_adult\": \"🧓\", \"older_man\": \"👴\", \"older_woman\": \"👵\", \"frowning_person\": \"🙍\", \"frowning_man\": \"🙍‍♂️\", \"frowning_woman\": \"🙍‍♀️\", \"pouting_face\": \"🙎\", \"pouting_man\": \"🙎‍♂️\", \"pouting_woman\": \"🙎‍♀️\", \"no_good\": \"🙅\", \"no_good_man\": \"🙅‍♂️\", \"ng_man\": \"🙅‍♂️\", \"no_good_woman\": \"🙅‍♀️\", \"ng_woman\": \"🙅‍♀️\", \"ok_person\": \"🙆\", \"ok_man\": \"🙆‍♂️\", \"ok_woman\": \"🙆‍♀️\", \"tipping_hand_person\": \"💁\", \"information_desk_person\": \"💁\", \"tipping_hand_man\": \"💁‍♂️\", \"sassy_man\": \"💁‍♂️\", \"tipping_hand_woman\": \"💁‍♀️\", \"sassy_woman\": \"💁‍♀️\", \"raising_hand\": \"🙋\", \"raising_hand_man\": \"🙋‍♂️\", \"raising_hand_woman\": \"🙋‍♀️\", \"deaf_person\": \"🧏\", \"deaf_man\": \"🧏‍♂️\", \"deaf_woman\": \"🧏‍♀️\", \"bow\": \"🙇\", \"bowing_man\": \"🙇‍♂️\", \"bowing_woman\": \"🙇‍♀️\", \"facepalm\": \"🤦\", \"man_facepalming\": \"🤦‍♂️\", \"woman_facepalming\": \"🤦‍♀️\", \"shrug\": \"🤷\", \"man_shrugging\": \"🤷‍♂️\", \"woman_shrugging\": \"🤷‍♀️\", \"health_worker\": \"🧑‍⚕️\", \"man_health_worker\": \"👨‍⚕️\", \"woman_health_worker\": \"👩‍⚕️\", \"student\": \"🧑‍🎓\", \"man_student\": \"👨‍🎓\", \"woman_student\": \"👩‍🎓\", \"teacher\": \"🧑‍🏫\", \"man_teacher\": \"👨‍🏫\", \"woman_teacher\": \"👩‍🏫\", \"judge\": \"🧑‍⚖️\", \"man_judge\": \"👨‍⚖️\", \"woman_judge\": \"👩‍⚖️\", \"farmer\": \"🧑‍🌾\", \"man_farmer\": \"👨‍🌾\", \"woman_farmer\": \"👩‍🌾\", \"cook\": \"🧑‍🍳\", \"man_cook\": \"👨‍🍳\", \"woman_cook\": \"👩‍🍳\", \"mechanic\": \"🧑‍🔧\", \"man_mechanic\": \"👨‍🔧\", \"woman_mechanic\": \"👩‍🔧\", \"factory_worker\": \"🧑‍🏭\", \"man_factory_worker\": \"👨‍🏭\", \"woman_factory_worker\": \"👩‍🏭\", \"office_worker\": \"🧑‍💼\", \"man_office_worker\": \"👨‍💼\", \"woman_office_worker\": \"👩‍💼\", \"scientist\": \"🧑‍🔬\", \"man_scientist\": \"👨‍🔬\", \"woman_scientist\": \"👩‍🔬\", \"technologist\": \"🧑‍💻\", \"man_technologist\": \"👨‍💻\", \"woman_technologist\": \"👩‍💻\", \"singer\": \"🧑‍🎤\", \"man_singer\": \"👨‍🎤\", \"woman_singer\": \"👩‍🎤\", \"artist\": \"🧑‍🎨\", \"man_artist\": \"👨‍🎨\", \"woman_artist\": \"👩‍🎨\", \"pilot\": \"🧑‍✈️\", \"man_pilot\": \"👨‍✈️\", \"woman_pilot\": \"👩‍✈️\", \"astronaut\": \"🧑‍🚀\", \"man_astronaut\": \"👨‍🚀\", \"woman_astronaut\": \"👩‍🚀\", \"firefighter\": \"🧑‍🚒\", \"man_firefighter\": \"👨‍🚒\", \"woman_firefighter\": \"👩‍🚒\", \"police_officer\": \"👮\", \"cop\": \"👮\", \"policeman\": \"👮‍♂️\", \"policewoman\": \"👮‍♀️\", \"detective\": \"🕵️\", \"male_detective\": \"🕵️‍♂️\", \"female_detective\": \"🕵️‍♀️\", \"guard\": \"💂\", \"guardsman\": \"💂‍♂️\", \"guardswoman\": \"💂‍♀️\", \"ninja\": \"🥷\", \"construction_worker\": \"👷\", \"construction_worker_man\": \"👷‍♂️\", \"construction_worker_woman\": \"👷‍♀️\", \"prince\": \"🤴\", \"princess\": \"👸\", \"person_with_turban\": \"👳\", \"man_with_turban\": \"👳‍♂️\", \"woman_with_turban\": \"👳‍♀️\", \"man_with_gua_pi_mao\": \"👲\", \"woman_with_headscarf\": \"🧕\", \"person_in_tuxedo\": \"🤵\", \"man_in_tuxedo\": \"🤵‍♂️\", \"woman_in_tuxedo\": \"🤵‍♀️\", \"person_with_veil\": \"👰\", \"man_with_veil\": \"👰‍♂️\", \"woman_with_veil\": \"👰‍♀️\", \"bride_with_veil\": \"👰‍♀️\", \"pregnant_woman\": \"🤰\", \"breast_feeding\": \"🤱\", \"woman_feeding_baby\": \"👩‍🍼\", \"man_feeding_baby\": \"👨‍🍼\", \"person_feeding_baby\": \"🧑‍🍼\", \"angel\": \"👼\", \"santa\": \"🎅\", \"mrs_claus\": \"🤶\", \"mx_claus\": \"🧑‍🎄\", \"superhero\": \"🦸\", \"superhero_man\": \"🦸‍♂️\", \"superhero_woman\": \"🦸‍♀️\", \"supervillain\": \"🦹\", \"supervillain_man\": \"🦹‍♂️\", \"supervillain_woman\": \"🦹‍♀️\", \"mage\": \"🧙\", \"mage_man\": \"🧙‍♂️\", \"mage_woman\": \"🧙‍♀️\", \"fairy\": \"🧚\", \"fairy_man\": \"🧚‍♂️\", \"fairy_woman\": \"🧚‍♀️\", \"vampire\": \"🧛\", \"vampire_man\": \"🧛‍♂️\", \"vampire_woman\": \"🧛‍♀️\", \"merperson\": \"🧜\", \"merman\": \"🧜‍♂️\", \"mermaid\": \"🧜‍♀️\", \"elf\": \"🧝\", \"elf_man\": \"🧝‍♂️\", \"elf_woman\": \"🧝‍♀️\", \"genie\": \"🧞\", \"genie_man\": \"🧞‍♂️\", \"genie_woman\": \"🧞‍♀️\", \"zombie\": \"🧟\", \"zombie_man\": \"🧟‍♂️\", \"zombie_woman\": \"🧟‍♀️\", \"massage\": \"💆\", \"massage_man\": \"💆‍♂️\", \"massage_woman\": \"💆‍♀️\", \"haircut\": \"💇\", \"haircut_man\": \"💇‍♂️\", \"haircut_woman\": \"💇‍♀️\", \"walking\": \"🚶\", \"walking_man\": \"🚶‍♂️\", \"walking_woman\": \"🚶‍♀️\", \"standing_person\": \"🧍\", \"standing_man\": \"🧍‍♂️\", \"standing_woman\": \"🧍‍♀️\", \"kneeling_person\": \"🧎\", \"kneeling_man\": \"🧎‍♂️\", \"kneeling_woman\": \"🧎‍♀️\", \"person_with_probing_cane\": \"🧑‍🦯\", \"man_with_probing_cane\": \"👨‍🦯\", \"woman_with_probing_cane\": \"👩‍🦯\", \"person_in_motorized_wheelchair\": \"🧑‍🦼\", \"man_in_motorized_wheelchair\": \"👨‍🦼\", \"woman_in_motorized_wheelchair\": \"👩‍🦼\", \"person_in_manual_wheelchair\": \"🧑‍🦽\", \"man_in_manual_wheelchair\": \"👨‍🦽\", \"woman_in_manual_wheelchair\": \"👩‍🦽\", \"runner\": \"🏃\", \"running\": \"🏃\", \"running_man\": \"🏃‍♂️\", \"running_woman\": \"🏃‍♀️\", \"woman_dancing\": \"💃\", \"dancer\": \"💃\", \"man_dancing\": \"🕺\", \"business_suit_levitating\": \"🕴️\", \"dancers\": \"👯\", \"dancing_men\": \"👯‍♂️\", \"dancing_women\": \"👯‍♀️\", \"sauna_person\": \"🧖\", \"sauna_man\": \"🧖‍♂️\", \"sauna_woman\": \"🧖‍♀️\", \"climbing\": \"🧗\", \"climbing_man\": \"🧗‍♂️\", \"climbing_woman\": \"🧗‍♀️\", \"person_fencing\": \"🤺\", \"horse_racing\": \"🏇\", \"skier\": \"⛷️\", \"snowboarder\": \"🏂\", \"golfing\": \"🏌️\", \"golfing_man\": \"🏌️‍♂️\", \"golfing_woman\": \"🏌️‍♀️\", \"surfer\": \"🏄\", \"surfing_man\": \"🏄‍♂️\", \"surfing_woman\": \"🏄‍♀️\", \"rowboat\": \"🚣\", \"rowing_man\": \"🚣‍♂️\", \"rowing_woman\": \"🚣‍♀️\", \"swimmer\": \"🏊\", \"swimming_man\": \"🏊‍♂️\", \"swimming_woman\": \"🏊‍♀️\", \"bouncing_ball_person\": \"⛹️\", \"bouncing_ball_man\": \"⛹️‍♂️\", \"basketball_man\": \"⛹️‍♂️\", \"bouncing_ball_woman\": \"⛹️‍♀️\", \"basketball_woman\": \"⛹️‍♀️\", \"weight_lifting\": \"🏋️\", \"weight_lifting_man\": \"🏋️‍♂️\", \"weight_lifting_woman\": \"🏋️‍♀️\", \"bicyclist\": \"🚴\", \"biking_man\": \"🚴‍♂️\", \"biking_woman\": \"🚴‍♀️\", \"mountain_bicyclist\": \"🚵\", \"mountain_biking_man\": \"🚵‍♂️\", \"mountain_biking_woman\": \"🚵‍♀️\", \"cartwheeling\": \"🤸\", \"man_cartwheeling\": \"🤸‍♂️\", \"woman_cartwheeling\": \"🤸‍♀️\", \"wrestling\": \"🤼\", \"men_wrestling\": \"🤼‍♂️\", \"women_wrestling\": \"🤼‍♀️\", \"water_polo\": \"🤽\", \"man_playing_water_polo\": \"🤽‍♂️\", \"woman_playing_water_polo\": \"🤽‍♀️\", \"handball_person\": \"🤾\", \"man_playing_handball\": \"🤾‍♂️\", \"woman_playing_handball\": \"🤾‍♀️\", \"juggling_person\": \"🤹\", \"man_juggling\": \"🤹‍♂️\", \"woman_juggling\": \"🤹‍♀️\", \"lotus_position\": \"🧘\", \"lotus_position_man\": \"🧘‍♂️\", \"lotus_position_woman\": \"🧘‍♀️\", \"bath\": \"🛀\", \"sleeping_bed\": \"🛌\", \"people_holding_hands\": \"🧑‍🤝‍🧑\", \"two_women_holding_hands\": \"👭\", \"couple\": \"👫\", \"two_men_holding_hands\": \"👬\", \"couplekiss\": \"💏\", \"couplekiss_man_woman\": \"👩‍❤️‍💋‍👨\", \"couplekiss_man_man\": \"👨‍❤️‍💋‍👨\", \"couplekiss_woman_woman\": \"👩‍❤️‍💋‍👩\", \"couple_with_heart\": \"💑\", \"couple_with_heart_woman_man\": \"👩‍❤️‍👨\", \"couple_with_heart_man_man\": \"👨‍❤️‍👨\", \"couple_with_heart_woman_woman\": \"👩‍❤️‍👩\", \"family\": \"👪\", \"family_man_woman_boy\": \"👨‍👩‍👦\", \"family_man_woman_girl\": \"👨‍👩‍👧\", \"family_man_woman_girl_boy\": \"👨‍👩‍👧‍👦\", \"family_man_woman_boy_boy\": \"👨‍👩‍👦‍👦\", \"family_man_woman_girl_girl\": \"👨‍👩‍👧‍👧\", \"family_man_man_boy\": \"👨‍👨‍👦\", \"family_man_man_girl\": \"👨‍👨‍👧\", \"family_man_man_girl_boy\": \"👨‍👨‍👧‍👦\", \"family_man_man_boy_boy\": \"👨‍👨‍👦‍👦\", \"family_man_man_girl_girl\": \"👨‍👨‍👧‍👧\", \"family_woman_woman_boy\": \"👩‍👩‍👦\", \"family_woman_woman_girl\": \"👩‍👩‍👧\", \"family_woman_woman_girl_boy\": \"👩‍👩‍👧‍👦\", \"family_woman_woman_boy_boy\": \"👩‍👩‍👦‍👦\", \"family_woman_woman_girl_girl\": \"👩‍👩‍👧‍👧\", \"family_man_boy\": \"👨‍👦\", \"family_man_boy_boy\": \"👨‍👦‍👦\", \"family_man_girl\": \"👨‍👧\", \"family_man_girl_boy\": \"👨‍👧‍👦\", \"family_man_girl_girl\": \"👨‍👧‍👧\", \"family_woman_boy\": \"👩‍👦\", \"family_woman_boy_boy\": \"👩‍👦‍👦\", \"family_woman_girl\": \"👩‍👧\", \"family_woman_girl_boy\": \"👩‍👧‍👦\", \"family_woman_girl_girl\": \"👩‍👧‍👧\", \"speaking_head\": \"🗣️\", \"bust_in_silhouette\": \"👤\", \"busts_in_silhouette\": \"👥\", \"people_hugging\": \"🫂\", \"footprints\": \"👣\", \"monkey_face\": \"🐵\", \"monkey\": \"🐒\", \"gorilla\": \"🦍\", \"orangutan\": \"🦧\", \"dog\": \"🐶\", \"dog2\": \"🐕\", \"guide_dog\": \"🦮\", \"service_dog\": \"🐕‍🦺\", \"poodle\": \"🐩\", \"wolf\": \"🐺\", \"fox_face\": \"🦊\", \"raccoon\": \"🦝\", \"cat\": \"🐱\", \"cat2\": \"🐈\", \"black_cat\": \"🐈‍⬛\", \"lion\": \"🦁\", \"tiger\": \"🐯\", \"tiger2\": \"🐅\", \"leopard\": \"🐆\", \"horse\": \"🐴\", \"racehorse\": \"🐎\", \"unicorn\": \"🦄\", \"zebra\": \"🦓\", \"deer\": \"🦌\", \"bison\": \"🦬\", \"cow\": \"🐮\", \"ox\": \"🐂\", \"water_buffalo\": \"🐃\", \"cow2\": \"🐄\", \"pig\": \"🐷\", \"pig2\": \"🐖\", \"boar\": \"🐗\", \"pig_nose\": \"🐽\", \"ram\": \"🐏\", \"sheep\": \"🐑\", \"goat\": \"🐐\", \"dromedary_camel\": \"🐪\", \"camel\": \"🐫\", \"llama\": \"🦙\", \"giraffe\": \"🦒\", \"elephant\": \"🐘\", \"mammoth\": \"🦣\", \"rhinoceros\": \"🦏\", \"hippopotamus\": \"🦛\", \"mouse\": \"🐭\", \"mouse2\": \"🐁\", \"rat\": \"🐀\", \"hamster\": \"🐹\", \"rabbit\": \"🐰\", \"rabbit2\": \"🐇\", \"chipmunk\": \"🐿️\", \"beaver\": \"🦫\", \"hedgehog\": \"🦔\", \"bat\": \"🦇\", \"bear\": \"🐻\", \"polar_bear\": \"🐻‍❄️\", \"koala\": \"🐨\", \"panda_face\": \"🐼\", \"sloth\": \"🦥\", \"otter\": \"🦦\", \"skunk\": \"🦨\", \"kangaroo\": \"🦘\", \"badger\": \"🦡\", \"feet\": \"🐾\", \"paw_prints\": \"🐾\", \"turkey\": \"🦃\", \"chicken\": \"🐔\", \"rooster\": \"🐓\", \"hatching_chick\": \"🐣\", \"baby_chick\": \"🐤\", \"hatched_chick\": \"🐥\", \"bird\": \"🐦\", \"penguin\": \"🐧\", \"dove\": \"🕊️\", \"eagle\": \"🦅\", \"duck\": \"🦆\", \"swan\": \"🦢\", \"owl\": \"🦉\", \"dodo\": \"🦤\", \"feather\": \"🪶\", \"flamingo\": \"🦩\", \"peacock\": \"🦚\", \"parrot\": \"🦜\", \"frog\": \"🐸\", \"crocodile\": \"🐊\", \"turtle\": \"🐢\", \"lizard\": \"🦎\", \"snake\": \"🐍\", \"dragon_face\": \"🐲\", \"dragon\": \"🐉\", \"sauropod\": \"🦕\", \"t-rex\": \"🦖\", \"whale\": \"🐳\", \"whale2\": \"🐋\", \"dolphin\": \"🐬\", \"flipper\": \"🐬\", \"seal\": \"🦭\", \"fish\": \"🐟\", \"tropical_fish\": \"🐠\", \"blowfish\": \"🐡\", \"shark\": \"🦈\", \"octopus\": \"🐙\", \"shell\": \"🐚\", \"snail\": \"🐌\", \"butterfly\": \"🦋\", \"bug\": \"🐛\", \"ant\": \"🐜\", \"bee\": \"🐝\", \"honeybee\": \"🐝\", \"beetle\": \"🪲\", \"lady_beetle\": \"🐞\", \"cricket\": \"🦗\", \"cockroach\": \"🪳\", \"spider\": \"🕷️\", \"spider_web\": \"🕸️\", \"scorpion\": \"🦂\", \"mosquito\": \"🦟\", \"fly\": \"🪰\", \"worm\": \"🪱\", \"microbe\": \"🦠\", \"bouquet\": \"💐\", \"cherry_blossom\": \"🌸\", \"white_flower\": \"💮\", \"rosette\": \"🏵️\", \"rose\": \"🌹\", \"wilted_flower\": \"🥀\", \"hibiscus\": \"🌺\", \"sunflower\": \"🌻\", \"blossom\": \"🌼\", \"tulip\": \"🌷\", \"seedling\": \"🌱\", \"potted_plant\": \"🪴\", \"evergreen_tree\": \"🌲\", \"deciduous_tree\": \"🌳\", \"palm_tree\": \"🌴\", \"cactus\": \"🌵\", \"ear_of_rice\": \"🌾\", \"herb\": \"🌿\", \"shamrock\": \"☘️\", \"four_leaf_clover\": \"🍀\", \"maple_leaf\": \"🍁\", \"fallen_leaf\": \"🍂\", \"leaves\": \"🍃\", \"grapes\": \"🍇\", \"melon\": \"🍈\", \"watermelon\": \"🍉\", \"tangerine\": \"🍊\", \"orange\": \"🍊\", \"mandarin\": \"🍊\", \"lemon\": \"🍋\", \"banana\": \"🍌\", \"pineapple\": \"🍍\", \"mango\": \"🥭\", \"apple\": \"🍎\", \"green_apple\": \"🍏\", \"pear\": \"🍐\", \"peach\": \"🍑\", \"cherries\": \"🍒\", \"strawberry\": \"🍓\", \"blueberries\": \"🫐\", \"kiwi_fruit\": \"🥝\", \"tomato\": \"🍅\", \"olive\": \"🫒\", \"coconut\": \"🥥\", \"avocado\": \"🥑\", \"eggplant\": \"🍆\", \"potato\": \"🥔\", \"carrot\": \"🥕\", \"corn\": \"🌽\", \"hot_pepper\": \"🌶️\", \"bell_pepper\": \"🫑\", \"cucumber\": \"🥒\", \"leafy_green\": \"🥬\", \"broccoli\": \"🥦\", \"garlic\": \"🧄\", \"onion\": \"🧅\", \"mushroom\": \"🍄\", \"peanuts\": \"🥜\", \"chestnut\": \"🌰\", \"bread\": \"🍞\", \"croissant\": \"🥐\", \"baguette_bread\": \"🥖\", \"flatbread\": \"🫓\", \"pretzel\": \"🥨\", \"bagel\": \"🥯\", \"pancakes\": \"🥞\", \"waffle\": \"🧇\", \"cheese\": \"🧀\", \"meat_on_bone\": \"🍖\", \"poultry_leg\": \"🍗\", \"cut_of_meat\": \"🥩\", \"bacon\": \"🥓\", \"hamburger\": \"🍔\", \"fries\": \"🍟\", \"pizza\": \"🍕\", \"hotdog\": \"🌭\", \"sandwich\": \"🥪\", \"taco\": \"🌮\", \"burrito\": \"🌯\", \"tamale\": \"🫔\", \"stuffed_flatbread\": \"🥙\", \"falafel\": \"🧆\", \"egg\": \"🥚\", \"fried_egg\": \"🍳\", \"shallow_pan_of_food\": \"🥘\", \"stew\": \"🍲\", \"fondue\": \"🫕\", \"bowl_with_spoon\": \"🥣\", \"green_salad\": \"🥗\", \"popcorn\": \"🍿\", \"butter\": \"🧈\", \"salt\": \"🧂\", \"canned_food\": \"🥫\", \"bento\": \"🍱\", \"rice_cracker\": \"🍘\", \"rice_ball\": \"🍙\", \"rice\": \"🍚\", \"curry\": \"🍛\", \"ramen\": \"🍜\", \"spaghetti\": \"🍝\", \"sweet_potato\": \"🍠\", \"oden\": \"🍢\", \"sushi\": \"🍣\", \"fried_shrimp\": \"🍤\", \"fish_cake\": \"🍥\", \"moon_cake\": \"🥮\", \"dango\": \"🍡\", \"dumpling\": \"🥟\", \"fortune_cookie\": \"🥠\", \"takeout_box\": \"🥡\", \"crab\": \"🦀\", \"lobster\": \"🦞\", \"shrimp\": \"🦐\", \"squid\": \"🦑\", \"oyster\": \"🦪\", \"icecream\": \"🍦\", \"shaved_ice\": \"🍧\", \"ice_cream\": \"🍨\", \"doughnut\": \"🍩\", \"cookie\": \"🍪\", \"birthday\": \"🎂\", \"cake\": \"🍰\", \"cupcake\": \"🧁\", \"pie\": \"🥧\", \"chocolate_bar\": \"🍫\", \"candy\": \"🍬\", \"lollipop\": \"🍭\", \"custard\": \"🍮\", \"honey_pot\": \"🍯\", \"baby_bottle\": \"🍼\", \"milk_glass\": \"🥛\", \"coffee\": \"☕\", \"teapot\": \"🫖\", \"tea\": \"🍵\", \"sake\": \"🍶\", \"champagne\": \"🍾\", \"wine_glass\": \"🍷\", \"cocktail\": \"🍸\", \"tropical_drink\": \"🍹\", \"beer\": \"🍺\", \"beers\": \"🍻\", \"clinking_glasses\": \"🥂\", \"tumbler_glass\": \"🥃\", \"cup_with_straw\": \"🥤\", \"bubble_tea\": \"🧋\", \"beverage_box\": \"🧃\", \"mate\": \"🧉\", \"ice_cube\": \"🧊\", \"chopsticks\": \"🥢\", \"plate_with_cutlery\": \"🍽️\", \"fork_and_knife\": \"🍴\", \"spoon\": \"🥄\", \"hocho\": \"🔪\", \"knife\": \"🔪\", \"amphora\": \"🏺\", \"earth_africa\": \"🌍\", \"earth_americas\": \"🌎\", \"earth_asia\": \"🌏\", \"globe_with_meridians\": \"🌐\", \"world_map\": \"🗺️\", \"japan\": \"🗾\", \"compass\": \"🧭\", \"mountain_snow\": \"🏔️\", \"mountain\": \"⛰️\", \"volcano\": \"🌋\", \"mount_fuji\": \"🗻\", \"camping\": \"🏕️\", \"beach_umbrella\": \"🏖️\", \"desert\": \"🏜️\", \"desert_island\": \"🏝️\", \"national_park\": \"🏞️\", \"stadium\": \"🏟️\", \"classical_building\": \"🏛️\", \"building_construction\": \"🏗️\", \"bricks\": \"🧱\", \"rock\": \"🪨\", \"wood\": \"🪵\", \"hut\": \"🛖\", \"houses\": \"🏘️\", \"derelict_house\": \"🏚️\", \"house\": \"🏠\", \"house_with_garden\": \"🏡\", \"office\": \"🏢\", \"post_office\": \"🏣\", \"european_post_office\": \"🏤\", \"hospital\": \"🏥\", \"bank\": \"🏦\", \"hotel\": \"🏨\", \"love_hotel\": \"🏩\", \"convenience_store\": \"🏪\", \"school\": \"🏫\", \"department_store\": \"🏬\", \"factory\": \"🏭\", \"japanese_castle\": \"🏯\", \"european_castle\": \"🏰\", \"wedding\": \"💒\", \"tokyo_tower\": \"🗼\", \"statue_of_liberty\": \"🗽\", \"church\": \"⛪\", \"mosque\": \"🕌\", \"hindu_temple\": \"🛕\", \"synagogue\": \"🕍\", \"shinto_shrine\": \"⛩️\", \"kaaba\": \"🕋\", \"fountain\": \"⛲\", \"tent\": \"⛺\", \"foggy\": \"🌁\", \"night_with_stars\": \"🌃\", \"cityscape\": \"🏙️\", \"sunrise_over_mountains\": \"🌄\", \"sunrise\": \"🌅\", \"city_sunset\": \"🌆\", \"city_sunrise\": \"🌇\", \"bridge_at_night\": \"🌉\", \"hotsprings\": \"♨️\", \"carousel_horse\": \"🎠\", \"ferris_wheel\": \"🎡\", \"roller_coaster\": \"🎢\", \"barber\": \"💈\", \"circus_tent\": \"🎪\", \"steam_locomotive\": \"🚂\", \"railway_car\": \"🚃\", \"bullettrain_side\": \"🚄\", \"bullettrain_front\": \"🚅\", \"train2\": \"🚆\", \"metro\": \"🚇\", \"light_rail\": \"🚈\", \"station\": \"🚉\", \"tram\": \"🚊\", \"monorail\": \"🚝\", \"mountain_railway\": \"🚞\", \"train\": \"🚋\", \"bus\": \"🚌\", \"oncoming_bus\": \"🚍\", \"trolleybus\": \"🚎\", \"minibus\": \"🚐\", \"ambulance\": \"🚑\", \"fire_engine\": \"🚒\", \"police_car\": \"🚓\", \"oncoming_police_car\": \"🚔\", \"taxi\": \"🚕\", \"oncoming_taxi\": \"🚖\", \"car\": \"🚗\", \"red_car\": \"🚗\", \"oncoming_automobile\": \"🚘\", \"blue_car\": \"🚙\", \"pickup_truck\": \"🛻\", \"truck\": \"🚚\", \"articulated_lorry\": \"🚛\", \"tractor\": \"🚜\", \"racing_car\": \"🏎️\", \"motorcycle\": \"🏍️\", \"motor_scooter\": \"🛵\", \"manual_wheelchair\": \"🦽\", \"motorized_wheelchair\": \"🦼\", \"auto_rickshaw\": \"🛺\", \"bike\": \"🚲\", \"kick_scooter\": \"🛴\", \"skateboard\": \"🛹\", \"roller_skate\": \"🛼\", \"busstop\": \"🚏\", \"motorway\": \"🛣️\", \"railway_track\": \"🛤️\", \"oil_drum\": \"🛢️\", \"fuelpump\": \"⛽\", \"rotating_light\": \"🚨\", \"traffic_light\": \"🚥\", \"vertical_traffic_light\": \"🚦\", \"stop_sign\": \"🛑\", \"construction\": \"🚧\", \"anchor\": \"⚓\", \"boat\": \"⛵\", \"sailboat\": \"⛵\", \"canoe\": \"🛶\", \"speedboat\": \"🚤\", \"passenger_ship\": \"🛳️\", \"ferry\": \"⛴️\", \"motor_boat\": \"🛥️\", \"ship\": \"🚢\", \"airplane\": \"✈️\", \"small_airplane\": \"🛩️\", \"flight_departure\": \"🛫\", \"flight_arrival\": \"🛬\", \"parachute\": \"🪂\", \"seat\": \"💺\", \"helicopter\": \"🚁\", \"suspension_railway\": \"🚟\", \"mountain_cableway\": \"🚠\", \"aerial_tramway\": \"🚡\", \"artificial_satellite\": \"🛰️\", \"rocket\": \"🚀\", \"flying_saucer\": \"🛸\", \"bellhop_bell\": \"🛎️\", \"luggage\": \"🧳\", \"hourglass\": \"⌛\", \"hourglass_flowing_sand\": \"⏳\", \"watch\": \"⌚\", \"alarm_clock\": \"⏰\", \"stopwatch\": \"⏱️\", \"timer_clock\": \"⏲️\", \"mantelpiece_clock\": \"🕰️\", \"clock12\": \"🕛\", \"clock1230\": \"🕧\", \"clock1\": \"🕐\", \"clock130\": \"🕜\", \"clock2\": \"🕑\", \"clock230\": \"🕝\", \"clock3\": \"🕒\", \"clock330\": \"🕞\", \"clock4\": \"🕓\", \"clock430\": \"🕟\", \"clock5\": \"🕔\", \"clock530\": \"🕠\", \"clock6\": \"🕕\", \"clock630\": \"🕡\", \"clock7\": \"🕖\", \"clock730\": \"🕢\", \"clock8\": \"🕗\", \"clock830\": \"🕣\", \"clock9\": \"🕘\", \"clock930\": \"🕤\", \"clock10\": \"🕙\", \"clock1030\": \"🕥\", \"clock11\": \"🕚\", \"clock1130\": \"🕦\", \"new_moon\": \"🌑\", \"waxing_crescent_moon\": \"🌒\", \"first_quarter_moon\": \"🌓\", \"moon\": \"🌔\", \"waxing_gibbous_moon\": \"🌔\", \"full_moon\": \"🌕\", \"waning_gibbous_moon\": \"🌖\", \"last_quarter_moon\": \"🌗\", \"waning_crescent_moon\": \"🌘\", \"crescent_moon\": \"🌙\", \"new_moon_with_face\": \"🌚\", \"first_quarter_moon_with_face\": \"🌛\", \"last_quarter_moon_with_face\": \"🌜\", \"thermometer\": \"🌡️\", \"sunny\": \"☀️\", \"full_moon_with_face\": \"🌝\", \"sun_with_face\": \"🌞\", \"ringed_planet\": \"🪐\", \"star\": \"⭐\", \"star2\": \"🌟\", \"stars\": \"🌠\", \"milky_way\": \"🌌\", \"cloud\": \"☁️\", \"partly_sunny\": \"⛅\", \"cloud_with_lightning_and_rain\": \"⛈️\", \"sun_behind_small_cloud\": \"🌤️\", \"sun_behind_large_cloud\": \"🌥️\", \"sun_behind_rain_cloud\": \"🌦️\", \"cloud_with_rain\": \"🌧️\", \"cloud_with_snow\": \"🌨️\", \"cloud_with_lightning\": \"🌩️\", \"tornado\": \"🌪️\", \"fog\": \"🌫️\", \"wind_face\": \"🌬️\", \"cyclone\": \"🌀\", \"rainbow\": \"🌈\", \"closed_umbrella\": \"🌂\", \"open_umbrella\": \"☂️\", \"umbrella\": \"☔\", \"parasol_on_ground\": \"⛱️\", \"zap\": \"⚡\", \"snowflake\": \"❄️\", \"snowman_with_snow\": \"☃️\", \"snowman\": \"⛄\", \"comet\": \"☄️\", \"fire\": \"🔥\", \"droplet\": \"💧\", \"ocean\": \"🌊\", \"jack_o_lantern\": \"🎃\", \"christmas_tree\": \"🎄\", \"fireworks\": \"🎆\", \"sparkler\": \"🎇\", \"firecracker\": \"🧨\", \"sparkles\": \"✨\", \"balloon\": \"🎈\", \"tada\": \"🎉\", \"confetti_ball\": \"🎊\", \"tanabata_tree\": \"🎋\", \"bamboo\": \"🎍\", \"dolls\": \"🎎\", \"flags\": \"🎏\", \"wind_chime\": \"🎐\", \"rice_scene\": \"🎑\", \"red_envelope\": \"🧧\", \"ribbon\": \"🎀\", \"gift\": \"🎁\", \"reminder_ribbon\": \"🎗️\", \"tickets\": \"🎟️\", \"ticket\": \"🎫\", \"medal_military\": \"🎖️\", \"trophy\": \"🏆\", \"medal_sports\": \"🏅\", \"1st_place_medal\": \"🥇\", \"2nd_place_medal\": \"🥈\", \"3rd_place_medal\": \"🥉\", \"soccer\": \"⚽\", \"baseball\": \"⚾\", \"softball\": \"🥎\", \"basketball\": \"🏀\", \"volleyball\": \"🏐\", \"football\": \"🏈\", \"rugby_football\": \"🏉\", \"tennis\": \"🎾\", \"flying_disc\": \"🥏\", \"bowling\": \"🎳\", \"cricket_game\": \"🏏\", \"field_hockey\": \"🏑\", \"ice_hockey\": \"🏒\", \"lacrosse\": \"🥍\", \"ping_pong\": \"🏓\", \"badminton\": \"🏸\", \"boxing_glove\": \"🥊\", \"martial_arts_uniform\": \"🥋\", \"goal_net\": \"🥅\", \"golf\": \"⛳\", \"ice_skate\": \"⛸️\", \"fishing_pole_and_fish\": \"🎣\", \"diving_mask\": \"🤿\", \"running_shirt_with_sash\": \"🎽\", \"ski\": \"🎿\", \"sled\": \"🛷\", \"curling_stone\": \"🥌\", \"dart\": \"🎯\", \"yo_yo\": \"🪀\", \"kite\": \"🪁\", \"8ball\": \"🎱\", \"crystal_ball\": \"🔮\", \"magic_wand\": \"🪄\", \"nazar_amulet\": \"🧿\", \"video_game\": \"🎮\", \"joystick\": \"🕹️\", \"slot_machine\": \"🎰\", \"game_die\": \"🎲\", \"jigsaw\": \"🧩\", \"teddy_bear\": \"🧸\", \"pinata\": \"🪅\", \"nesting_dolls\": \"🪆\", \"spades\": \"♠️\", \"hearts\": \"♥️\", \"diamonds\": \"♦️\", \"clubs\": \"♣️\", \"chess_pawn\": \"♟️\", \"black_joker\": \"🃏\", \"mahjong\": \"🀄\", \"flower_playing_cards\": \"🎴\", \"performing_arts\": \"🎭\", \"framed_picture\": \"🖼️\", \"art\": \"🎨\", \"thread\": \"🧵\", \"sewing_needle\": \"🪡\", \"yarn\": \"🧶\", \"knot\": \"🪢\", \"eyeglasses\": \"👓\", \"dark_sunglasses\": \"🕶️\", \"goggles\": \"🥽\", \"lab_coat\": \"🥼\", \"safety_vest\": \"🦺\", \"necktie\": \"👔\", \"shirt\": \"👕\", \"tshirt\": \"👕\", \"jeans\": \"👖\", \"scarf\": \"🧣\", \"gloves\": \"🧤\", \"coat\": \"🧥\", \"socks\": \"🧦\", \"dress\": \"👗\", \"kimono\": \"👘\", \"sari\": \"🥻\", \"one_piece_swimsuit\": \"🩱\", \"swim_brief\": \"🩲\", \"shorts\": \"🩳\", \"bikini\": \"👙\", \"womans_clothes\": \"👚\", \"purse\": \"👛\", \"handbag\": \"👜\", \"pouch\": \"👝\", \"shopping\": \"🛍️\", \"school_satchel\": \"🎒\", \"thong_sandal\": \"🩴\", \"mans_shoe\": \"👞\", \"shoe\": \"👞\", \"athletic_shoe\": \"👟\", \"hiking_boot\": \"🥾\", \"flat_shoe\": \"🥿\", \"high_heel\": \"👠\", \"sandal\": \"👡\", \"ballet_shoes\": \"🩰\", \"boot\": \"👢\", \"crown\": \"👑\", \"womans_hat\": \"👒\", \"tophat\": \"🎩\", \"mortar_board\": \"🎓\", \"billed_cap\": \"🧢\", \"military_helmet\": \"🪖\", \"rescue_worker_helmet\": \"⛑️\", \"prayer_beads\": \"📿\", \"lipstick\": \"💄\", \"ring\": \"💍\", \"gem\": \"💎\", \"mute\": \"🔇\", \"speaker\": \"🔈\", \"sound\": \"🔉\", \"loud_sound\": \"🔊\", \"loudspeaker\": \"📢\", \"mega\": \"📣\", \"postal_horn\": \"📯\", \"bell\": \"🔔\", \"no_bell\": \"🔕\", \"musical_score\": \"🎼\", \"musical_note\": \"🎵\", \"notes\": \"🎶\", \"studio_microphone\": \"🎙️\", \"level_slider\": \"🎚️\", \"control_knobs\": \"🎛️\", \"microphone\": \"🎤\", \"headphones\": \"🎧\", \"radio\": \"📻\", \"saxophone\": \"🎷\", \"accordion\": \"🪗\", \"guitar\": \"🎸\", \"musical_keyboard\": \"🎹\", \"trumpet\": \"🎺\", \"violin\": \"🎻\", \"banjo\": \"🪕\", \"drum\": \"🥁\", \"long_drum\": \"🪘\", \"iphone\": \"📱\", \"calling\": \"📲\", \"phone\": \"☎️\", \"telephone\": \"☎️\", \"telephone_receiver\": \"📞\", \"pager\": \"📟\", \"fax\": \"📠\", \"battery\": \"🔋\", \"electric_plug\": \"🔌\", \"computer\": \"💻\", \"desktop_computer\": \"🖥️\", \"printer\": \"🖨️\", \"keyboard\": \"⌨️\", \"computer_mouse\": \"🖱️\", \"trackball\": \"🖲️\", \"minidisc\": \"💽\", \"floppy_disk\": \"💾\", \"cd\": \"💿\", \"dvd\": \"📀\", \"abacus\": \"🧮\", \"movie_camera\": \"🎥\", \"film_strip\": \"🎞️\", \"film_projector\": \"📽️\", \"clapper\": \"🎬\", \"tv\": \"📺\", \"camera\": \"📷\", \"camera_flash\": \"📸\", \"video_camera\": \"📹\", \"vhs\": \"📼\", \"mag\": \"🔍\", \"mag_right\": \"🔎\", \"candle\": \"🕯️\", \"bulb\": \"💡\", \"flashlight\": \"🔦\", \"izakaya_lantern\": \"🏮\", \"lantern\": \"🏮\", \"diya_lamp\": \"🪔\", \"notebook_with_decorative_cover\": \"📔\", \"closed_book\": \"📕\", \"book\": \"📖\", \"open_book\": \"📖\", \"green_book\": \"📗\", \"blue_book\": \"📘\", \"orange_book\": \"📙\", \"books\": \"📚\", \"notebook\": \"📓\", \"ledger\": \"📒\", \"page_with_curl\": \"📃\", \"scroll\": \"📜\", \"page_facing_up\": \"📄\", \"newspaper\": \"📰\", \"newspaper_roll\": \"🗞️\", \"bookmark_tabs\": \"📑\", \"bookmark\": \"🔖\", \"label\": \"🏷️\", \"moneybag\": \"💰\", \"coin\": \"🪙\", \"yen\": \"💴\", \"dollar\": \"💵\", \"euro\": \"💶\", \"pound\": \"💷\", \"money_with_wings\": \"💸\", \"credit_card\": \"💳\", \"receipt\": \"🧾\", \"chart\": \"💹\", \"envelope\": \"✉️\", \"email\": \"📧\", \"e-mail\": \"📧\", \"incoming_envelope\": \"📨\", \"envelope_with_arrow\": \"📩\", \"outbox_tray\": \"📤\", \"inbox_tray\": \"📥\", \"package\": \"📦\", \"mailbox\": \"📫\", \"mailbox_closed\": \"📪\", \"mailbox_with_mail\": \"📬\", \"mailbox_with_no_mail\": \"📭\", \"postbox\": \"📮\", \"ballot_box\": \"🗳️\", \"pencil2\": \"✏️\", \"black_nib\": \"✒️\", \"fountain_pen\": \"🖋️\", \"pen\": \"🖊️\", \"paintbrush\": \"🖌️\", \"crayon\": \"🖍️\", \"memo\": \"📝\", \"pencil\": \"📝\", \"briefcase\": \"💼\", \"file_folder\": \"📁\", \"open_file_folder\": \"📂\", \"card_index_dividers\": \"🗂️\", \"date\": \"📅\", \"calendar\": \"📆\", \"spiral_notepad\": \"🗒️\", \"spiral_calendar\": \"🗓️\", \"card_index\": \"📇\", \"chart_with_upwards_trend\": \"📈\", \"chart_with_downwards_trend\": \"📉\", \"bar_chart\": \"📊\", \"clipboard\": \"📋\", \"pushpin\": \"📌\", \"round_pushpin\": \"📍\", \"paperclip\": \"📎\", \"paperclips\": \"🖇️\", \"straight_ruler\": \"📏\", \"triangular_ruler\": \"📐\", \"scissors\": \"✂️\", \"card_file_box\": \"🗃️\", \"file_cabinet\": \"🗄️\", \"wastebasket\": \"🗑️\", \"lock\": \"🔒\", \"unlock\": \"🔓\", \"lock_with_ink_pen\": \"🔏\", \"closed_lock_with_key\": \"🔐\", \"key\": \"🔑\", \"old_key\": \"🗝️\", \"hammer\": \"🔨\", \"axe\": \"🪓\", \"pick\": \"⛏️\", \"hammer_and_pick\": \"⚒️\", \"hammer_and_wrench\": \"🛠️\", \"dagger\": \"🗡️\", \"crossed_swords\": \"⚔️\", \"gun\": \"🔫\", \"boomerang\": \"🪃\", \"bow_and_arrow\": \"🏹\", \"shield\": \"🛡️\", \"carpentry_saw\": \"🪚\", \"wrench\": \"🔧\", \"screwdriver\": \"🪛\", \"nut_and_bolt\": \"🔩\", \"gear\": \"⚙️\", \"clamp\": \"🗜️\", \"balance_scale\": \"⚖️\", \"probing_cane\": \"🦯\", \"link\": \"🔗\", \"chains\": \"⛓️\", \"hook\": \"🪝\", \"toolbox\": \"🧰\", \"magnet\": \"🧲\", \"ladder\": \"🪜\", \"alembic\": \"⚗️\", \"test_tube\": \"🧪\", \"petri_dish\": \"🧫\", \"dna\": \"🧬\", \"microscope\": \"🔬\", \"telescope\": \"🔭\", \"satellite\": \"📡\", \"syringe\": \"💉\", \"drop_of_blood\": \"🩸\", \"pill\": \"💊\", \"adhesive_bandage\": \"🩹\", \"stethoscope\": \"🩺\", \"door\": \"🚪\", \"elevator\": \"🛗\", \"mirror\": \"🪞\", \"window\": \"🪟\", \"bed\": \"🛏️\", \"couch_and_lamp\": \"🛋️\", \"chair\": \"🪑\", \"toilet\": \"🚽\", \"plunger\": \"🪠\", \"shower\": \"🚿\", \"bathtub\": \"🛁\", \"mouse_trap\": \"🪤\", \"razor\": \"🪒\", \"lotion_bottle\": \"🧴\", \"safety_pin\": \"🧷\", \"broom\": \"🧹\", \"basket\": \"🧺\", \"roll_of_paper\": \"🧻\", \"bucket\": \"🪣\", \"soap\": \"🧼\", \"toothbrush\": \"🪥\", \"sponge\": \"🧽\", \"fire_extinguisher\": \"🧯\", \"shopping_cart\": \"🛒\", \"smoking\": \"🚬\", \"coffin\": \"⚰️\", \"headstone\": \"🪦\", \"funeral_urn\": \"⚱️\", \"moyai\": \"🗿\", \"placard\": \"🪧\", \"atm\": \"🏧\", \"put_litter_in_its_place\": \"🚮\", \"potable_water\": \"🚰\", \"wheelchair\": \"♿\", \"mens\": \"🚹\", \"womens\": \"🚺\", \"restroom\": \"🚻\", \"baby_symbol\": \"🚼\", \"wc\": \"🚾\", \"passport_control\": \"🛂\", \"customs\": \"🛃\", \"baggage_claim\": \"🛄\", \"left_luggage\": \"🛅\", \"warning\": \"⚠️\", \"children_crossing\": \"🚸\", \"no_entry\": \"⛔\", \"no_entry_sign\": \"🚫\", \"no_bicycles\": \"🚳\", \"no_smoking\": \"🚭\", \"do_not_litter\": \"🚯\", \"non-potable_water\": \"🚱\", \"no_pedestrians\": \"🚷\", \"no_mobile_phones\": \"📵\", \"underage\": \"🔞\", \"radioactive\": \"☢️\", \"biohazard\": \"☣️\", \"arrow_up\": \"⬆️\", \"arrow_upper_right\": \"↗️\", \"arrow_right\": \"➡️\", \"arrow_lower_right\": \"↘️\", \"arrow_down\": \"⬇️\", \"arrow_lower_left\": \"↙️\", \"arrow_left\": \"⬅️\", \"arrow_upper_left\": \"↖️\", \"arrow_up_down\": \"↕️\", \"left_right_arrow\": \"↔️\", \"leftwards_arrow_with_hook\": \"↩️\", \"arrow_right_hook\": \"↪️\", \"arrow_heading_up\": \"⤴️\", \"arrow_heading_down\": \"⤵️\", \"arrows_clockwise\": \"🔃\", \"arrows_counterclockwise\": \"🔄\", \"back\": \"🔙\", \"end\": \"🔚\", \"on\": \"🔛\", \"soon\": \"🔜\", \"top\": \"🔝\", \"place_of_worship\": \"🛐\", \"atom_symbol\": \"⚛️\", \"om\": \"🕉️\", \"star_of_david\": \"✡️\", \"wheel_of_dharma\": \"☸️\", \"yin_yang\": \"☯️\", \"latin_cross\": \"✝️\", \"orthodox_cross\": \"☦️\", \"star_and_crescent\": \"☪️\", \"peace_symbol\": \"☮️\", \"menorah\": \"🕎\", \"six_pointed_star\": \"🔯\", \"aries\": \"♈\", \"taurus\": \"♉\", \"gemini\": \"♊\", \"cancer\": \"♋\", \"leo\": \"♌\", \"virgo\": \"♍\", \"libra\": \"♎\", \"scorpius\": \"♏\", \"sagittarius\": \"♐\", \"capricorn\": \"♑\", \"aquarius\": \"♒\", \"pisces\": \"♓\", \"ophiuchus\": \"⛎\", \"twisted_rightwards_arrows\": \"🔀\", \"repeat\": \"🔁\", \"repeat_one\": \"🔂\", \"arrow_forward\": \"▶️\", \"fast_forward\": \"⏩\", \"next_track_button\": \"⏭️\", \"play_or_pause_button\": \"⏯️\", \"arrow_backward\": \"◀️\", \"rewind\": \"⏪\", \"previous_track_button\": \"⏮️\", \"arrow_up_small\": \"🔼\", \"arrow_double_up\": \"⏫\", \"arrow_down_small\": \"🔽\", \"arrow_double_down\": \"⏬\", \"pause_button\": \"⏸️\", \"stop_button\": \"⏹️\", \"record_button\": \"⏺️\", \"eject_button\": \"⏏️\", \"cinema\": \"🎦\", \"low_brightness\": \"🔅\", \"high_brightness\": \"🔆\", \"signal_strength\": \"📶\", \"vibration_mode\": \"📳\", \"mobile_phone_off\": \"📴\", \"female_sign\": \"♀️\", \"male_sign\": \"♂️\", \"transgender_symbol\": \"⚧️\", \"heavy_multiplication_x\": \"✖️\", \"heavy_plus_sign\": \"➕\", \"heavy_minus_sign\": \"➖\", \"heavy_division_sign\": \"➗\", \"infinity\": \"♾️\", \"bangbang\": \"‼️\", \"interrobang\": \"⁉️\", \"question\": \"❓\", \"grey_question\": \"❔\", \"grey_exclamation\": \"❕\", \"exclamation\": \"❗\", \"heavy_exclamation_mark\": \"❗\", \"wavy_dash\": \"〰️\", \"currency_exchange\": \"💱\", \"heavy_dollar_sign\": \"💲\", \"medical_symbol\": \"⚕️\", \"recycle\": \"♻️\", \"fleur_de_lis\": \"⚜️\", \"trident\": \"🔱\", \"name_badge\": \"📛\", \"beginner\": \"🔰\", \"o\": \"⭕\", \"white_check_mark\": \"✅\", \"ballot_box_with_check\": \"☑️\", \"heavy_check_mark\": \"✔️\", \"x\": \"❌\", \"negative_squared_cross_mark\": \"❎\", \"curly_loop\": \"➰\", \"loop\": \"➿\", \"part_alternation_mark\": \"〽️\", \"eight_spoked_asterisk\": \"✳️\", \"eight_pointed_black_star\": \"✴️\", \"sparkle\": \"❇️\", \"copyright\": \"©️\", \"registered\": \"®️\", \"tm\": \"™️\", \"hash\": \"#️⃣\", \"asterisk\": \"*️⃣\", \"zero\": \"0️⃣\", \"one\": \"1️⃣\", \"two\": \"2️⃣\", \"three\": \"3️⃣\", \"four\": \"4️⃣\", \"five\": \"5️⃣\", \"six\": \"6️⃣\", \"seven\": \"7️⃣\", \"eight\": \"8️⃣\", \"nine\": \"9️⃣\", \"keycap_ten\": \"🔟\", \"capital_abcd\": \"🔠\", \"abcd\": \"🔡\", \"symbols\": \"🔣\", \"abc\": \"🔤\", \"a\": \"🅰️\", \"ab\": \"🆎\", \"b\": \"🅱️\", \"cl\": \"🆑\", \"cool\": \"🆒\", \"free\": \"🆓\", \"information_source\": \"ℹ️\", \"id\": \"🆔\", \"m\": \"Ⓜ️\", \"new\": \"🆕\", \"ng\": \"🆖\", \"o2\": \"🅾️\", \"ok\": \"🆗\", \"parking\": \"🅿️\", \"sos\": \"🆘\", \"up\": \"🆙\", \"vs\": \"🆚\", \"koko\": \"🈁\", \"sa\": \"🈂️\", \"ideograph_advantage\": \"🉐\", \"accept\": \"🉑\", \"congratulations\": \"㊗️\", \"secret\": \"㊙️\", \"u6e80\": \"🈵\", \"red_circle\": \"🔴\", \"orange_circle\": \"🟠\", \"yellow_circle\": \"🟡\", \"green_circle\": \"🟢\", \"large_blue_circle\": \"🔵\", \"purple_circle\": \"🟣\", \"brown_circle\": \"🟤\", \"black_circle\": \"⚫\", \"white_circle\": \"⚪\", \"red_square\": \"🟥\", \"orange_square\": \"🟧\", \"yellow_square\": \"🟨\", \"green_square\": \"🟩\", \"blue_square\": \"🟦\", \"purple_square\": \"🟪\", \"brown_square\": \"🟫\", \"black_large_square\": \"⬛\", \"white_large_square\": \"⬜\", \"black_medium_square\": \"◼️\", \"white_medium_square\": \"◻️\", \"black_medium_small_square\": \"◾\", \"white_medium_small_square\": \"◽\", \"black_small_square\": \"▪️\", \"white_small_square\": \"▫️\", \"large_orange_diamond\": \"🔶\", \"large_blue_diamond\": \"🔷\", \"small_orange_diamond\": \"🔸\", \"small_blue_diamond\": \"🔹\", \"small_red_triangle\": \"🔺\", \"small_red_triangle_down\": \"🔻\", \"diamond_shape_with_a_dot_inside\": \"💠\", \"radio_button\": \"🔘\", \"white_square_button\": \"🔳\", \"black_square_button\": \"🔲\", \"checkered_flag\": \"🏁\", \"triangular_flag_on_post\": \"🚩\", \"crossed_flags\": \"🎌\", \"black_flag\": \"🏴\", \"white_flag\": \"🏳️\", \"rainbow_flag\": \"🏳️‍🌈\", \"transgender_flag\": \"🏳️‍⚧️\", \"pirate_flag\": \"🏴‍☠️\", \"ascension_island\": \"🇦🇨\", \"andorra\": \"🇦🇩\", \"united_arab_emirates\": \"🇦🇪\", \"afghanistan\": \"🇦🇫\", \"antigua_barbuda\": \"🇦🇬\", \"anguilla\": \"🇦🇮\", \"albania\": \"🇦🇱\", \"armenia\": \"🇦🇲\", \"angola\": \"🇦🇴\", \"antarctica\": \"🇦🇶\", \"argentina\": \"🇦🇷\", \"american_samoa\": \"🇦🇸\", \"austria\": \"🇦🇹\", \"australia\": \"🇦🇺\", \"aruba\": \"🇦🇼\", \"aland_islands\": \"🇦🇽\", \"azerbaijan\": \"🇦🇿\", \"bosnia_herzegovina\": \"🇧🇦\", \"barbados\": \"🇧🇧\", \"bangladesh\": \"🇧🇩\", \"belgium\": \"🇧🇪\", \"burkina_faso\": \"🇧🇫\", \"bulgaria\": \"🇧🇬\", \"bahrain\": \"🇧🇭\", \"burundi\": \"🇧🇮\", \"benin\": \"🇧🇯\", \"st_barthelemy\": \"🇧🇱\", \"bermuda\": \"🇧🇲\", \"brunei\": \"🇧🇳\", \"bolivia\": \"🇧🇴\", \"caribbean_netherlands\": \"🇧🇶\", \"brazil\": \"🇧🇷\", \"bahamas\": \"🇧🇸\", \"bhutan\": \"🇧🇹\", \"bouvet_island\": \"🇧🇻\", \"botswana\": \"🇧🇼\", \"belarus\": \"🇧🇾\", \"belize\": \"🇧🇿\", \"canada\": \"🇨🇦\", \"cocos_islands\": \"🇨🇨\", \"congo_kinshasa\": \"🇨🇩\", \"central_african_republic\": \"🇨🇫\", \"congo_brazzaville\": \"🇨🇬\", \"switzerland\": \"🇨🇭\", \"cote_divoire\": \"🇨🇮\", \"cook_islands\": \"🇨🇰\", \"chile\": \"🇨🇱\", \"cameroon\": \"🇨🇲\", \"cn\": \"🇨🇳\", \"colombia\": \"🇨🇴\", \"clipperton_island\": \"🇨🇵\", \"costa_rica\": \"🇨🇷\", \"cuba\": \"🇨🇺\", \"cape_verde\": \"🇨🇻\", \"curacao\": \"🇨🇼\", \"christmas_island\": \"🇨🇽\", \"cyprus\": \"🇨🇾\", \"czech_republic\": \"🇨🇿\", \"de\": \"🇩🇪\", \"diego_garcia\": \"🇩🇬\", \"djibouti\": \"🇩🇯\", \"denmark\": \"🇩🇰\", \"dominica\": \"🇩🇲\", \"dominican_republic\": \"🇩🇴\", \"algeria\": \"🇩🇿\", \"ceuta_melilla\": \"🇪🇦\", \"ecuador\": \"🇪🇨\", \"estonia\": \"🇪🇪\", \"egypt\": \"🇪🇬\", \"western_sahara\": \"🇪🇭\", \"eritrea\": \"🇪🇷\", \"es\": \"🇪🇸\", \"ethiopia\": \"🇪🇹\", \"eu\": \"🇪🇺\", \"european_union\": \"🇪🇺\", \"finland\": \"🇫🇮\", \"fiji\": \"🇫🇯\", \"falkland_islands\": \"🇫🇰\", \"micronesia\": \"🇫🇲\", \"faroe_islands\": \"🇫🇴\", \"fr\": \"🇫🇷\", \"gabon\": \"🇬🇦\", \"gb\": \"🇬🇧\", \"uk\": \"🇬🇧\", \"grenada\": \"🇬🇩\", \"georgia\": \"🇬🇪\", \"french_guiana\": \"🇬🇫\", \"guernsey\": \"🇬🇬\", \"ghana\": \"🇬🇭\", \"gibraltar\": \"🇬🇮\", \"greenland\": \"🇬🇱\", \"gambia\": \"🇬🇲\", \"guinea\": \"🇬🇳\", \"guadeloupe\": \"🇬🇵\", \"equatorial_guinea\": \"🇬🇶\", \"greece\": \"🇬🇷\", \"south_georgia_south_sandwich_islands\": \"🇬🇸\", \"guatemala\": \"🇬🇹\", \"guam\": \"🇬🇺\", \"guinea_bissau\": \"🇬🇼\", \"guyana\": \"🇬🇾\", \"hong_kong\": \"🇭🇰\", \"heard_mcdonald_islands\": \"🇭🇲\", \"honduras\": \"🇭🇳\", \"croatia\": \"🇭🇷\", \"haiti\": \"🇭🇹\", \"hungary\": \"🇭🇺\", \"canary_islands\": \"🇮🇨\", \"indonesia\": \"🇮🇩\", \"ireland\": \"🇮🇪\", \"israel\": \"🇮🇱\", \"isle_of_man\": \"🇮🇲\", \"india\": \"🇮🇳\", \"british_indian_ocean_territory\": \"🇮🇴\", \"iraq\": \"🇮🇶\", \"iran\": \"🇮🇷\", \"iceland\": \"🇮🇸\", \"it\": \"🇮🇹\", \"jersey\": \"🇯🇪\", \"jamaica\": \"🇯🇲\", \"jordan\": \"🇯🇴\", \"jp\": \"🇯🇵\", \"kenya\": \"🇰🇪\", \"kyrgyzstan\": \"🇰🇬\", \"cambodia\": \"🇰🇭\", \"kiribati\": \"🇰🇮\", \"comoros\": \"🇰🇲\", \"st_kitts_nevis\": \"🇰🇳\", \"north_korea\": \"🇰🇵\", \"kr\": \"🇰🇷\", \"kuwait\": \"🇰🇼\", \"cayman_islands\": \"🇰🇾\", \"kazakhstan\": \"🇰🇿\", \"laos\": \"🇱🇦\", \"lebanon\": \"🇱🇧\", \"st_lucia\": \"🇱🇨\", \"liechtenstein\": \"🇱🇮\", \"sri_lanka\": \"🇱🇰\", \"liberia\": \"🇱🇷\", \"lesotho\": \"🇱🇸\", \"lithuania\": \"🇱🇹\", \"luxembourg\": \"🇱🇺\", \"latvia\": \"🇱🇻\", \"libya\": \"🇱🇾\", \"morocco\": \"🇲🇦\", \"monaco\": \"🇲🇨\", \"moldova\": \"🇲🇩\", \"montenegro\": \"🇲🇪\", \"st_martin\": \"🇲🇫\", \"madagascar\": \"🇲🇬\", \"marshall_islands\": \"🇲🇭\", \"macedonia\": \"🇲🇰\", \"mali\": \"🇲🇱\", \"myanmar\": \"🇲🇲\", \"mongolia\": \"🇲🇳\", \"macau\": \"🇲🇴\", \"northern_mariana_islands\": \"🇲🇵\", \"martinique\": \"🇲🇶\", \"mauritania\": \"🇲🇷\", \"montserrat\": \"🇲🇸\", \"malta\": \"🇲🇹\", \"mauritius\": \"🇲🇺\", \"maldives\": \"🇲🇻\", \"malawi\": \"🇲🇼\", \"mexico\": \"🇲🇽\", \"malaysia\": \"🇲🇾\", \"mozambique\": \"🇲🇿\", \"namibia\": \"🇳🇦\", \"new_caledonia\": \"🇳🇨\", \"niger\": \"🇳🇪\", \"norfolk_island\": \"🇳🇫\", \"nigeria\": \"🇳🇬\", \"nicaragua\": \"🇳🇮\", \"netherlands\": \"🇳🇱\", \"norway\": \"🇳🇴\", \"nepal\": \"🇳🇵\", \"nauru\": \"🇳🇷\", \"niue\": \"🇳🇺\", \"new_zealand\": \"🇳🇿\", \"oman\": \"🇴🇲\", \"panama\": \"🇵🇦\", \"peru\": \"🇵🇪\", \"french_polynesia\": \"🇵🇫\", \"papua_new_guinea\": \"🇵🇬\", \"philippines\": \"🇵🇭\", \"pakistan\": \"🇵🇰\", \"poland\": \"🇵🇱\", \"st_pierre_miquelon\": \"🇵🇲\", \"pitcairn_islands\": \"🇵🇳\", \"puerto_rico\": \"🇵🇷\", \"palestinian_territories\": \"🇵🇸\", \"portugal\": \"🇵🇹\", \"palau\": \"🇵🇼\", \"paraguay\": \"🇵🇾\", \"qatar\": \"🇶🇦\", \"reunion\": \"🇷🇪\", \"romania\": \"🇷🇴\", \"serbia\": \"🇷🇸\", \"ru\": \"🇷🇺\", \"rwanda\": \"🇷🇼\", \"saudi_arabia\": \"🇸🇦\", \"solomon_islands\": \"🇸🇧\", \"seychelles\": \"🇸🇨\", \"sudan\": \"🇸🇩\", \"sweden\": \"🇸🇪\", \"singapore\": \"🇸🇬\", \"st_helena\": \"🇸🇭\", \"slovenia\": \"🇸🇮\", \"svalbard_jan_mayen\": \"🇸🇯\", \"slovakia\": \"🇸🇰\", \"sierra_leone\": \"🇸🇱\", \"san_marino\": \"🇸🇲\", \"senegal\": \"🇸🇳\", \"somalia\": \"🇸🇴\", \"suriname\": \"🇸🇷\", \"south_sudan\": \"🇸🇸\", \"sao_tome_principe\": \"🇸🇹\", \"el_salvador\": \"🇸🇻\", \"sint_maarten\": \"🇸🇽\", \"syria\": \"🇸🇾\", \"swaziland\": \"🇸🇿\", \"tristan_da_cunha\": \"🇹🇦\", \"turks_caicos_islands\": \"🇹🇨\", \"chad\": \"🇹🇩\", \"french_southern_territories\": \"🇹🇫\", \"togo\": \"🇹🇬\", \"thailand\": \"🇹🇭\", \"tajikistan\": \"🇹🇯\", \"tokelau\": \"🇹🇰\", \"timor_leste\": \"🇹🇱\", \"turkmenistan\": \"🇹🇲\", \"tunisia\": \"🇹🇳\", \"tonga\": \"🇹🇴\", \"tr\": \"🇹🇷\", \"trinidad_tobago\": \"🇹🇹\", \"tuvalu\": \"🇹🇻\", \"taiwan\": \"🇹🇼\", \"tanzania\": \"🇹🇿\", \"ukraine\": \"🇺🇦\", \"uganda\": \"🇺🇬\", \"us_outlying_islands\": \"🇺🇲\", \"united_nations\": \"🇺🇳\", \"us\": \"🇺🇸\", \"uruguay\": \"🇺🇾\", \"uzbekistan\": \"🇺🇿\", \"vatican_city\": \"🇻🇦\", \"st_vincent_grenadines\": \"🇻🇨\", \"venezuela\": \"🇻🇪\", \"british_virgin_islands\": \"🇻🇬\", \"us_virgin_islands\": \"🇻🇮\", \"vietnam\": \"🇻🇳\", \"vanuatu\": \"🇻🇺\", \"wallis_futuna\": \"🇼🇫\", \"samoa\": \"🇼🇸\", \"kosovo\": \"🇽🇰\", \"yemen\": \"🇾🇪\", \"mayotte\": \"🇾🇹\", \"south_africa\": \"🇿🇦\", \"zambia\": \"🇿🇲\", \"zimbabwe\": \"🇿🇼\", \"england\": \"🏴󠁧󠁢󠁥󠁮󠁧󠁿\", \"scotland\": \"🏴󠁧󠁢󠁳󠁣󠁴󠁿\", \"wales\": \"🏴󠁧󠁢󠁷󠁬󠁳󠁿\"",
      "content_html": "<ul>\n<li>\"100\": \"💯\",</li>\n<li>\"1234\": \"🔢\",</li>\n<li>\"grinning\": \"😀\",</li>\n<li>\"smiley\": \"😃\",</li>\n<li>\"smile\": \"😄\",</li>\n<li>\"grin\": \"😁\",</li>\n<li>\"laughing\": \"😆\",</li>\n<li>\"satisfied\": \"😆\",</li>\n<li>\"sweat_smile\": \"😅\",</li>\n<li>\"rofl\": \"🤣\",</li>\n<li>\"joy\": \"😂\",</li>\n<li>\"slightly_smiling_face\": \"🙂\",</li>\n<li>\"upside_down_face\": \"🙃\",</li>\n<li>\"wink\": \"😉\",</li>\n<li>\"blush\": \"😊\",</li>\n<li>\"innocent\": \"😇\",</li>\n<li>\"smiling_face_with_three_hearts\": \"🥰\",</li>\n<li>\"heart_eyes\": \"😍\",</li>\n<li>\"star_struck\": \"🤩\",</li>\n<li>\"kissing_heart\": \"😘\",</li>\n<li>\"kissing\": \"😗\",</li>\n<li>\"relaxed\": \"☺️\",</li>\n<li>\"kissing_closed_eyes\": \"😚\",</li>\n<li>\"kissing_smiling_eyes\": \"😙\",</li>\n<li>\"smiling_face_with_tear\": \"🥲\",</li>\n<li>\"yum\": \"😋\",</li>\n<li>\"stuck_out_tongue\": \"😛\",</li>\n<li>\"stuck_out_tongue_winking_eye\": \"😜\",</li>\n<li>\"zany_face\": \"🤪\",</li>\n<li>\"stuck_out_tongue_closed_eyes\": \"😝\",</li>\n<li>\"money_mouth_face\": \"🤑\",</li>\n<li>\"hugs\": \"🤗\",</li>\n<li>\"hand_over_mouth\": \"🤭\",</li>\n<li>\"shushing_face\": \"🤫\",</li>\n<li>\"thinking\": \"🤔\",</li>\n<li>\"zipper_mouth_face\": \"🤐\",</li>\n<li>\"raised_eyebrow\": \"🤨\",</li>\n<li>\"neutral_face\": \"😐\",</li>\n<li>\"expressionless\": \"😑\",</li>\n<li>\"no_mouth\": \"😶\",</li>\n<li>\"smirk\": \"😏\",</li>\n<li>\"unamused\": \"😒\",</li>\n<li>\"roll_eyes\": \"🙄\",</li>\n<li>\"grimacing\": \"😬\",</li>\n<li>\"lying_face\": \"🤥\",</li>\n<li>\"relieved\": \"😌\",</li>\n<li>\"pensive\": \"😔\",</li>\n<li>\"sleepy\": \"😪\",</li>\n<li>\"drooling_face\": \"🤤\",</li>\n<li>\"sleeping\": \"😴\",</li>\n<li>\"mask\": \"😷\",</li>\n<li>\"face_with_thermometer\": \"🤒\",</li>\n<li>\"face_with_head_bandage\": \"🤕\",</li>\n<li>\"nauseated_face\": \"🤢\",</li>\n<li>\"vomiting_face\": \"🤮\",</li>\n<li>\"sneezing_face\": \"🤧\",</li>\n<li>\"hot_face\": \"🥵\",</li>\n<li>\"cold_face\": \"🥶\",</li>\n<li>\"woozy_face\": \"🥴\",</li>\n<li>\"dizzy_face\": \"😵\",</li>\n<li>\"exploding_head\": \"🤯\",</li>\n<li>\"cowboy_hat_face\": \"🤠\",</li>\n<li>\"partying_face\": \"🥳\",</li>\n<li>\"disguised_face\": \"🥸\",</li>\n<li>\"sunglasses\": \"😎\",</li>\n<li>\"nerd_face\": \"🤓\",</li>\n<li>\"monocle_face\": \"🧐\",</li>\n<li>\"confused\": \"😕\",</li>\n<li>\"worried\": \"😟\",</li>\n<li>\"slightly_frowning_face\": \"🙁\",</li>\n<li>\"frowning_face\": \"☹️\",</li>\n<li>\"open_mouth\": \"😮\",</li>\n<li>\"hushed\": \"😯\",</li>\n<li>\"astonished\": \"😲\",</li>\n<li>\"flushed\": \"😳\",</li>\n<li>\"pleading_face\": \"🥺\",</li>\n<li>\"frowning\": \"😦\",</li>\n<li>\"anguished\": \"😧\",</li>\n<li>\"fearful\": \"😨\",</li>\n<li>\"cold_sweat\": \"😰\",</li>\n<li>\"disappointed_relieved\": \"😥\",</li>\n<li>\"cry\": \"😢\",</li>\n<li>\"sob\": \"😭\",</li>\n<li>\"scream\": \"😱\",</li>\n<li>\"confounded\": \"😖\",</li>\n<li>\"persevere\": \"😣\",</li>\n<li>\"disappointed\": \"😞\",</li>\n<li>\"sweat\": \"😓\",</li>\n<li>\"weary\": \"😩\",</li>\n<li>\"tired_face\": \"😫\",</li>\n<li>\"yawning_face\": \"🥱\",</li>\n<li>\"triumph\": \"😤\",</li>\n<li>\"rage\": \"😡\",</li>\n<li>\"pout\": \"😡\",</li>\n<li>\"angry\": \"😠\",</li>\n<li>\"cursing_face\": \"🤬\",</li>\n<li>\"smiling_imp\": \"😈\",</li>\n<li>\"imp\": \"👿\",</li>\n<li>\"skull\": \"💀\",</li>\n<li>\"skull_and_crossbones\": \"☠️\",</li>\n<li>\"hankey\": \"💩\",</li>\n<li>\"poop\": \"💩\",</li>\n<li>\"shit\": \"💩\",</li>\n<li>\"clown_face\": \"🤡\",</li>\n<li>\"japanese_ogre\": \"👹\",</li>\n<li>\"japanese_goblin\": \"👺\",</li>\n<li>\"ghost\": \"👻\",</li>\n<li>\"alien\": \"👽\",</li>\n<li>\"space_invader\": \"👾\",</li>\n<li>\"robot\": \"🤖\",</li>\n<li>\"smiley_cat\": \"😺\",</li>\n<li>\"smile_cat\": \"😸\",</li>\n<li>\"joy_cat\": \"😹\",</li>\n<li>\"heart_eyes_cat\": \"😻\",</li>\n<li>\"smirk_cat\": \"😼\",</li>\n<li>\"kissing_cat\": \"😽\",</li>\n<li>\"scream_cat\": \"🙀\",</li>\n<li>\"crying_cat_face\": \"😿\",</li>\n<li>\"pouting_cat\": \"😾\",</li>\n<li>\"see_no_evil\": \"🙈\",</li>\n<li>\"hear_no_evil\": \"🙉\",</li>\n<li>\"speak_no_evil\": \"🙊\",</li>\n<li>\"kiss\": \"💋\",</li>\n<li>\"love_letter\": \"💌\",</li>\n<li>\"cupid\": \"💘\",</li>\n<li>\"gift_heart\": \"💝\",</li>\n<li>\"sparkling_heart\": \"💖\",</li>\n<li>\"heartpulse\": \"💗\",</li>\n<li>\"heartbeat\": \"💓\",</li>\n<li>\"revolving_hearts\": \"💞\",</li>\n<li>\"two_hearts\": \"💕\",</li>\n<li>\"heart_decoration\": \"💟\",</li>\n<li>\"heavy_heart_exclamation\": \"❣️\",</li>\n<li>\"broken_heart\": \"💔\",</li>\n<li>\"heart\": \"❤️\",</li>\n<li>\"orange_heart\": \"🧡\",</li>\n<li>\"yellow_heart\": \"💛\",</li>\n<li>\"green_heart\": \"💚\",</li>\n<li>\"blue_heart\": \"💙\",</li>\n<li>\"purple_heart\": \"💜\",</li>\n<li>\"brown_heart\": \"🤎\",</li>\n<li>\"black_heart\": \"🖤\",</li>\n<li>\"white_heart\": \"🤍\",</li>\n<li>\"anger\": \"💢\",</li>\n<li>\"boom\": \"💥\",</li>\n<li>\"collision\": \"💥\",</li>\n<li>\"dizzy\": \"💫\",</li>\n<li>\"sweat_drops\": \"💦\",</li>\n<li>\"dash\": \"💨\",</li>\n<li>\"hole\": \"🕳️\",</li>\n<li>\"bomb\": \"💣\",</li>\n<li>\"speech_balloon\": \"💬\",</li>\n<li>\"eye_speech_bubble\": \"👁️‍🗨️\",</li>\n<li>\"left_speech_bubble\": \"🗨️\",</li>\n<li>\"right_anger_bubble\": \"🗯️\",</li>\n<li>\"thought_balloon\": \"💭\",</li>\n<li>\"zzz\": \"💤\",</li>\n<li>\"wave\": \"👋\",</li>\n<li>\"raised_back_of_hand\": \"🤚\",</li>\n<li>\"raised_hand_with_fingers_splayed\": \"🖐️\",</li>\n<li>\"hand\": \"✋\",</li>\n<li>\"raised_hand\": \"✋\",</li>\n<li>\"vulcan_salute\": \"🖖\",</li>\n<li>\"ok_hand\": \"👌\",</li>\n<li>\"pinched_fingers\": \"🤌\",</li>\n<li>\"pinching_hand\": \"🤏\",</li>\n<li>\"v\": \"✌️\",</li>\n<li>\"crossed_fingers\": \"🤞\",</li>\n<li>\"love_you_gesture\": \"🤟\",</li>\n<li>\"metal\": \"🤘\",</li>\n<li>\"call_me_hand\": \"🤙\",</li>\n<li>\"point_left\": \"👈\",</li>\n<li>\"point_right\": \"👉\",</li>\n<li>\"point_up_2\": \"👆\",</li>\n<li>\"middle_finger\": \"🖕\",</li>\n<li>\"fu\": \"🖕\",</li>\n<li>\"point_down\": \"👇\",</li>\n<li>\"point_up\": \"☝️\",</li>\n<li>\"+1\": \"👍\",</li>\n<li>\"thumbsup\": \"👍\",</li>\n<li>\"-1\": \"👎\",</li>\n<li>\"thumbsdown\": \"👎\",</li>\n<li>\"fist_raised\": \"✊\",</li>\n<li>\"fist\": \"✊\",</li>\n<li>\"fist_oncoming\": \"👊\",</li>\n<li>\"facepunch\": \"👊\",</li>\n<li>\"punch\": \"👊\",</li>\n<li>\"fist_left\": \"🤛\",</li>\n<li>\"fist_right\": \"🤜\",</li>\n<li>\"clap\": \"👏\",</li>\n<li>\"raised_hands\": \"🙌\",</li>\n<li>\"open_hands\": \"👐\",</li>\n<li>\"palms_up_together\": \"🤲\",</li>\n<li>\"handshake\": \"🤝\",</li>\n<li>\"pray\": \"🙏\",</li>\n<li>\"writing_hand\": \"✍️\",</li>\n<li>\"nail_care\": \"💅\",</li>\n<li>\"selfie\": \"🤳\",</li>\n<li>\"muscle\": \"💪\",</li>\n<li>\"mechanical_arm\": \"🦾\",</li>\n<li>\"mechanical_leg\": \"🦿\",</li>\n<li>\"leg\": \"🦵\",</li>\n<li>\"foot\": \"🦶\",</li>\n<li>\"ear\": \"👂\",</li>\n<li>\"ear_with_hearing_aid\": \"🦻\",</li>\n<li>\"nose\": \"👃\",</li>\n<li>\"brain\": \"🧠\",</li>\n<li>\"anatomical_heart\": \"🫀\",</li>\n<li>\"lungs\": \"🫁\",</li>\n<li>\"tooth\": \"🦷\",</li>\n<li>\"bone\": \"🦴\",</li>\n<li>\"eyes\": \"👀\",</li>\n<li>\"eye\": \"👁️\",</li>\n<li>\"tongue\": \"👅\",</li>\n<li>\"lips\": \"👄\",</li>\n<li>\"baby\": \"👶\",</li>\n<li>\"child\": \"🧒\",</li>\n<li>\"boy\": \"👦\",</li>\n<li>\"girl\": \"👧\",</li>\n<li>\"adult\": \"🧑\",</li>\n<li>\"blond_haired_person\": \"👱\",</li>\n<li>\"man\": \"👨\",</li>\n<li>\"bearded_person\": \"🧔\",</li>\n<li>\"red_haired_man\": \"👨‍🦰\",</li>\n<li>\"curly_haired_man\": \"👨‍🦱\",</li>\n<li>\"white_haired_man\": \"👨‍🦳\",</li>\n<li>\"bald_man\": \"👨‍🦲\",</li>\n<li>\"woman\": \"👩\",</li>\n<li>\"red_haired_woman\": \"👩‍🦰\",</li>\n<li>\"person_red_hair\": \"🧑‍🦰\",</li>\n<li>\"curly_haired_woman\": \"👩‍🦱\",</li>\n<li>\"person_curly_hair\": \"🧑‍🦱\",</li>\n<li>\"white_haired_woman\": \"👩‍🦳\",</li>\n<li>\"person_white_hair\": \"🧑‍🦳\",</li>\n<li>\"bald_woman\": \"👩‍🦲\",</li>\n<li>\"person_bald\": \"🧑‍🦲\",</li>\n<li>\"blond_haired_woman\": \"👱‍♀️\",</li>\n<li>\"blonde_woman\": \"👱‍♀️\",</li>\n<li>\"blond_haired_man\": \"👱‍♂️\",</li>\n<li>\"older_adult\": \"🧓\",</li>\n<li>\"older_man\": \"👴\",</li>\n<li>\"older_woman\": \"👵\",</li>\n<li>\"frowning_person\": \"🙍\",</li>\n<li>\"frowning_man\": \"🙍‍♂️\",</li>\n<li>\"frowning_woman\": \"🙍‍♀️\",</li>\n<li>\"pouting_face\": \"🙎\",</li>\n<li>\"pouting_man\": \"🙎‍♂️\",</li>\n<li>\"pouting_woman\": \"🙎‍♀️\",</li>\n<li>\"no_good\": \"🙅\",</li>\n<li>\"no_good_man\": \"🙅‍♂️\",</li>\n<li>\"ng_man\": \"🙅‍♂️\",</li>\n<li>\"no_good_woman\": \"🙅‍♀️\",</li>\n<li>\"ng_woman\": \"🙅‍♀️\",</li>\n<li>\"ok_person\": \"🙆\",</li>\n<li>\"ok_man\": \"🙆‍♂️\",</li>\n<li>\"ok_woman\": \"🙆‍♀️\",</li>\n<li>\"tipping_hand_person\": \"💁\",</li>\n<li>\"information_desk_person\": \"💁\",</li>\n<li>\"tipping_hand_man\": \"💁‍♂️\",</li>\n<li>\"sassy_man\": \"💁‍♂️\",</li>\n<li>\"tipping_hand_woman\": \"💁‍♀️\",</li>\n<li>\"sassy_woman\": \"💁‍♀️\",</li>\n<li>\"raising_hand\": \"🙋\",</li>\n<li>\"raising_hand_man\": \"🙋‍♂️\",</li>\n<li>\"raising_hand_woman\": \"🙋‍♀️\",</li>\n<li>\"deaf_person\": \"🧏\",</li>\n<li>\"deaf_man\": \"🧏‍♂️\",</li>\n<li>\"deaf_woman\": \"🧏‍♀️\",</li>\n<li>\"bow\": \"🙇\",</li>\n<li>\"bowing_man\": \"🙇‍♂️\",</li>\n<li>\"bowing_woman\": \"🙇‍♀️\",</li>\n<li>\"facepalm\": \"🤦\",</li>\n<li>\"man_facepalming\": \"🤦‍♂️\",</li>\n<li>\"woman_facepalming\": \"🤦‍♀️\",</li>\n<li>\"shrug\": \"🤷\",</li>\n<li>\"man_shrugging\": \"🤷‍♂️\",</li>\n<li>\"woman_shrugging\": \"🤷‍♀️\",</li>\n<li>\"health_worker\": \"🧑‍⚕️\",</li>\n<li>\"man_health_worker\": \"👨‍⚕️\",</li>\n<li>\"woman_health_worker\": \"👩‍⚕️\",</li>\n<li>\"student\": \"🧑‍🎓\",</li>\n<li>\"man_student\": \"👨‍🎓\",</li>\n<li>\"woman_student\": \"👩‍🎓\",</li>\n<li>\"teacher\": \"🧑‍🏫\",</li>\n<li>\"man_teacher\": \"👨‍🏫\",</li>\n<li>\"woman_teacher\": \"👩‍🏫\",</li>\n<li>\"judge\": \"🧑‍⚖️\",</li>\n<li>\"man_judge\": \"👨‍⚖️\",</li>\n<li>\"woman_judge\": \"👩‍⚖️\",</li>\n<li>\"farmer\": \"🧑‍🌾\",</li>\n<li>\"man_farmer\": \"👨‍🌾\",</li>\n<li>\"woman_farmer\": \"👩‍🌾\",</li>\n<li>\"cook\": \"🧑‍🍳\",</li>\n<li>\"man_cook\": \"👨‍🍳\",</li>\n<li>\"woman_cook\": \"👩‍🍳\",</li>\n<li>\"mechanic\": \"🧑‍🔧\",</li>\n<li>\"man_mechanic\": \"👨‍🔧\",</li>\n<li>\"woman_mechanic\": \"👩‍🔧\",</li>\n<li>\"factory_worker\": \"🧑‍🏭\",</li>\n<li>\"man_factory_worker\": \"👨‍🏭\",</li>\n<li>\"woman_factory_worker\": \"👩‍🏭\",</li>\n<li>\"office_worker\": \"🧑‍💼\",</li>\n<li>\"man_office_worker\": \"👨‍💼\",</li>\n<li>\"woman_office_worker\": \"👩‍💼\",</li>\n<li>\"scientist\": \"🧑‍🔬\",</li>\n<li>\"man_scientist\": \"👨‍🔬\",</li>\n<li>\"woman_scientist\": \"👩‍🔬\",</li>\n<li>\"technologist\": \"🧑‍💻\",</li>\n<li>\"man_technologist\": \"👨‍💻\",</li>\n<li>\"woman_technologist\": \"👩‍💻\",</li>\n<li>\"singer\": \"🧑‍🎤\",</li>\n<li>\"man_singer\": \"👨‍🎤\",</li>\n<li>\"woman_singer\": \"👩‍🎤\",</li>\n<li>\"artist\": \"🧑‍🎨\",</li>\n<li>\"man_artist\": \"👨‍🎨\",</li>\n<li>\"woman_artist\": \"👩‍🎨\",</li>\n<li>\"pilot\": \"🧑‍✈️\",</li>\n<li>\"man_pilot\": \"👨‍✈️\",</li>\n<li>\"woman_pilot\": \"👩‍✈️\",</li>\n<li>\"astronaut\": \"🧑‍🚀\",</li>\n<li>\"man_astronaut\": \"👨‍🚀\",</li>\n<li>\"woman_astronaut\": \"👩‍🚀\",</li>\n<li>\"firefighter\": \"🧑‍🚒\",</li>\n<li>\"man_firefighter\": \"👨‍🚒\",</li>\n<li>\"woman_firefighter\": \"👩‍🚒\",</li>\n<li>\"police_officer\": \"👮\",</li>\n<li>\"cop\": \"👮\",</li>\n<li>\"policeman\": \"👮‍♂️\",</li>\n<li>\"policewoman\": \"👮‍♀️\",</li>\n<li>\"detective\": \"🕵️\",</li>\n<li>\"male_detective\": \"🕵️‍♂️\",</li>\n<li>\"female_detective\": \"🕵️‍♀️\",</li>\n<li>\"guard\": \"💂\",</li>\n<li>\"guardsman\": \"💂‍♂️\",</li>\n<li>\"guardswoman\": \"💂‍♀️\",</li>\n<li>\"ninja\": \"🥷\",</li>\n<li>\"construction_worker\": \"👷\",</li>\n<li>\"construction_worker_man\": \"👷‍♂️\",</li>\n<li>\"construction_worker_woman\": \"👷‍♀️\",</li>\n<li>\"prince\": \"🤴\",</li>\n<li>\"princess\": \"👸\",</li>\n<li>\"person_with_turban\": \"👳\",</li>\n<li>\"man_with_turban\": \"👳‍♂️\",</li>\n<li>\"woman_with_turban\": \"👳‍♀️\",</li>\n<li>\"man_with_gua_pi_mao\": \"👲\",</li>\n<li>\"woman_with_headscarf\": \"🧕\",</li>\n<li>\"person_in_tuxedo\": \"🤵\",</li>\n<li>\"man_in_tuxedo\": \"🤵‍♂️\",</li>\n<li>\"woman_in_tuxedo\": \"🤵‍♀️\",</li>\n<li>\"person_with_veil\": \"👰\",</li>\n<li>\"man_with_veil\": \"👰‍♂️\",</li>\n<li>\"woman_with_veil\": \"👰‍♀️\",</li>\n<li>\"bride_with_veil\": \"👰‍♀️\",</li>\n<li>\"pregnant_woman\": \"🤰\",</li>\n<li>\"breast_feeding\": \"🤱\",</li>\n<li>\"woman_feeding_baby\": \"👩‍🍼\",</li>\n<li>\"man_feeding_baby\": \"👨‍🍼\",</li>\n<li>\"person_feeding_baby\": \"🧑‍🍼\",</li>\n<li>\"angel\": \"👼\",</li>\n<li>\"santa\": \"🎅\",</li>\n<li>\"mrs_claus\": \"🤶\",</li>\n<li>\"mx_claus\": \"🧑‍🎄\",</li>\n<li>\"superhero\": \"🦸\",</li>\n<li>\"superhero_man\": \"🦸‍♂️\",</li>\n<li>\"superhero_woman\": \"🦸‍♀️\",</li>\n<li>\"supervillain\": \"🦹\",</li>\n<li>\"supervillain_man\": \"🦹‍♂️\",</li>\n<li>\"supervillain_woman\": \"🦹‍♀️\",</li>\n<li>\"mage\": \"🧙\",</li>\n<li>\"mage_man\": \"🧙‍♂️\",</li>\n<li>\"mage_woman\": \"🧙‍♀️\",</li>\n<li>\"fairy\": \"🧚\",</li>\n<li>\"fairy_man\": \"🧚‍♂️\",</li>\n<li>\"fairy_woman\": \"🧚‍♀️\",</li>\n<li>\"vampire\": \"🧛\",</li>\n<li>\"vampire_man\": \"🧛‍♂️\",</li>\n<li>\"vampire_woman\": \"🧛‍♀️\",</li>\n<li>\"merperson\": \"🧜\",</li>\n<li>\"merman\": \"🧜‍♂️\",</li>\n<li>\"mermaid\": \"🧜‍♀️\",</li>\n<li>\"elf\": \"🧝\",</li>\n<li>\"elf_man\": \"🧝‍♂️\",</li>\n<li>\"elf_woman\": \"🧝‍♀️\",</li>\n<li>\"genie\": \"🧞\",</li>\n<li>\"genie_man\": \"🧞‍♂️\",</li>\n<li>\"genie_woman\": \"🧞‍♀️\",</li>\n<li>\"zombie\": \"🧟\",</li>\n<li>\"zombie_man\": \"🧟‍♂️\",</li>\n<li>\"zombie_woman\": \"🧟‍♀️\",</li>\n<li>\"massage\": \"💆\",</li>\n<li>\"massage_man\": \"💆‍♂️\",</li>\n<li>\"massage_woman\": \"💆‍♀️\",</li>\n<li>\"haircut\": \"💇\",</li>\n<li>\"haircut_man\": \"💇‍♂️\",</li>\n<li>\"haircut_woman\": \"💇‍♀️\",</li>\n<li>\"walking\": \"🚶\",</li>\n<li>\"walking_man\": \"🚶‍♂️\",</li>\n<li>\"walking_woman\": \"🚶‍♀️\",</li>\n<li>\"standing_person\": \"🧍\",</li>\n<li>\"standing_man\": \"🧍‍♂️\",</li>\n<li>\"standing_woman\": \"🧍‍♀️\",</li>\n<li>\"kneeling_person\": \"🧎\",</li>\n<li>\"kneeling_man\": \"🧎‍♂️\",</li>\n<li>\"kneeling_woman\": \"🧎‍♀️\",</li>\n<li>\"person_with_probing_cane\": \"🧑‍🦯\",</li>\n<li>\"man_with_probing_cane\": \"👨‍🦯\",</li>\n<li>\"woman_with_probing_cane\": \"👩‍🦯\",</li>\n<li>\"person_in_motorized_wheelchair\": \"🧑‍🦼\",</li>\n<li>\"man_in_motorized_wheelchair\": \"👨‍🦼\",</li>\n<li>\"woman_in_motorized_wheelchair\": \"👩‍🦼\",</li>\n<li>\"person_in_manual_wheelchair\": \"🧑‍🦽\",</li>\n<li>\"man_in_manual_wheelchair\": \"👨‍🦽\",</li>\n<li>\"woman_in_manual_wheelchair\": \"👩‍🦽\",</li>\n<li>\"runner\": \"🏃\",</li>\n<li>\"running\": \"🏃\",</li>\n<li>\"running_man\": \"🏃‍♂️\",</li>\n<li>\"running_woman\": \"🏃‍♀️\",</li>\n<li>\"woman_dancing\": \"💃\",</li>\n<li>\"dancer\": \"💃\",</li>\n<li>\"man_dancing\": \"🕺\",</li>\n<li>\"business_suit_levitating\": \"🕴️\",</li>\n<li>\"dancers\": \"👯\",</li>\n<li>\"dancing_men\": \"👯‍♂️\",</li>\n<li>\"dancing_women\": \"👯‍♀️\",</li>\n<li>\"sauna_person\": \"🧖\",</li>\n<li>\"sauna_man\": \"🧖‍♂️\",</li>\n<li>\"sauna_woman\": \"🧖‍♀️\",</li>\n<li>\"climbing\": \"🧗\",</li>\n<li>\"climbing_man\": \"🧗‍♂️\",</li>\n<li>\"climbing_woman\": \"🧗‍♀️\",</li>\n<li>\"person_fencing\": \"🤺\",</li>\n<li>\"horse_racing\": \"🏇\",</li>\n<li>\"skier\": \"⛷️\",</li>\n<li>\"snowboarder\": \"🏂\",</li>\n<li>\"golfing\": \"🏌️\",</li>\n<li>\"golfing_man\": \"🏌️‍♂️\",</li>\n<li>\"golfing_woman\": \"🏌️‍♀️\",</li>\n<li>\"surfer\": \"🏄\",</li>\n<li>\"surfing_man\": \"🏄‍♂️\",</li>\n<li>\"surfing_woman\": \"🏄‍♀️\",</li>\n<li>\"rowboat\": \"🚣\",</li>\n<li>\"rowing_man\": \"🚣‍♂️\",</li>\n<li>\"rowing_woman\": \"🚣‍♀️\",</li>\n<li>\"swimmer\": \"🏊\",</li>\n<li>\"swimming_man\": \"🏊‍♂️\",</li>\n<li>\"swimming_woman\": \"🏊‍♀️\",</li>\n<li>\"bouncing_ball_person\": \"⛹️\",</li>\n<li>\"bouncing_ball_man\": \"⛹️‍♂️\",</li>\n<li>\"basketball_man\": \"⛹️‍♂️\",</li>\n<li>\"bouncing_ball_woman\": \"⛹️‍♀️\",</li>\n<li>\"basketball_woman\": \"⛹️‍♀️\",</li>\n<li>\"weight_lifting\": \"🏋️\",</li>\n<li>\"weight_lifting_man\": \"🏋️‍♂️\",</li>\n<li>\"weight_lifting_woman\": \"🏋️‍♀️\",</li>\n<li>\"bicyclist\": \"🚴\",</li>\n<li>\"biking_man\": \"🚴‍♂️\",</li>\n<li>\"biking_woman\": \"🚴‍♀️\",</li>\n<li>\"mountain_bicyclist\": \"🚵\",</li>\n<li>\"mountain_biking_man\": \"🚵‍♂️\",</li>\n<li>\"mountain_biking_woman\": \"🚵‍♀️\",</li>\n<li>\"cartwheeling\": \"🤸\",</li>\n<li>\"man_cartwheeling\": \"🤸‍♂️\",</li>\n<li>\"woman_cartwheeling\": \"🤸‍♀️\",</li>\n<li>\"wrestling\": \"🤼\",</li>\n<li>\"men_wrestling\": \"🤼‍♂️\",</li>\n<li>\"women_wrestling\": \"🤼‍♀️\",</li>\n<li>\"water_polo\": \"🤽\",</li>\n<li>\"man_playing_water_polo\": \"🤽‍♂️\",</li>\n<li>\"woman_playing_water_polo\": \"🤽‍♀️\",</li>\n<li>\"handball_person\": \"🤾\",</li>\n<li>\"man_playing_handball\": \"🤾‍♂️\",</li>\n<li>\"woman_playing_handball\": \"🤾‍♀️\",</li>\n<li>\"juggling_person\": \"🤹\",</li>\n<li>\"man_juggling\": \"🤹‍♂️\",</li>\n<li>\"woman_juggling\": \"🤹‍♀️\",</li>\n<li>\"lotus_position\": \"🧘\",</li>\n<li>\"lotus_position_man\": \"🧘‍♂️\",</li>\n<li>\"lotus_position_woman\": \"🧘‍♀️\",</li>\n<li>\"bath\": \"🛀\",</li>\n<li>\"sleeping_bed\": \"🛌\",</li>\n<li>\"people_holding_hands\": \"🧑‍🤝‍🧑\",</li>\n<li>\"two_women_holding_hands\": \"👭\",</li>\n<li>\"couple\": \"👫\",</li>\n<li>\"two_men_holding_hands\": \"👬\",</li>\n<li>\"couplekiss\": \"💏\",</li>\n<li>\"couplekiss_man_woman\": \"👩‍❤️‍💋‍👨\",</li>\n<li>\"couplekiss_man_man\": \"👨‍❤️‍💋‍👨\",</li>\n<li>\"couplekiss_woman_woman\": \"👩‍❤️‍💋‍👩\",</li>\n<li>\"couple_with_heart\": \"💑\",</li>\n<li>\"couple_with_heart_woman_man\": \"👩‍❤️‍👨\",</li>\n<li>\"couple_with_heart_man_man\": \"👨‍❤️‍👨\",</li>\n<li>\"couple_with_heart_woman_woman\": \"👩‍❤️‍👩\",</li>\n<li>\"family\": \"👪\",</li>\n<li>\"family_man_woman_boy\": \"👨‍👩‍👦\",</li>\n<li>\"family_man_woman_girl\": \"👨‍👩‍👧\",</li>\n<li>\"family_man_woman_girl_boy\": \"👨‍👩‍👧‍👦\",</li>\n<li>\"family_man_woman_boy_boy\": \"👨‍👩‍👦‍👦\",</li>\n<li>\"family_man_woman_girl_girl\": \"👨‍👩‍👧‍👧\",</li>\n<li>\"family_man_man_boy\": \"👨‍👨‍👦\",</li>\n<li>\"family_man_man_girl\": \"👨‍👨‍👧\",</li>\n<li>\"family_man_man_girl_boy\": \"👨‍👨‍👧‍👦\",</li>\n<li>\"family_man_man_boy_boy\": \"👨‍👨‍👦‍👦\",</li>\n<li>\"family_man_man_girl_girl\": \"👨‍👨‍👧‍👧\",</li>\n<li>\"family_woman_woman_boy\": \"👩‍👩‍👦\",</li>\n<li>\"family_woman_woman_girl\": \"👩‍👩‍👧\",</li>\n<li>\"family_woman_woman_girl_boy\": \"👩‍👩‍👧‍👦\",</li>\n<li>\"family_woman_woman_boy_boy\": \"👩‍👩‍👦‍👦\",</li>\n<li>\"family_woman_woman_girl_girl\": \"👩‍👩‍👧‍👧\",</li>\n<li>\"family_man_boy\": \"👨‍👦\",</li>\n<li>\"family_man_boy_boy\": \"👨‍👦‍👦\",</li>\n<li>\"family_man_girl\": \"👨‍👧\",</li>\n<li>\"family_man_girl_boy\": \"👨‍👧‍👦\",</li>\n<li>\"family_man_girl_girl\": \"👨‍👧‍👧\",</li>\n<li>\"family_woman_boy\": \"👩‍👦\",</li>\n<li>\"family_woman_boy_boy\": \"👩‍👦‍👦\",</li>\n<li>\"family_woman_girl\": \"👩‍👧\",</li>\n<li>\"family_woman_girl_boy\": \"👩‍👧‍👦\",</li>\n<li>\"family_woman_girl_girl\": \"👩‍👧‍👧\",</li>\n<li>\"speaking_head\": \"🗣️\",</li>\n<li>\"bust_in_silhouette\": \"👤\",</li>\n<li>\"busts_in_silhouette\": \"👥\",</li>\n<li>\"people_hugging\": \"🫂\",</li>\n<li>\"footprints\": \"👣\",</li>\n<li>\"monkey_face\": \"🐵\",</li>\n<li>\"monkey\": \"🐒\",</li>\n<li>\"gorilla\": \"🦍\",</li>\n<li>\"orangutan\": \"🦧\",</li>\n<li>\"dog\": \"🐶\",</li>\n<li>\"dog2\": \"🐕\",</li>\n<li>\"guide_dog\": \"🦮\",</li>\n<li>\"service_dog\": \"🐕‍🦺\",</li>\n<li>\"poodle\": \"🐩\",</li>\n<li>\"wolf\": \"🐺\",</li>\n<li>\"fox_face\": \"🦊\",</li>\n<li>\"raccoon\": \"🦝\",</li>\n<li>\"cat\": \"🐱\",</li>\n<li>\"cat2\": \"🐈\",</li>\n<li>\"black_cat\": \"🐈‍⬛\",</li>\n<li>\"lion\": \"🦁\",</li>\n<li>\"tiger\": \"🐯\",</li>\n<li>\"tiger2\": \"🐅\",</li>\n<li>\"leopard\": \"🐆\",</li>\n<li>\"horse\": \"🐴\",</li>\n<li>\"racehorse\": \"🐎\",</li>\n<li>\"unicorn\": \"🦄\",</li>\n<li>\"zebra\": \"🦓\",</li>\n<li>\"deer\": \"🦌\",</li>\n<li>\"bison\": \"🦬\",</li>\n<li>\"cow\": \"🐮\",</li>\n<li>\"ox\": \"🐂\",</li>\n<li>\"water_buffalo\": \"🐃\",</li>\n<li>\"cow2\": \"🐄\",</li>\n<li>\"pig\": \"🐷\",</li>\n<li>\"pig2\": \"🐖\",</li>\n<li>\"boar\": \"🐗\",</li>\n<li>\"pig_nose\": \"🐽\",</li>\n<li>\"ram\": \"🐏\",</li>\n<li>\"sheep\": \"🐑\",</li>\n<li>\"goat\": \"🐐\",</li>\n<li>\"dromedary_camel\": \"🐪\",</li>\n<li>\"camel\": \"🐫\",</li>\n<li>\"llama\": \"🦙\",</li>\n<li>\"giraffe\": \"🦒\",</li>\n<li>\"elephant\": \"🐘\",</li>\n<li>\"mammoth\": \"🦣\",</li>\n<li>\"rhinoceros\": \"🦏\",</li>\n<li>\"hippopotamus\": \"🦛\",</li>\n<li>\"mouse\": \"🐭\",</li>\n<li>\"mouse2\": \"🐁\",</li>\n<li>\"rat\": \"🐀\",</li>\n<li>\"hamster\": \"🐹\",</li>\n<li>\"rabbit\": \"🐰\",</li>\n<li>\"rabbit2\": \"🐇\",</li>\n<li>\"chipmunk\": \"🐿️\",</li>\n<li>\"beaver\": \"🦫\",</li>\n<li>\"hedgehog\": \"🦔\",</li>\n<li>\"bat\": \"🦇\",</li>\n<li>\"bear\": \"🐻\",</li>\n<li>\"polar_bear\": \"🐻‍❄️\",</li>\n<li>\"koala\": \"🐨\",</li>\n<li>\"panda_face\": \"🐼\",</li>\n<li>\"sloth\": \"🦥\",</li>\n<li>\"otter\": \"🦦\",</li>\n<li>\"skunk\": \"🦨\",</li>\n<li>\"kangaroo\": \"🦘\",</li>\n<li>\"badger\": \"🦡\",</li>\n<li>\"feet\": \"🐾\",</li>\n<li>\"paw_prints\": \"🐾\",</li>\n<li>\"turkey\": \"🦃\",</li>\n<li>\"chicken\": \"🐔\",</li>\n<li>\"rooster\": \"🐓\",</li>\n<li>\"hatching_chick\": \"🐣\",</li>\n<li>\"baby_chick\": \"🐤\",</li>\n<li>\"hatched_chick\": \"🐥\",</li>\n<li>\"bird\": \"🐦\",</li>\n<li>\"penguin\": \"🐧\",</li>\n<li>\"dove\": \"🕊️\",</li>\n<li>\"eagle\": \"🦅\",</li>\n<li>\"duck\": \"🦆\",</li>\n<li>\"swan\": \"🦢\",</li>\n<li>\"owl\": \"🦉\",</li>\n<li>\"dodo\": \"🦤\",</li>\n<li>\"feather\": \"🪶\",</li>\n<li>\"flamingo\": \"🦩\",</li>\n<li>\"peacock\": \"🦚\",</li>\n<li>\"parrot\": \"🦜\",</li>\n<li>\"frog\": \"🐸\",</li>\n<li>\"crocodile\": \"🐊\",</li>\n<li>\"turtle\": \"🐢\",</li>\n<li>\"lizard\": \"🦎\",</li>\n<li>\"snake\": \"🐍\",</li>\n<li>\"dragon_face\": \"🐲\",</li>\n<li>\"dragon\": \"🐉\",</li>\n<li>\"sauropod\": \"🦕\",</li>\n<li>\"t-rex\": \"🦖\",</li>\n<li>\"whale\": \"🐳\",</li>\n<li>\"whale2\": \"🐋\",</li>\n<li>\"dolphin\": \"🐬\",</li>\n<li>\"flipper\": \"🐬\",</li>\n<li>\"seal\": \"🦭\",</li>\n<li>\"fish\": \"🐟\",</li>\n<li>\"tropical_fish\": \"🐠\",</li>\n<li>\"blowfish\": \"🐡\",</li>\n<li>\"shark\": \"🦈\",</li>\n<li>\"octopus\": \"🐙\",</li>\n<li>\"shell\": \"🐚\",</li>\n<li>\"snail\": \"🐌\",</li>\n<li>\"butterfly\": \"🦋\",</li>\n<li>\"bug\": \"🐛\",</li>\n<li>\"ant\": \"🐜\",</li>\n<li>\"bee\": \"🐝\",</li>\n<li>\"honeybee\": \"🐝\",</li>\n<li>\"beetle\": \"🪲\",</li>\n<li>\"lady_beetle\": \"🐞\",</li>\n<li>\"cricket\": \"🦗\",</li>\n<li>\"cockroach\": \"🪳\",</li>\n<li>\"spider\": \"🕷️\",</li>\n<li>\"spider_web\": \"🕸️\",</li>\n<li>\"scorpion\": \"🦂\",</li>\n<li>\"mosquito\": \"🦟\",</li>\n<li>\"fly\": \"🪰\",</li>\n<li>\"worm\": \"🪱\",</li>\n<li>\"microbe\": \"🦠\",</li>\n<li>\"bouquet\": \"💐\",</li>\n<li>\"cherry_blossom\": \"🌸\",</li>\n<li>\"white_flower\": \"💮\",</li>\n<li>\"rosette\": \"🏵️\",</li>\n<li>\"rose\": \"🌹\",</li>\n<li>\"wilted_flower\": \"🥀\",</li>\n<li>\"hibiscus\": \"🌺\",</li>\n<li>\"sunflower\": \"🌻\",</li>\n<li>\"blossom\": \"🌼\",</li>\n<li>\"tulip\": \"🌷\",</li>\n<li>\"seedling\": \"🌱\",</li>\n<li>\"potted_plant\": \"🪴\",</li>\n<li>\"evergreen_tree\": \"🌲\",</li>\n<li>\"deciduous_tree\": \"🌳\",</li>\n<li>\"palm_tree\": \"🌴\",</li>\n<li>\"cactus\": \"🌵\",</li>\n<li>\"ear_of_rice\": \"🌾\",</li>\n<li>\"herb\": \"🌿\",</li>\n<li>\"shamrock\": \"☘️\",</li>\n<li>\"four_leaf_clover\": \"🍀\",</li>\n<li>\"maple_leaf\": \"🍁\",</li>\n<li>\"fallen_leaf\": \"🍂\",</li>\n<li>\"leaves\": \"🍃\",</li>\n<li>\"grapes\": \"🍇\",</li>\n<li>\"melon\": \"🍈\",</li>\n<li>\"watermelon\": \"🍉\",</li>\n<li>\"tangerine\": \"🍊\",</li>\n<li>\"orange\": \"🍊\",</li>\n<li>\"mandarin\": \"🍊\",</li>\n<li>\"lemon\": \"🍋\",</li>\n<li>\"banana\": \"🍌\",</li>\n<li>\"pineapple\": \"🍍\",</li>\n<li>\"mango\": \"🥭\",</li>\n<li>\"apple\": \"🍎\",</li>\n<li>\"green_apple\": \"🍏\",</li>\n<li>\"pear\": \"🍐\",</li>\n<li>\"peach\": \"🍑\",</li>\n<li>\"cherries\": \"🍒\",</li>\n<li>\"strawberry\": \"🍓\",</li>\n<li>\"blueberries\": \"🫐\",</li>\n<li>\"kiwi_fruit\": \"🥝\",</li>\n<li>\"tomato\": \"🍅\",</li>\n<li>\"olive\": \"🫒\",</li>\n<li>\"coconut\": \"🥥\",</li>\n<li>\"avocado\": \"🥑\",</li>\n<li>\"eggplant\": \"🍆\",</li>\n<li>\"potato\": \"🥔\",</li>\n<li>\"carrot\": \"🥕\",</li>\n<li>\"corn\": \"🌽\",</li>\n<li>\"hot_pepper\": \"🌶️\",</li>\n<li>\"bell_pepper\": \"🫑\",</li>\n<li>\"cucumber\": \"🥒\",</li>\n<li>\"leafy_green\": \"🥬\",</li>\n<li>\"broccoli\": \"🥦\",</li>\n<li>\"garlic\": \"🧄\",</li>\n<li>\"onion\": \"🧅\",</li>\n<li>\"mushroom\": \"🍄\",</li>\n<li>\"peanuts\": \"🥜\",</li>\n<li>\"chestnut\": \"🌰\",</li>\n<li>\"bread\": \"🍞\",</li>\n<li>\"croissant\": \"🥐\",</li>\n<li>\"baguette_bread\": \"🥖\",</li>\n<li>\"flatbread\": \"🫓\",</li>\n<li>\"pretzel\": \"🥨\",</li>\n<li>\"bagel\": \"🥯\",</li>\n<li>\"pancakes\": \"🥞\",</li>\n<li>\"waffle\": \"🧇\",</li>\n<li>\"cheese\": \"🧀\",</li>\n<li>\"meat_on_bone\": \"🍖\",</li>\n<li>\"poultry_leg\": \"🍗\",</li>\n<li>\"cut_of_meat\": \"🥩\",</li>\n<li>\"bacon\": \"🥓\",</li>\n<li>\"hamburger\": \"🍔\",</li>\n<li>\"fries\": \"🍟\",</li>\n<li>\"pizza\": \"🍕\",</li>\n<li>\"hotdog\": \"🌭\",</li>\n<li>\"sandwich\": \"🥪\",</li>\n<li>\"taco\": \"🌮\",</li>\n<li>\"burrito\": \"🌯\",</li>\n<li>\"tamale\": \"🫔\",</li>\n<li>\"stuffed_flatbread\": \"🥙\",</li>\n<li>\"falafel\": \"🧆\",</li>\n<li>\"egg\": \"🥚\",</li>\n<li>\"fried_egg\": \"🍳\",</li>\n<li>\"shallow_pan_of_food\": \"🥘\",</li>\n<li>\"stew\": \"🍲\",</li>\n<li>\"fondue\": \"🫕\",</li>\n<li>\"bowl_with_spoon\": \"🥣\",</li>\n<li>\"green_salad\": \"🥗\",</li>\n<li>\"popcorn\": \"🍿\",</li>\n<li>\"butter\": \"🧈\",</li>\n<li>\"salt\": \"🧂\",</li>\n<li>\"canned_food\": \"🥫\",</li>\n<li>\"bento\": \"🍱\",</li>\n<li>\"rice_cracker\": \"🍘\",</li>\n<li>\"rice_ball\": \"🍙\",</li>\n<li>\"rice\": \"🍚\",</li>\n<li>\"curry\": \"🍛\",</li>\n<li>\"ramen\": \"🍜\",</li>\n<li>\"spaghetti\": \"🍝\",</li>\n<li>\"sweet_potato\": \"🍠\",</li>\n<li>\"oden\": \"🍢\",</li>\n<li>\"sushi\": \"🍣\",</li>\n<li>\"fried_shrimp\": \"🍤\",</li>\n<li>\"fish_cake\": \"🍥\",</li>\n<li>\"moon_cake\": \"🥮\",</li>\n<li>\"dango\": \"🍡\",</li>\n<li>\"dumpling\": \"🥟\",</li>\n<li>\"fortune_cookie\": \"🥠\",</li>\n<li>\"takeout_box\": \"🥡\",</li>\n<li>\"crab\": \"🦀\",</li>\n<li>\"lobster\": \"🦞\",</li>\n<li>\"shrimp\": \"🦐\",</li>\n<li>\"squid\": \"🦑\",</li>\n<li>\"oyster\": \"🦪\",</li>\n<li>\"icecream\": \"🍦\",</li>\n<li>\"shaved_ice\": \"🍧\",</li>\n<li>\"ice_cream\": \"🍨\",</li>\n<li>\"doughnut\": \"🍩\",</li>\n<li>\"cookie\": \"🍪\",</li>\n<li>\"birthday\": \"🎂\",</li>\n<li>\"cake\": \"🍰\",</li>\n<li>\"cupcake\": \"🧁\",</li>\n<li>\"pie\": \"🥧\",</li>\n<li>\"chocolate_bar\": \"🍫\",</li>\n<li>\"candy\": \"🍬\",</li>\n<li>\"lollipop\": \"🍭\",</li>\n<li>\"custard\": \"🍮\",</li>\n<li>\"honey_pot\": \"🍯\",</li>\n<li>\"baby_bottle\": \"🍼\",</li>\n<li>\"milk_glass\": \"🥛\",</li>\n<li>\"coffee\": \"☕\",</li>\n<li>\"teapot\": \"🫖\",</li>\n<li>\"tea\": \"🍵\",</li>\n<li>\"sake\": \"🍶\",</li>\n<li>\"champagne\": \"🍾\",</li>\n<li>\"wine_glass\": \"🍷\",</li>\n<li>\"cocktail\": \"🍸\",</li>\n<li>\"tropical_drink\": \"🍹\",</li>\n<li>\"beer\": \"🍺\",</li>\n<li>\"beers\": \"🍻\",</li>\n<li>\"clinking_glasses\": \"🥂\",</li>\n<li>\"tumbler_glass\": \"🥃\",</li>\n<li>\"cup_with_straw\": \"🥤\",</li>\n<li>\"bubble_tea\": \"🧋\",</li>\n<li>\"beverage_box\": \"🧃\",</li>\n<li>\"mate\": \"🧉\",</li>\n<li>\"ice_cube\": \"🧊\",</li>\n<li>\"chopsticks\": \"🥢\",</li>\n<li>\"plate_with_cutlery\": \"🍽️\",</li>\n<li>\"fork_and_knife\": \"🍴\",</li>\n<li>\"spoon\": \"🥄\",</li>\n<li>\"hocho\": \"🔪\",</li>\n<li>\"knife\": \"🔪\",</li>\n<li>\"amphora\": \"🏺\",</li>\n<li>\"earth_africa\": \"🌍\",</li>\n<li>\"earth_americas\": \"🌎\",</li>\n<li>\"earth_asia\": \"🌏\",</li>\n<li>\"globe_with_meridians\": \"🌐\",</li>\n<li>\"world_map\": \"🗺️\",</li>\n<li>\"japan\": \"🗾\",</li>\n<li>\"compass\": \"🧭\",</li>\n<li>\"mountain_snow\": \"🏔️\",</li>\n<li>\"mountain\": \"⛰️\",</li>\n<li>\"volcano\": \"🌋\",</li>\n<li>\"mount_fuji\": \"🗻\",</li>\n<li>\"camping\": \"🏕️\",</li>\n<li>\"beach_umbrella\": \"🏖️\",</li>\n<li>\"desert\": \"🏜️\",</li>\n<li>\"desert_island\": \"🏝️\",</li>\n<li>\"national_park\": \"🏞️\",</li>\n<li>\"stadium\": \"🏟️\",</li>\n<li>\"classical_building\": \"🏛️\",</li>\n<li>\"building_construction\": \"🏗️\",</li>\n<li>\"bricks\": \"🧱\",</li>\n<li>\"rock\": \"🪨\",</li>\n<li>\"wood\": \"🪵\",</li>\n<li>\"hut\": \"🛖\",</li>\n<li>\"houses\": \"🏘️\",</li>\n<li>\"derelict_house\": \"🏚️\",</li>\n<li>\"house\": \"🏠\",</li>\n<li>\"house_with_garden\": \"🏡\",</li>\n<li>\"office\": \"🏢\",</li>\n<li>\"post_office\": \"🏣\",</li>\n<li>\"european_post_office\": \"🏤\",</li>\n<li>\"hospital\": \"🏥\",</li>\n<li>\"bank\": \"🏦\",</li>\n<li>\"hotel\": \"🏨\",</li>\n<li>\"love_hotel\": \"🏩\",</li>\n<li>\"convenience_store\": \"🏪\",</li>\n<li>\"school\": \"🏫\",</li>\n<li>\"department_store\": \"🏬\",</li>\n<li>\"factory\": \"🏭\",</li>\n<li>\"japanese_castle\": \"🏯\",</li>\n<li>\"european_castle\": \"🏰\",</li>\n<li>\"wedding\": \"💒\",</li>\n<li>\"tokyo_tower\": \"🗼\",</li>\n<li>\"statue_of_liberty\": \"🗽\",</li>\n<li>\"church\": \"⛪\",</li>\n<li>\"mosque\": \"🕌\",</li>\n<li>\"hindu_temple\": \"🛕\",</li>\n<li>\"synagogue\": \"🕍\",</li>\n<li>\"shinto_shrine\": \"⛩️\",</li>\n<li>\"kaaba\": \"🕋\",</li>\n<li>\"fountain\": \"⛲\",</li>\n<li>\"tent\": \"⛺\",</li>\n<li>\"foggy\": \"🌁\",</li>\n<li>\"night_with_stars\": \"🌃\",</li>\n<li>\"cityscape\": \"🏙️\",</li>\n<li>\"sunrise_over_mountains\": \"🌄\",</li>\n<li>\"sunrise\": \"🌅\",</li>\n<li>\"city_sunset\": \"🌆\",</li>\n<li>\"city_sunrise\": \"🌇\",</li>\n<li>\"bridge_at_night\": \"🌉\",</li>\n<li>\"hotsprings\": \"♨️\",</li>\n<li>\"carousel_horse\": \"🎠\",</li>\n<li>\"ferris_wheel\": \"🎡\",</li>\n<li>\"roller_coaster\": \"🎢\",</li>\n<li>\"barber\": \"💈\",</li>\n<li>\"circus_tent\": \"🎪\",</li>\n<li>\"steam_locomotive\": \"🚂\",</li>\n<li>\"railway_car\": \"🚃\",</li>\n<li>\"bullettrain_side\": \"🚄\",</li>\n<li>\"bullettrain_front\": \"🚅\",</li>\n<li>\"train2\": \"🚆\",</li>\n<li>\"metro\": \"🚇\",</li>\n<li>\"light_rail\": \"🚈\",</li>\n<li>\"station\": \"🚉\",</li>\n<li>\"tram\": \"🚊\",</li>\n<li>\"monorail\": \"🚝\",</li>\n<li>\"mountain_railway\": \"🚞\",</li>\n<li>\"train\": \"🚋\",</li>\n<li>\"bus\": \"🚌\",</li>\n<li>\"oncoming_bus\": \"🚍\",</li>\n<li>\"trolleybus\": \"🚎\",</li>\n<li>\"minibus\": \"🚐\",</li>\n<li>\"ambulance\": \"🚑\",</li>\n<li>\"fire_engine\": \"🚒\",</li>\n<li>\"police_car\": \"🚓\",</li>\n<li>\"oncoming_police_car\": \"🚔\",</li>\n<li>\"taxi\": \"🚕\",</li>\n<li>\"oncoming_taxi\": \"🚖\",</li>\n<li>\"car\": \"🚗\",</li>\n<li>\"red_car\": \"🚗\",</li>\n<li>\"oncoming_automobile\": \"🚘\",</li>\n<li>\"blue_car\": \"🚙\",</li>\n<li>\"pickup_truck\": \"🛻\",</li>\n<li>\"truck\": \"🚚\",</li>\n<li>\"articulated_lorry\": \"🚛\",</li>\n<li>\"tractor\": \"🚜\",</li>\n<li>\"racing_car\": \"🏎️\",</li>\n<li>\"motorcycle\": \"🏍️\",</li>\n<li>\"motor_scooter\": \"🛵\",</li>\n<li>\"manual_wheelchair\": \"🦽\",</li>\n<li>\"motorized_wheelchair\": \"🦼\",</li>\n<li>\"auto_rickshaw\": \"🛺\",</li>\n<li>\"bike\": \"🚲\",</li>\n<li>\"kick_scooter\": \"🛴\",</li>\n<li>\"skateboard\": \"🛹\",</li>\n<li>\"roller_skate\": \"🛼\",</li>\n<li>\"busstop\": \"🚏\",</li>\n<li>\"motorway\": \"🛣️\",</li>\n<li>\"railway_track\": \"🛤️\",</li>\n<li>\"oil_drum\": \"🛢️\",</li>\n<li>\"fuelpump\": \"⛽\",</li>\n<li>\"rotating_light\": \"🚨\",</li>\n<li>\"traffic_light\": \"🚥\",</li>\n<li>\"vertical_traffic_light\": \"🚦\",</li>\n<li>\"stop_sign\": \"🛑\",</li>\n<li>\"construction\": \"🚧\",</li>\n<li>\"anchor\": \"⚓\",</li>\n<li>\"boat\": \"⛵\",</li>\n<li>\"sailboat\": \"⛵\",</li>\n<li>\"canoe\": \"🛶\",</li>\n<li>\"speedboat\": \"🚤\",</li>\n<li>\"passenger_ship\": \"🛳️\",</li>\n<li>\"ferry\": \"⛴️\",</li>\n<li>\"motor_boat\": \"🛥️\",</li>\n<li>\"ship\": \"🚢\",</li>\n<li>\"airplane\": \"✈️\",</li>\n<li>\"small_airplane\": \"🛩️\",</li>\n<li>\"flight_departure\": \"🛫\",</li>\n<li>\"flight_arrival\": \"🛬\",</li>\n<li>\"parachute\": \"🪂\",</li>\n<li>\"seat\": \"💺\",</li>\n<li>\"helicopter\": \"🚁\",</li>\n<li>\"suspension_railway\": \"🚟\",</li>\n<li>\"mountain_cableway\": \"🚠\",</li>\n<li>\"aerial_tramway\": \"🚡\",</li>\n<li>\"artificial_satellite\": \"🛰️\",</li>\n<li>\"rocket\": \"🚀\",</li>\n<li>\"flying_saucer\": \"🛸\",</li>\n<li>\"bellhop_bell\": \"🛎️\",</li>\n<li>\"luggage\": \"🧳\",</li>\n<li>\"hourglass\": \"⌛\",</li>\n<li>\"hourglass_flowing_sand\": \"⏳\",</li>\n<li>\"watch\": \"⌚\",</li>\n<li>\"alarm_clock\": \"⏰\",</li>\n<li>\"stopwatch\": \"⏱️\",</li>\n<li>\"timer_clock\": \"⏲️\",</li>\n<li>\"mantelpiece_clock\": \"🕰️\",</li>\n<li>\"clock12\": \"🕛\",</li>\n<li>\"clock1230\": \"🕧\",</li>\n<li>\"clock1\": \"🕐\",</li>\n<li>\"clock130\": \"🕜\",</li>\n<li>\"clock2\": \"🕑\",</li>\n<li>\"clock230\": \"🕝\",</li>\n<li>\"clock3\": \"🕒\",</li>\n<li>\"clock330\": \"🕞\",</li>\n<li>\"clock4\": \"🕓\",</li>\n<li>\"clock430\": \"🕟\",</li>\n<li>\"clock5\": \"🕔\",</li>\n<li>\"clock530\": \"🕠\",</li>\n<li>\"clock6\": \"🕕\",</li>\n<li>\"clock630\": \"🕡\",</li>\n<li>\"clock7\": \"🕖\",</li>\n<li>\"clock730\": \"🕢\",</li>\n<li>\"clock8\": \"🕗\",</li>\n<li>\"clock830\": \"🕣\",</li>\n<li>\"clock9\": \"🕘\",</li>\n<li>\"clock930\": \"🕤\",</li>\n<li>\"clock10\": \"🕙\",</li>\n<li>\"clock1030\": \"🕥\",</li>\n<li>\"clock11\": \"🕚\",</li>\n<li>\"clock1130\": \"🕦\",</li>\n<li>\"new_moon\": \"🌑\",</li>\n<li>\"waxing_crescent_moon\": \"🌒\",</li>\n<li>\"first_quarter_moon\": \"🌓\",</li>\n<li>\"moon\": \"🌔\",</li>\n<li>\"waxing_gibbous_moon\": \"🌔\",</li>\n<li>\"full_moon\": \"🌕\",</li>\n<li>\"waning_gibbous_moon\": \"🌖\",</li>\n<li>\"last_quarter_moon\": \"🌗\",</li>\n<li>\"waning_crescent_moon\": \"🌘\",</li>\n<li>\"crescent_moon\": \"🌙\",</li>\n<li>\"new_moon_with_face\": \"🌚\",</li>\n<li>\"first_quarter_moon_with_face\": \"🌛\",</li>\n<li>\"last_quarter_moon_with_face\": \"🌜\",</li>\n<li>\"thermometer\": \"🌡️\",</li>\n<li>\"sunny\": \"☀️\",</li>\n<li>\"full_moon_with_face\": \"🌝\",</li>\n<li>\"sun_with_face\": \"🌞\",</li>\n<li>\"ringed_planet\": \"🪐\",</li>\n<li>\"star\": \"⭐\",</li>\n<li>\"star2\": \"🌟\",</li>\n<li>\"stars\": \"🌠\",</li>\n<li>\"milky_way\": \"🌌\",</li>\n<li>\"cloud\": \"☁️\",</li>\n<li>\"partly_sunny\": \"⛅\",</li>\n<li>\"cloud_with_lightning_and_rain\": \"⛈️\",</li>\n<li>\"sun_behind_small_cloud\": \"🌤️\",</li>\n<li>\"sun_behind_large_cloud\": \"🌥️\",</li>\n<li>\"sun_behind_rain_cloud\": \"🌦️\",</li>\n<li>\"cloud_with_rain\": \"🌧️\",</li>\n<li>\"cloud_with_snow\": \"🌨️\",</li>\n<li>\"cloud_with_lightning\": \"🌩️\",</li>\n<li>\"tornado\": \"🌪️\",</li>\n<li>\"fog\": \"🌫️\",</li>\n<li>\"wind_face\": \"🌬️\",</li>\n<li>\"cyclone\": \"🌀\",</li>\n<li>\"rainbow\": \"🌈\",</li>\n<li>\"closed_umbrella\": \"🌂\",</li>\n<li>\"open_umbrella\": \"☂️\",</li>\n<li>\"umbrella\": \"☔\",</li>\n<li>\"parasol_on_ground\": \"⛱️\",</li>\n<li>\"zap\": \"⚡\",</li>\n<li>\"snowflake\": \"❄️\",</li>\n<li>\"snowman_with_snow\": \"☃️\",</li>\n<li>\"snowman\": \"⛄\",</li>\n<li>\"comet\": \"☄️\",</li>\n<li>\"fire\": \"🔥\",</li>\n<li>\"droplet\": \"💧\",</li>\n<li>\"ocean\": \"🌊\",</li>\n<li>\"jack_o_lantern\": \"🎃\",</li>\n<li>\"christmas_tree\": \"🎄\",</li>\n<li>\"fireworks\": \"🎆\",</li>\n<li>\"sparkler\": \"🎇\",</li>\n<li>\"firecracker\": \"🧨\",</li>\n<li>\"sparkles\": \"✨\",</li>\n<li>\"balloon\": \"🎈\",</li>\n<li>\"tada\": \"🎉\",</li>\n<li>\"confetti_ball\": \"🎊\",</li>\n<li>\"tanabata_tree\": \"🎋\",</li>\n<li>\"bamboo\": \"🎍\",</li>\n<li>\"dolls\": \"🎎\",</li>\n<li>\"flags\": \"🎏\",</li>\n<li>\"wind_chime\": \"🎐\",</li>\n<li>\"rice_scene\": \"🎑\",</li>\n<li>\"red_envelope\": \"🧧\",</li>\n<li>\"ribbon\": \"🎀\",</li>\n<li>\"gift\": \"🎁\",</li>\n<li>\"reminder_ribbon\": \"🎗️\",</li>\n<li>\"tickets\": \"🎟️\",</li>\n<li>\"ticket\": \"🎫\",</li>\n<li>\"medal_military\": \"🎖️\",</li>\n<li>\"trophy\": \"🏆\",</li>\n<li>\"medal_sports\": \"🏅\",</li>\n<li>\"1st_place_medal\": \"🥇\",</li>\n<li>\"2nd_place_medal\": \"🥈\",</li>\n<li>\"3rd_place_medal\": \"🥉\",</li>\n<li>\"soccer\": \"⚽\",</li>\n<li>\"baseball\": \"⚾\",</li>\n<li>\"softball\": \"🥎\",</li>\n<li>\"basketball\": \"🏀\",</li>\n<li>\"volleyball\": \"🏐\",</li>\n<li>\"football\": \"🏈\",</li>\n<li>\"rugby_football\": \"🏉\",</li>\n<li>\"tennis\": \"🎾\",</li>\n<li>\"flying_disc\": \"🥏\",</li>\n<li>\"bowling\": \"🎳\",</li>\n<li>\"cricket_game\": \"🏏\",</li>\n<li>\"field_hockey\": \"🏑\",</li>\n<li>\"ice_hockey\": \"🏒\",</li>\n<li>\"lacrosse\": \"🥍\",</li>\n<li>\"ping_pong\": \"🏓\",</li>\n<li>\"badminton\": \"🏸\",</li>\n<li>\"boxing_glove\": \"🥊\",</li>\n<li>\"martial_arts_uniform\": \"🥋\",</li>\n<li>\"goal_net\": \"🥅\",</li>\n<li>\"golf\": \"⛳\",</li>\n<li>\"ice_skate\": \"⛸️\",</li>\n<li>\"fishing_pole_and_fish\": \"🎣\",</li>\n<li>\"diving_mask\": \"🤿\",</li>\n<li>\"running_shirt_with_sash\": \"🎽\",</li>\n<li>\"ski\": \"🎿\",</li>\n<li>\"sled\": \"🛷\",</li>\n<li>\"curling_stone\": \"🥌\",</li>\n<li>\"dart\": \"🎯\",</li>\n<li>\"yo_yo\": \"🪀\",</li>\n<li>\"kite\": \"🪁\",</li>\n<li>\"8ball\": \"🎱\",</li>\n<li>\"crystal_ball\": \"🔮\",</li>\n<li>\"magic_wand\": \"🪄\",</li>\n<li>\"nazar_amulet\": \"🧿\",</li>\n<li>\"video_game\": \"🎮\",</li>\n<li>\"joystick\": \"🕹️\",</li>\n<li>\"slot_machine\": \"🎰\",</li>\n<li>\"game_die\": \"🎲\",</li>\n<li>\"jigsaw\": \"🧩\",</li>\n<li>\"teddy_bear\": \"🧸\",</li>\n<li>\"pinata\": \"🪅\",</li>\n<li>\"nesting_dolls\": \"🪆\",</li>\n<li>\"spades\": \"♠️\",</li>\n<li>\"hearts\": \"♥️\",</li>\n<li>\"diamonds\": \"♦️\",</li>\n<li>\"clubs\": \"♣️\",</li>\n<li>\"chess_pawn\": \"♟️\",</li>\n<li>\"black_joker\": \"🃏\",</li>\n<li>\"mahjong\": \"🀄\",</li>\n<li>\"flower_playing_cards\": \"🎴\",</li>\n<li>\"performing_arts\": \"🎭\",</li>\n<li>\"framed_picture\": \"🖼️\",</li>\n<li>\"art\": \"🎨\",</li>\n<li>\"thread\": \"🧵\",</li>\n<li>\"sewing_needle\": \"🪡\",</li>\n<li>\"yarn\": \"🧶\",</li>\n<li>\"knot\": \"🪢\",</li>\n<li>\"eyeglasses\": \"👓\",</li>\n<li>\"dark_sunglasses\": \"🕶️\",</li>\n<li>\"goggles\": \"🥽\",</li>\n<li>\"lab_coat\": \"🥼\",</li>\n<li>\"safety_vest\": \"🦺\",</li>\n<li>\"necktie\": \"👔\",</li>\n<li>\"shirt\": \"👕\",</li>\n<li>\"tshirt\": \"👕\",</li>\n<li>\"jeans\": \"👖\",</li>\n<li>\"scarf\": \"🧣\",</li>\n<li>\"gloves\": \"🧤\",</li>\n<li>\"coat\": \"🧥\",</li>\n<li>\"socks\": \"🧦\",</li>\n<li>\"dress\": \"👗\",</li>\n<li>\"kimono\": \"👘\",</li>\n<li>\"sari\": \"🥻\",</li>\n<li>\"one_piece_swimsuit\": \"🩱\",</li>\n<li>\"swim_brief\": \"🩲\",</li>\n<li>\"shorts\": \"🩳\",</li>\n<li>\"bikini\": \"👙\",</li>\n<li>\"womans_clothes\": \"👚\",</li>\n<li>\"purse\": \"👛\",</li>\n<li>\"handbag\": \"👜\",</li>\n<li>\"pouch\": \"👝\",</li>\n<li>\"shopping\": \"🛍️\",</li>\n<li>\"school_satchel\": \"🎒\",</li>\n<li>\"thong_sandal\": \"🩴\",</li>\n<li>\"mans_shoe\": \"👞\",</li>\n<li>\"shoe\": \"👞\",</li>\n<li>\"athletic_shoe\": \"👟\",</li>\n<li>\"hiking_boot\": \"🥾\",</li>\n<li>\"flat_shoe\": \"🥿\",</li>\n<li>\"high_heel\": \"👠\",</li>\n<li>\"sandal\": \"👡\",</li>\n<li>\"ballet_shoes\": \"🩰\",</li>\n<li>\"boot\": \"👢\",</li>\n<li>\"crown\": \"👑\",</li>\n<li>\"womans_hat\": \"👒\",</li>\n<li>\"tophat\": \"🎩\",</li>\n<li>\"mortar_board\": \"🎓\",</li>\n<li>\"billed_cap\": \"🧢\",</li>\n<li>\"military_helmet\": \"🪖\",</li>\n<li>\"rescue_worker_helmet\": \"⛑️\",</li>\n<li>\"prayer_beads\": \"📿\",</li>\n<li>\"lipstick\": \"💄\",</li>\n<li>\"ring\": \"💍\",</li>\n<li>\"gem\": \"💎\",</li>\n<li>\"mute\": \"🔇\",</li>\n<li>\"speaker\": \"🔈\",</li>\n<li>\"sound\": \"🔉\",</li>\n<li>\"loud_sound\": \"🔊\",</li>\n<li>\"loudspeaker\": \"📢\",</li>\n<li>\"mega\": \"📣\",</li>\n<li>\"postal_horn\": \"📯\",</li>\n<li>\"bell\": \"🔔\",</li>\n<li>\"no_bell\": \"🔕\",</li>\n<li>\"musical_score\": \"🎼\",</li>\n<li>\"musical_note\": \"🎵\",</li>\n<li>\"notes\": \"🎶\",</li>\n<li>\"studio_microphone\": \"🎙️\",</li>\n<li>\"level_slider\": \"🎚️\",</li>\n<li>\"control_knobs\": \"🎛️\",</li>\n<li>\"microphone\": \"🎤\",</li>\n<li>\"headphones\": \"🎧\",</li>\n<li>\"radio\": \"📻\",</li>\n<li>\"saxophone\": \"🎷\",</li>\n<li>\"accordion\": \"🪗\",</li>\n<li>\"guitar\": \"🎸\",</li>\n<li>\"musical_keyboard\": \"🎹\",</li>\n<li>\"trumpet\": \"🎺\",</li>\n<li>\"violin\": \"🎻\",</li>\n<li>\"banjo\": \"🪕\",</li>\n<li>\"drum\": \"🥁\",</li>\n<li>\"long_drum\": \"🪘\",</li>\n<li>\"iphone\": \"📱\",</li>\n<li>\"calling\": \"📲\",</li>\n<li>\"phone\": \"☎️\",</li>\n<li>\"telephone\": \"☎️\",</li>\n<li>\"telephone_receiver\": \"📞\",</li>\n<li>\"pager\": \"📟\",</li>\n<li>\"fax\": \"📠\",</li>\n<li>\"battery\": \"🔋\",</li>\n<li>\"electric_plug\": \"🔌\",</li>\n<li>\"computer\": \"💻\",</li>\n<li>\"desktop_computer\": \"🖥️\",</li>\n<li>\"printer\": \"🖨️\",</li>\n<li>\"keyboard\": \"⌨️\",</li>\n<li>\"computer_mouse\": \"🖱️\",</li>\n<li>\"trackball\": \"🖲️\",</li>\n<li>\"minidisc\": \"💽\",</li>\n<li>\"floppy_disk\": \"💾\",</li>\n<li>\"cd\": \"💿\",</li>\n<li>\"dvd\": \"📀\",</li>\n<li>\"abacus\": \"🧮\",</li>\n<li>\"movie_camera\": \"🎥\",</li>\n<li>\"film_strip\": \"🎞️\",</li>\n<li>\"film_projector\": \"📽️\",</li>\n<li>\"clapper\": \"🎬\",</li>\n<li>\"tv\": \"📺\",</li>\n<li>\"camera\": \"📷\",</li>\n<li>\"camera_flash\": \"📸\",</li>\n<li>\"video_camera\": \"📹\",</li>\n<li>\"vhs\": \"📼\",</li>\n<li>\"mag\": \"🔍\",</li>\n<li>\"mag_right\": \"🔎\",</li>\n<li>\"candle\": \"🕯️\",</li>\n<li>\"bulb\": \"💡\",</li>\n<li>\"flashlight\": \"🔦\",</li>\n<li>\"izakaya_lantern\": \"🏮\",</li>\n<li>\"lantern\": \"🏮\",</li>\n<li>\"diya_lamp\": \"🪔\",</li>\n<li>\"notebook_with_decorative_cover\": \"📔\",</li>\n<li>\"closed_book\": \"📕\",</li>\n<li>\"book\": \"📖\",</li>\n<li>\"open_book\": \"📖\",</li>\n<li>\"green_book\": \"📗\",</li>\n<li>\"blue_book\": \"📘\",</li>\n<li>\"orange_book\": \"📙\",</li>\n<li>\"books\": \"📚\",</li>\n<li>\"notebook\": \"📓\",</li>\n<li>\"ledger\": \"📒\",</li>\n<li>\"page_with_curl\": \"📃\",</li>\n<li>\"scroll\": \"📜\",</li>\n<li>\"page_facing_up\": \"📄\",</li>\n<li>\"newspaper\": \"📰\",</li>\n<li>\"newspaper_roll\": \"🗞️\",</li>\n<li>\"bookmark_tabs\": \"📑\",</li>\n<li>\"bookmark\": \"🔖\",</li>\n<li>\"label\": \"🏷️\",</li>\n<li>\"moneybag\": \"💰\",</li>\n<li>\"coin\": \"🪙\",</li>\n<li>\"yen\": \"💴\",</li>\n<li>\"dollar\": \"💵\",</li>\n<li>\"euro\": \"💶\",</li>\n<li>\"pound\": \"💷\",</li>\n<li>\"money_with_wings\": \"💸\",</li>\n<li>\"credit_card\": \"💳\",</li>\n<li>\"receipt\": \"🧾\",</li>\n<li>\"chart\": \"💹\",</li>\n<li>\"envelope\": \"✉️\",</li>\n<li>\"email\": \"📧\",</li>\n<li>\"e-mail\": \"📧\",</li>\n<li>\"incoming_envelope\": \"📨\",</li>\n<li>\"envelope_with_arrow\": \"📩\",</li>\n<li>\"outbox_tray\": \"📤\",</li>\n<li>\"inbox_tray\": \"📥\",</li>\n<li>\"package\": \"📦\",</li>\n<li>\"mailbox\": \"📫\",</li>\n<li>\"mailbox_closed\": \"📪\",</li>\n<li>\"mailbox_with_mail\": \"📬\",</li>\n<li>\"mailbox_with_no_mail\": \"📭\",</li>\n<li>\"postbox\": \"📮\",</li>\n<li>\"ballot_box\": \"🗳️\",</li>\n<li>\"pencil2\": \"✏️\",</li>\n<li>\"black_nib\": \"✒️\",</li>\n<li>\"fountain_pen\": \"🖋️\",</li>\n<li>\"pen\": \"🖊️\",</li>\n<li>\"paintbrush\": \"🖌️\",</li>\n<li>\"crayon\": \"🖍️\",</li>\n<li>\"memo\": \"📝\",</li>\n<li>\"pencil\": \"📝\",</li>\n<li>\"briefcase\": \"💼\",</li>\n<li>\"file_folder\": \"📁\",</li>\n<li>\"open_file_folder\": \"📂\",</li>\n<li>\"card_index_dividers\": \"🗂️\",</li>\n<li>\"date\": \"📅\",</li>\n<li>\"calendar\": \"📆\",</li>\n<li>\"spiral_notepad\": \"🗒️\",</li>\n<li>\"spiral_calendar\": \"🗓️\",</li>\n<li>\"card_index\": \"📇\",</li>\n<li>\"chart_with_upwards_trend\": \"📈\",</li>\n<li>\"chart_with_downwards_trend\": \"📉\",</li>\n<li>\"bar_chart\": \"📊\",</li>\n<li>\"clipboard\": \"📋\",</li>\n<li>\"pushpin\": \"📌\",</li>\n<li>\"round_pushpin\": \"📍\",</li>\n<li>\"paperclip\": \"📎\",</li>\n<li>\"paperclips\": \"🖇️\",</li>\n<li>\"straight_ruler\": \"📏\",</li>\n<li>\"triangular_ruler\": \"📐\",</li>\n<li>\"scissors\": \"✂️\",</li>\n<li>\"card_file_box\": \"🗃️\",</li>\n<li>\"file_cabinet\": \"🗄️\",</li>\n<li>\"wastebasket\": \"🗑️\",</li>\n<li>\"lock\": \"🔒\",</li>\n<li>\"unlock\": \"🔓\",</li>\n<li>\"lock_with_ink_pen\": \"🔏\",</li>\n<li>\"closed_lock_with_key\": \"🔐\",</li>\n<li>\"key\": \"🔑\",</li>\n<li>\"old_key\": \"🗝️\",</li>\n<li>\"hammer\": \"🔨\",</li>\n<li>\"axe\": \"🪓\",</li>\n<li>\"pick\": \"⛏️\",</li>\n<li>\"hammer_and_pick\": \"⚒️\",</li>\n<li>\"hammer_and_wrench\": \"🛠️\",</li>\n<li>\"dagger\": \"🗡️\",</li>\n<li>\"crossed_swords\": \"⚔️\",</li>\n<li>\"gun\": \"🔫\",</li>\n<li>\"boomerang\": \"🪃\",</li>\n<li>\"bow_and_arrow\": \"🏹\",</li>\n<li>\"shield\": \"🛡️\",</li>\n<li>\"carpentry_saw\": \"🪚\",</li>\n<li>\"wrench\": \"🔧\",</li>\n<li>\"screwdriver\": \"🪛\",</li>\n<li>\"nut_and_bolt\": \"🔩\",</li>\n<li>\"gear\": \"⚙️\",</li>\n<li>\"clamp\": \"🗜️\",</li>\n<li>\"balance_scale\": \"⚖️\",</li>\n<li>\"probing_cane\": \"🦯\",</li>\n<li>\"link\": \"🔗\",</li>\n<li>\"chains\": \"⛓️\",</li>\n<li>\"hook\": \"🪝\",</li>\n<li>\"toolbox\": \"🧰\",</li>\n<li>\"magnet\": \"🧲\",</li>\n<li>\"ladder\": \"🪜\",</li>\n<li>\"alembic\": \"⚗️\",</li>\n<li>\"test_tube\": \"🧪\",</li>\n<li>\"petri_dish\": \"🧫\",</li>\n<li>\"dna\": \"🧬\",</li>\n<li>\"microscope\": \"🔬\",</li>\n<li>\"telescope\": \"🔭\",</li>\n<li>\"satellite\": \"📡\",</li>\n<li>\"syringe\": \"💉\",</li>\n<li>\"drop_of_blood\": \"🩸\",</li>\n<li>\"pill\": \"💊\",</li>\n<li>\"adhesive_bandage\": \"🩹\",</li>\n<li>\"stethoscope\": \"🩺\",</li>\n<li>\"door\": \"🚪\",</li>\n<li>\"elevator\": \"🛗\",</li>\n<li>\"mirror\": \"🪞\",</li>\n<li>\"window\": \"🪟\",</li>\n<li>\"bed\": \"🛏️\",</li>\n<li>\"couch_and_lamp\": \"🛋️\",</li>\n<li>\"chair\": \"🪑\",</li>\n<li>\"toilet\": \"🚽\",</li>\n<li>\"plunger\": \"🪠\",</li>\n<li>\"shower\": \"🚿\",</li>\n<li>\"bathtub\": \"🛁\",</li>\n<li>\"mouse_trap\": \"🪤\",</li>\n<li>\"razor\": \"🪒\",</li>\n<li>\"lotion_bottle\": \"🧴\",</li>\n<li>\"safety_pin\": \"🧷\",</li>\n<li>\"broom\": \"🧹\",</li>\n<li>\"basket\": \"🧺\",</li>\n<li>\"roll_of_paper\": \"🧻\",</li>\n<li>\"bucket\": \"🪣\",</li>\n<li>\"soap\": \"🧼\",</li>\n<li>\"toothbrush\": \"🪥\",</li>\n<li>\"sponge\": \"🧽\",</li>\n<li>\"fire_extinguisher\": \"🧯\",</li>\n<li>\"shopping_cart\": \"🛒\",</li>\n<li>\"smoking\": \"🚬\",</li>\n<li>\"coffin\": \"⚰️\",</li>\n<li>\"headstone\": \"🪦\",</li>\n<li>\"funeral_urn\": \"⚱️\",</li>\n<li>\"moyai\": \"🗿\",</li>\n<li>\"placard\": \"🪧\",</li>\n<li>\"atm\": \"🏧\",</li>\n<li>\"put_litter_in_its_place\": \"🚮\",</li>\n<li>\"potable_water\": \"🚰\",</li>\n<li>\"wheelchair\": \"♿\",</li>\n<li>\"mens\": \"🚹\",</li>\n<li>\"womens\": \"🚺\",</li>\n<li>\"restroom\": \"🚻\",</li>\n<li>\"baby_symbol\": \"🚼\",</li>\n<li>\"wc\": \"🚾\",</li>\n<li>\"passport_control\": \"🛂\",</li>\n<li>\"customs\": \"🛃\",</li>\n<li>\"baggage_claim\": \"🛄\",</li>\n<li>\"left_luggage\": \"🛅\",</li>\n<li>\"warning\": \"⚠️\",</li>\n<li>\"children_crossing\": \"🚸\",</li>\n<li>\"no_entry\": \"⛔\",</li>\n<li>\"no_entry_sign\": \"🚫\",</li>\n<li>\"no_bicycles\": \"🚳\",</li>\n<li>\"no_smoking\": \"🚭\",</li>\n<li>\"do_not_litter\": \"🚯\",</li>\n<li>\"non-potable_water\": \"🚱\",</li>\n<li>\"no_pedestrians\": \"🚷\",</li>\n<li>\"no_mobile_phones\": \"📵\",</li>\n<li>\"underage\": \"🔞\",</li>\n<li>\"radioactive\": \"☢️\",</li>\n<li>\"biohazard\": \"☣️\",</li>\n<li>\"arrow_up\": \"⬆️\",</li>\n<li>\"arrow_upper_right\": \"↗️\",</li>\n<li>\"arrow_right\": \"➡️\",</li>\n<li>\"arrow_lower_right\": \"↘️\",</li>\n<li>\"arrow_down\": \"⬇️\",</li>\n<li>\"arrow_lower_left\": \"↙️\",</li>\n<li>\"arrow_left\": \"⬅️\",</li>\n<li>\"arrow_upper_left\": \"↖️\",</li>\n<li>\"arrow_up_down\": \"↕️\",</li>\n<li>\"left_right_arrow\": \"↔️\",</li>\n<li>\"leftwards_arrow_with_hook\": \"↩️\",</li>\n<li>\"arrow_right_hook\": \"↪️\",</li>\n<li>\"arrow_heading_up\": \"⤴️\",</li>\n<li>\"arrow_heading_down\": \"⤵️\",</li>\n<li>\"arrows_clockwise\": \"🔃\",</li>\n<li>\"arrows_counterclockwise\": \"🔄\",</li>\n<li>\"back\": \"🔙\",</li>\n<li>\"end\": \"🔚\",</li>\n<li>\"on\": \"🔛\",</li>\n<li>\"soon\": \"🔜\",</li>\n<li>\"top\": \"🔝\",</li>\n<li>\"place_of_worship\": \"🛐\",</li>\n<li>\"atom_symbol\": \"⚛️\",</li>\n<li>\"om\": \"🕉️\",</li>\n<li>\"star_of_david\": \"✡️\",</li>\n<li>\"wheel_of_dharma\": \"☸️\",</li>\n<li>\"yin_yang\": \"☯️\",</li>\n<li>\"latin_cross\": \"✝️\",</li>\n<li>\"orthodox_cross\": \"☦️\",</li>\n<li>\"star_and_crescent\": \"☪️\",</li>\n<li>\"peace_symbol\": \"☮️\",</li>\n<li>\"menorah\": \"🕎\",</li>\n<li>\"six_pointed_star\": \"🔯\",</li>\n<li>\"aries\": \"♈\",</li>\n<li>\"taurus\": \"♉\",</li>\n<li>\"gemini\": \"♊\",</li>\n<li>\"cancer\": \"♋\",</li>\n<li>\"leo\": \"♌\",</li>\n<li>\"virgo\": \"♍\",</li>\n<li>\"libra\": \"♎\",</li>\n<li>\"scorpius\": \"♏\",</li>\n<li>\"sagittarius\": \"♐\",</li>\n<li>\"capricorn\": \"♑\",</li>\n<li>\"aquarius\": \"♒\",</li>\n<li>\"pisces\": \"♓\",</li>\n<li>\"ophiuchus\": \"⛎\",</li>\n<li>\"twisted_rightwards_arrows\": \"🔀\",</li>\n<li>\"repeat\": \"🔁\",</li>\n<li>\"repeat_one\": \"🔂\",</li>\n<li>\"arrow_forward\": \"▶️\",</li>\n<li>\"fast_forward\": \"⏩\",</li>\n<li>\"next_track_button\": \"⏭️\",</li>\n<li>\"play_or_pause_button\": \"⏯️\",</li>\n<li>\"arrow_backward\": \"◀️\",</li>\n<li>\"rewind\": \"⏪\",</li>\n<li>\"previous_track_button\": \"⏮️\",</li>\n<li>\"arrow_up_small\": \"🔼\",</li>\n<li>\"arrow_double_up\": \"⏫\",</li>\n<li>\"arrow_down_small\": \"🔽\",</li>\n<li>\"arrow_double_down\": \"⏬\",</li>\n<li>\"pause_button\": \"⏸️\",</li>\n<li>\"stop_button\": \"⏹️\",</li>\n<li>\"record_button\": \"⏺️\",</li>\n<li>\"eject_button\": \"⏏️\",</li>\n<li>\"cinema\": \"🎦\",</li>\n<li>\"low_brightness\": \"🔅\",</li>\n<li>\"high_brightness\": \"🔆\",</li>\n<li>\"signal_strength\": \"📶\",</li>\n<li>\"vibration_mode\": \"📳\",</li>\n<li>\"mobile_phone_off\": \"📴\",</li>\n<li>\"female_sign\": \"♀️\",</li>\n<li>\"male_sign\": \"♂️\",</li>\n<li>\"transgender_symbol\": \"⚧️\",</li>\n<li>\"heavy_multiplication_x\": \"✖️\",</li>\n<li>\"heavy_plus_sign\": \"➕\",</li>\n<li>\"heavy_minus_sign\": \"➖\",</li>\n<li>\"heavy_division_sign\": \"➗\",</li>\n<li>\"infinity\": \"♾️\",</li>\n<li>\"bangbang\": \"‼️\",</li>\n<li>\"interrobang\": \"⁉️\",</li>\n<li>\"question\": \"❓\",</li>\n<li>\"grey_question\": \"❔\",</li>\n<li>\"grey_exclamation\": \"❕\",</li>\n<li>\"exclamation\": \"❗\",</li>\n<li>\"heavy_exclamation_mark\": \"❗\",</li>\n<li>\"wavy_dash\": \"〰️\",</li>\n<li>\"currency_exchange\": \"💱\",</li>\n<li>\"heavy_dollar_sign\": \"💲\",</li>\n<li>\"medical_symbol\": \"⚕️\",</li>\n<li>\"recycle\": \"♻️\",</li>\n<li>\"fleur_de_lis\": \"⚜️\",</li>\n<li>\"trident\": \"🔱\",</li>\n<li>\"name_badge\": \"📛\",</li>\n<li>\"beginner\": \"🔰\",</li>\n<li>\"o\": \"⭕\",</li>\n<li>\"white_check_mark\": \"✅\",</li>\n<li>\"ballot_box_with_check\": \"☑️\",</li>\n<li>\"heavy_check_mark\": \"✔️\",</li>\n<li>\"x\": \"❌\",</li>\n<li>\"negative_squared_cross_mark\": \"❎\",</li>\n<li>\"curly_loop\": \"➰\",</li>\n<li>\"loop\": \"➿\",</li>\n<li>\"part_alternation_mark\": \"〽️\",</li>\n<li>\"eight_spoked_asterisk\": \"✳️\",</li>\n<li>\"eight_pointed_black_star\": \"✴️\",</li>\n<li>\"sparkle\": \"❇️\",</li>\n<li>\"copyright\": \"©️\",</li>\n<li>\"registered\": \"®️\",</li>\n<li>\"tm\": \"™️\",</li>\n<li>\"hash\": \"#️⃣\",</li>\n<li>\"asterisk\": \"*️⃣\",</li>\n<li>\"zero\": \"0️⃣\",</li>\n<li>\"one\": \"1️⃣\",</li>\n<li>\"two\": \"2️⃣\",</li>\n<li>\"three\": \"3️⃣\",</li>\n<li>\"four\": \"4️⃣\",</li>\n<li>\"five\": \"5️⃣\",</li>\n<li>\"six\": \"6️⃣\",</li>\n<li>\"seven\": \"7️⃣\",</li>\n<li>\"eight\": \"8️⃣\",</li>\n<li>\"nine\": \"9️⃣\",</li>\n<li>\"keycap_ten\": \"🔟\",</li>\n<li>\"capital_abcd\": \"🔠\",</li>\n<li>\"abcd\": \"🔡\",</li>\n<li>\"symbols\": \"🔣\",</li>\n<li>\"abc\": \"🔤\",</li>\n<li>\"a\": \"🅰️\",</li>\n<li>\"ab\": \"🆎\",</li>\n<li>\"b\": \"🅱️\",</li>\n<li>\"cl\": \"🆑\",</li>\n<li>\"cool\": \"🆒\",</li>\n<li>\"free\": \"🆓\",</li>\n<li>\"information_source\": \"ℹ️\",</li>\n<li>\"id\": \"🆔\",</li>\n<li>\"m\": \"Ⓜ️\",</li>\n<li>\"new\": \"🆕\",</li>\n<li>\"ng\": \"🆖\",</li>\n<li>\"o2\": \"🅾️\",</li>\n<li>\"ok\": \"🆗\",</li>\n<li>\"parking\": \"🅿️\",</li>\n<li>\"sos\": \"🆘\",</li>\n<li>\"up\": \"🆙\",</li>\n<li>\"vs\": \"🆚\",</li>\n<li>\"koko\": \"🈁\",</li>\n<li>\"sa\": \"🈂️\",</li>\n<li>\"ideograph_advantage\": \"🉐\",</li>\n<li>\"accept\": \"🉑\",</li>\n<li>\"congratulations\": \"㊗️\",</li>\n<li>\"secret\": \"㊙️\",</li>\n<li>\"u6e80\": \"🈵\",</li>\n<li>\"red_circle\": \"🔴\",</li>\n<li>\"orange_circle\": \"🟠\",</li>\n<li>\"yellow_circle\": \"🟡\",</li>\n<li>\"green_circle\": \"🟢\",</li>\n<li>\"large_blue_circle\": \"🔵\",</li>\n<li>\"purple_circle\": \"🟣\",</li>\n<li>\"brown_circle\": \"🟤\",</li>\n<li>\"black_circle\": \"⚫\",</li>\n<li>\"white_circle\": \"⚪\",</li>\n<li>\"red_square\": \"🟥\",</li>\n<li>\"orange_square\": \"🟧\",</li>\n<li>\"yellow_square\": \"🟨\",</li>\n<li>\"green_square\": \"🟩\",</li>\n<li>\"blue_square\": \"🟦\",</li>\n<li>\"purple_square\": \"🟪\",</li>\n<li>\"brown_square\": \"🟫\",</li>\n<li>\"black_large_square\": \"⬛\",</li>\n<li>\"white_large_square\": \"⬜\",</li>\n<li>\"black_medium_square\": \"◼️\",</li>\n<li>\"white_medium_square\": \"◻️\",</li>\n<li>\"black_medium_small_square\": \"◾\",</li>\n<li>\"white_medium_small_square\": \"◽\",</li>\n<li>\"black_small_square\": \"▪️\",</li>\n<li>\"white_small_square\": \"▫️\",</li>\n<li>\"large_orange_diamond\": \"🔶\",</li>\n<li>\"large_blue_diamond\": \"🔷\",</li>\n<li>\"small_orange_diamond\": \"🔸\",</li>\n<li>\"small_blue_diamond\": \"🔹\",</li>\n<li>\"small_red_triangle\": \"🔺\",</li>\n<li>\"small_red_triangle_down\": \"🔻\",</li>\n<li>\"diamond_shape_with_a_dot_inside\": \"💠\",</li>\n<li>\"radio_button\": \"🔘\",</li>\n<li>\"white_square_button\": \"🔳\",</li>\n<li>\"black_square_button\": \"🔲\",</li>\n<li>\"checkered_flag\": \"🏁\",</li>\n<li>\"triangular_flag_on_post\": \"🚩\",</li>\n<li>\"crossed_flags\": \"🎌\",</li>\n<li>\"black_flag\": \"🏴\",</li>\n<li>\"white_flag\": \"🏳️\",</li>\n<li>\"rainbow_flag\": \"🏳️‍🌈\",</li>\n<li>\"transgender_flag\": \"🏳️‍⚧️\",</li>\n<li>\"pirate_flag\": \"🏴‍☠️\",</li>\n<li>\"ascension_island\": \"🇦🇨\",</li>\n<li>\"andorra\": \"🇦🇩\",</li>\n<li>\"united_arab_emirates\": \"🇦🇪\",</li>\n<li>\"afghanistan\": \"🇦🇫\",</li>\n<li>\"antigua_barbuda\": \"🇦🇬\",</li>\n<li>\"anguilla\": \"🇦🇮\",</li>\n<li>\"albania\": \"🇦🇱\",</li>\n<li>\"armenia\": \"🇦🇲\",</li>\n<li>\"angola\": \"🇦🇴\",</li>\n<li>\"antarctica\": \"🇦🇶\",</li>\n<li>\"argentina\": \"🇦🇷\",</li>\n<li>\"american_samoa\": \"🇦🇸\",</li>\n<li>\"austria\": \"🇦🇹\",</li>\n<li>\"australia\": \"🇦🇺\",</li>\n<li>\"aruba\": \"🇦🇼\",</li>\n<li>\"aland_islands\": \"🇦🇽\",</li>\n<li>\"azerbaijan\": \"🇦🇿\",</li>\n<li>\"bosnia_herzegovina\": \"🇧🇦\",</li>\n<li>\"barbados\": \"🇧🇧\",</li>\n<li>\"bangladesh\": \"🇧🇩\",</li>\n<li>\"belgium\": \"🇧🇪\",</li>\n<li>\"burkina_faso\": \"🇧🇫\",</li>\n<li>\"bulgaria\": \"🇧🇬\",</li>\n<li>\"bahrain\": \"🇧🇭\",</li>\n<li>\"burundi\": \"🇧🇮\",</li>\n<li>\"benin\": \"🇧🇯\",</li>\n<li>\"st_barthelemy\": \"🇧🇱\",</li>\n<li>\"bermuda\": \"🇧🇲\",</li>\n<li>\"brunei\": \"🇧🇳\",</li>\n<li>\"bolivia\": \"🇧🇴\",</li>\n<li>\"caribbean_netherlands\": \"🇧🇶\",</li>\n<li>\"brazil\": \"🇧🇷\",</li>\n<li>\"bahamas\": \"🇧🇸\",</li>\n<li>\"bhutan\": \"🇧🇹\",</li>\n<li>\"bouvet_island\": \"🇧🇻\",</li>\n<li>\"botswana\": \"🇧🇼\",</li>\n<li>\"belarus\": \"🇧🇾\",</li>\n<li>\"belize\": \"🇧🇿\",</li>\n<li>\"canada\": \"🇨🇦\",</li>\n<li>\"cocos_islands\": \"🇨🇨\",</li>\n<li>\"congo_kinshasa\": \"🇨🇩\",</li>\n<li>\"central_african_republic\": \"🇨🇫\",</li>\n<li>\"congo_brazzaville\": \"🇨🇬\",</li>\n<li>\"switzerland\": \"🇨🇭\",</li>\n<li>\"cote_divoire\": \"🇨🇮\",</li>\n<li>\"cook_islands\": \"🇨🇰\",</li>\n<li>\"chile\": \"🇨🇱\",</li>\n<li>\"cameroon\": \"🇨🇲\",</li>\n<li>\"cn\": \"🇨🇳\",</li>\n<li>\"colombia\": \"🇨🇴\",</li>\n<li>\"clipperton_island\": \"🇨🇵\",</li>\n<li>\"costa_rica\": \"🇨🇷\",</li>\n<li>\"cuba\": \"🇨🇺\",</li>\n<li>\"cape_verde\": \"🇨🇻\",</li>\n<li>\"curacao\": \"🇨🇼\",</li>\n<li>\"christmas_island\": \"🇨🇽\",</li>\n<li>\"cyprus\": \"🇨🇾\",</li>\n<li>\"czech_republic\": \"🇨🇿\",</li>\n<li>\"de\": \"🇩🇪\",</li>\n<li>\"diego_garcia\": \"🇩🇬\",</li>\n<li>\"djibouti\": \"🇩🇯\",</li>\n<li>\"denmark\": \"🇩🇰\",</li>\n<li>\"dominica\": \"🇩🇲\",</li>\n<li>\"dominican_republic\": \"🇩🇴\",</li>\n<li>\"algeria\": \"🇩🇿\",</li>\n<li>\"ceuta_melilla\": \"🇪🇦\",</li>\n<li>\"ecuador\": \"🇪🇨\",</li>\n<li>\"estonia\": \"🇪🇪\",</li>\n<li>\"egypt\": \"🇪🇬\",</li>\n<li>\"western_sahara\": \"🇪🇭\",</li>\n<li>\"eritrea\": \"🇪🇷\",</li>\n<li>\"es\": \"🇪🇸\",</li>\n<li>\"ethiopia\": \"🇪🇹\",</li>\n<li>\"eu\": \"🇪🇺\",</li>\n<li>\"european_union\": \"🇪🇺\",</li>\n<li>\"finland\": \"🇫🇮\",</li>\n<li>\"fiji\": \"🇫🇯\",</li>\n<li>\"falkland_islands\": \"🇫🇰\",</li>\n<li>\"micronesia\": \"🇫🇲\",</li>\n<li>\"faroe_islands\": \"🇫🇴\",</li>\n<li>\"fr\": \"🇫🇷\",</li>\n<li>\"gabon\": \"🇬🇦\",</li>\n<li>\"gb\": \"🇬🇧\",</li>\n<li>\"uk\": \"🇬🇧\",</li>\n<li>\"grenada\": \"🇬🇩\",</li>\n<li>\"georgia\": \"🇬🇪\",</li>\n<li>\"french_guiana\": \"🇬🇫\",</li>\n<li>\"guernsey\": \"🇬🇬\",</li>\n<li>\"ghana\": \"🇬🇭\",</li>\n<li>\"gibraltar\": \"🇬🇮\",</li>\n<li>\"greenland\": \"🇬🇱\",</li>\n<li>\"gambia\": \"🇬🇲\",</li>\n<li>\"guinea\": \"🇬🇳\",</li>\n<li>\"guadeloupe\": \"🇬🇵\",</li>\n<li>\"equatorial_guinea\": \"🇬🇶\",</li>\n<li>\"greece\": \"🇬🇷\",</li>\n<li>\"south_georgia_south_sandwich_islands\": \"🇬🇸\",</li>\n<li>\"guatemala\": \"🇬🇹\",</li>\n<li>\"guam\": \"🇬🇺\",</li>\n<li>\"guinea_bissau\": \"🇬🇼\",</li>\n<li>\"guyana\": \"🇬🇾\",</li>\n<li>\"hong_kong\": \"🇭🇰\",</li>\n<li>\"heard_mcdonald_islands\": \"🇭🇲\",</li>\n<li>\"honduras\": \"🇭🇳\",</li>\n<li>\"croatia\": \"🇭🇷\",</li>\n<li>\"haiti\": \"🇭🇹\",</li>\n<li>\"hungary\": \"🇭🇺\",</li>\n<li>\"canary_islands\": \"🇮🇨\",</li>\n<li>\"indonesia\": \"🇮🇩\",</li>\n<li>\"ireland\": \"🇮🇪\",</li>\n<li>\"israel\": \"🇮🇱\",</li>\n<li>\"isle_of_man\": \"🇮🇲\",</li>\n<li>\"india\": \"🇮🇳\",</li>\n<li>\"british_indian_ocean_territory\": \"🇮🇴\",</li>\n<li>\"iraq\": \"🇮🇶\",</li>\n<li>\"iran\": \"🇮🇷\",</li>\n<li>\"iceland\": \"🇮🇸\",</li>\n<li>\"it\": \"🇮🇹\",</li>\n<li>\"jersey\": \"🇯🇪\",</li>\n<li>\"jamaica\": \"🇯🇲\",</li>\n<li>\"jordan\": \"🇯🇴\",</li>\n<li>\"jp\": \"🇯🇵\",</li>\n<li>\"kenya\": \"🇰🇪\",</li>\n<li>\"kyrgyzstan\": \"🇰🇬\",</li>\n<li>\"cambodia\": \"🇰🇭\",</li>\n<li>\"kiribati\": \"🇰🇮\",</li>\n<li>\"comoros\": \"🇰🇲\",</li>\n<li>\"st_kitts_nevis\": \"🇰🇳\",</li>\n<li>\"north_korea\": \"🇰🇵\",</li>\n<li>\"kr\": \"🇰🇷\",</li>\n<li>\"kuwait\": \"🇰🇼\",</li>\n<li>\"cayman_islands\": \"🇰🇾\",</li>\n<li>\"kazakhstan\": \"🇰🇿\",</li>\n<li>\"laos\": \"🇱🇦\",</li>\n<li>\"lebanon\": \"🇱🇧\",</li>\n<li>\"st_lucia\": \"🇱🇨\",</li>\n<li>\"liechtenstein\": \"🇱🇮\",</li>\n<li>\"sri_lanka\": \"🇱🇰\",</li>\n<li>\"liberia\": \"🇱🇷\",</li>\n<li>\"lesotho\": \"🇱🇸\",</li>\n<li>\"lithuania\": \"🇱🇹\",</li>\n<li>\"luxembourg\": \"🇱🇺\",</li>\n<li>\"latvia\": \"🇱🇻\",</li>\n<li>\"libya\": \"🇱🇾\",</li>\n<li>\"morocco\": \"🇲🇦\",</li>\n<li>\"monaco\": \"🇲🇨\",</li>\n<li>\"moldova\": \"🇲🇩\",</li>\n<li>\"montenegro\": \"🇲🇪\",</li>\n<li>\"st_martin\": \"🇲🇫\",</li>\n<li>\"madagascar\": \"🇲🇬\",</li>\n<li>\"marshall_islands\": \"🇲🇭\",</li>\n<li>\"macedonia\": \"🇲🇰\",</li>\n<li>\"mali\": \"🇲🇱\",</li>\n<li>\"myanmar\": \"🇲🇲\",</li>\n<li>\"mongolia\": \"🇲🇳\",</li>\n<li>\"macau\": \"🇲🇴\",</li>\n<li>\"northern_mariana_islands\": \"🇲🇵\",</li>\n<li>\"martinique\": \"🇲🇶\",</li>\n<li>\"mauritania\": \"🇲🇷\",</li>\n<li>\"montserrat\": \"🇲🇸\",</li>\n<li>\"malta\": \"🇲🇹\",</li>\n<li>\"mauritius\": \"🇲🇺\",</li>\n<li>\"maldives\": \"🇲🇻\",</li>\n<li>\"malawi\": \"🇲🇼\",</li>\n<li>\"mexico\": \"🇲🇽\",</li>\n<li>\"malaysia\": \"🇲🇾\",</li>\n<li>\"mozambique\": \"🇲🇿\",</li>\n<li>\"namibia\": \"🇳🇦\",</li>\n<li>\"new_caledonia\": \"🇳🇨\",</li>\n<li>\"niger\": \"🇳🇪\",</li>\n<li>\"norfolk_island\": \"🇳🇫\",</li>\n<li>\"nigeria\": \"🇳🇬\",</li>\n<li>\"nicaragua\": \"🇳🇮\",</li>\n<li>\"netherlands\": \"🇳🇱\",</li>\n<li>\"norway\": \"🇳🇴\",</li>\n<li>\"nepal\": \"🇳🇵\",</li>\n<li>\"nauru\": \"🇳🇷\",</li>\n<li>\"niue\": \"🇳🇺\",</li>\n<li>\"new_zealand\": \"🇳🇿\",</li>\n<li>\"oman\": \"🇴🇲\",</li>\n<li>\"panama\": \"🇵🇦\",</li>\n<li>\"peru\": \"🇵🇪\",</li>\n<li>\"french_polynesia\": \"🇵🇫\",</li>\n<li>\"papua_new_guinea\": \"🇵🇬\",</li>\n<li>\"philippines\": \"🇵🇭\",</li>\n<li>\"pakistan\": \"🇵🇰\",</li>\n<li>\"poland\": \"🇵🇱\",</li>\n<li>\"st_pierre_miquelon\": \"🇵🇲\",</li>\n<li>\"pitcairn_islands\": \"🇵🇳\",</li>\n<li>\"puerto_rico\": \"🇵🇷\",</li>\n<li>\"palestinian_territories\": \"🇵🇸\",</li>\n<li>\"portugal\": \"🇵🇹\",</li>\n<li>\"palau\": \"🇵🇼\",</li>\n<li>\"paraguay\": \"🇵🇾\",</li>\n<li>\"qatar\": \"🇶🇦\",</li>\n<li>\"reunion\": \"🇷🇪\",</li>\n<li>\"romania\": \"🇷🇴\",</li>\n<li>\"serbia\": \"🇷🇸\",</li>\n<li>\"ru\": \"🇷🇺\",</li>\n<li>\"rwanda\": \"🇷🇼\",</li>\n<li>\"saudi_arabia\": \"🇸🇦\",</li>\n<li>\"solomon_islands\": \"🇸🇧\",</li>\n<li>\"seychelles\": \"🇸🇨\",</li>\n<li>\"sudan\": \"🇸🇩\",</li>\n<li>\"sweden\": \"🇸🇪\",</li>\n<li>\"singapore\": \"🇸🇬\",</li>\n<li>\"st_helena\": \"🇸🇭\",</li>\n<li>\"slovenia\": \"🇸🇮\",</li>\n<li>\"svalbard_jan_mayen\": \"🇸🇯\",</li>\n<li>\"slovakia\": \"🇸🇰\",</li>\n<li>\"sierra_leone\": \"🇸🇱\",</li>\n<li>\"san_marino\": \"🇸🇲\",</li>\n<li>\"senegal\": \"🇸🇳\",</li>\n<li>\"somalia\": \"🇸🇴\",</li>\n<li>\"suriname\": \"🇸🇷\",</li>\n<li>\"south_sudan\": \"🇸🇸\",</li>\n<li>\"sao_tome_principe\": \"🇸🇹\",</li>\n<li>\"el_salvador\": \"🇸🇻\",</li>\n<li>\"sint_maarten\": \"🇸🇽\",</li>\n<li>\"syria\": \"🇸🇾\",</li>\n<li>\"swaziland\": \"🇸🇿\",</li>\n<li>\"tristan_da_cunha\": \"🇹🇦\",</li>\n<li>\"turks_caicos_islands\": \"🇹🇨\",</li>\n<li>\"chad\": \"🇹🇩\",</li>\n<li>\"french_southern_territories\": \"🇹🇫\",</li>\n<li>\"togo\": \"🇹🇬\",</li>\n<li>\"thailand\": \"🇹🇭\",</li>\n<li>\"tajikistan\": \"🇹🇯\",</li>\n<li>\"tokelau\": \"🇹🇰\",</li>\n<li>\"timor_leste\": \"🇹🇱\",</li>\n<li>\"turkmenistan\": \"🇹🇲\",</li>\n<li>\"tunisia\": \"🇹🇳\",</li>\n<li>\"tonga\": \"🇹🇴\",</li>\n<li>\"tr\": \"🇹🇷\",</li>\n<li>\"trinidad_tobago\": \"🇹🇹\",</li>\n<li>\"tuvalu\": \"🇹🇻\",</li>\n<li>\"taiwan\": \"🇹🇼\",</li>\n<li>\"tanzania\": \"🇹🇿\",</li>\n<li>\"ukraine\": \"🇺🇦\",</li>\n<li>\"uganda\": \"🇺🇬\",</li>\n<li>\"us_outlying_islands\": \"🇺🇲\",</li>\n<li>\"united_nations\": \"🇺🇳\",</li>\n<li>\"us\": \"🇺🇸\",</li>\n<li>\"uruguay\": \"🇺🇾\",</li>\n<li>\"uzbekistan\": \"🇺🇿\",</li>\n<li>\"vatican_city\": \"🇻🇦\",</li>\n<li>\"st_vincent_grenadines\": \"🇻🇨\",</li>\n<li>\"venezuela\": \"🇻🇪\",</li>\n<li>\"british_virgin_islands\": \"🇻🇬\",</li>\n<li>\"us_virgin_islands\": \"🇻🇮\",</li>\n<li>\"vietnam\": \"🇻🇳\",</li>\n<li>\"vanuatu\": \"🇻🇺\",</li>\n<li>\"wallis_futuna\": \"🇼🇫\",</li>\n<li>\"samoa\": \"🇼🇸\",</li>\n<li>\"kosovo\": \"🇽🇰\",</li>\n<li>\"yemen\": \"🇾🇪\",</li>\n<li>\"mayotte\": \"🇾🇹\",</li>\n<li>\"south_africa\": \"🇿🇦\",</li>\n<li>\"zambia\": \"🇿🇲\",</li>\n<li>\"zimbabwe\": \"🇿🇼\",</li>\n<li>\"england\": \"🏴󠁧󠁢󠁥󠁮󠁧󠁿\",</li>\n<li>\"scotland\": \"🏴󠁧󠁢󠁳󠁣󠁴󠁿\",</li>\n<li>\"wales\": \"🏴󠁧󠁢󠁷󠁬󠁳󠁿\"</li>\n</ul>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "自然 Emoji",
      "url": "https://blog.yzketx.online/tip/markdown/emoji/nature.html",
      "id": "https://blog.yzketx.online/tip/markdown/emoji/nature.html",
      "summary": "☀️ :sunny: ☔ :umbrella: ☁️ :cloud: ❄️ :snowflake: ⛄ :snowman: ⚡ :zap: 🌀 :cyclone: 🌁 :foggy: 🌊 :ocean: 🐱 :cat: 🐶 :dog: 🐭 :mouse: 🐹 :hamster: 🐰 :rabbit: 🐺 :wolf: 🐸 :frog: 🐯 :tiger: 🐨 :koala: 🐻 :bear: 🐷 :pig: 🐽 :pig_nose: 🐮 :cow: 🐗 :boar: 🐵 :monkey_face: 🐒 :monkey: 🐴 :horse: 🐎 :racehorse: 🐫 :camel: 🐑 :sheep: 🐘 :elephant: 🐼 :panda_face: 🐍 :snake: 🐦 :bird: 🐤 :baby_chick: 🐥 :hatched_chick: 🐣 :hatching_chick: 🐔 :chicken: 🐧 :penguin: 🐢 :turtle: 🐛 :bug: 🐝 :honeybee: 🐜 :ant: 🪲 :beetle: 🐌 :snail: 🐙 :octopus: 🐠 :tropical_fish: 🐟 :fish: 🐳 :whale: 🐋 :whale2: 🐬 :dolphin: 🐄 :cow2: 🐏 :ram: 🐀 :rat: 🐃 :water_buffalo: 🐅 :tiger2: 🐇 :rabbit2: 🐉 :dragon: 🐐 :goat: 🐓 :rooster: 🐕 :dog2: 🐖 :pig2: 🐁 :mouse2: 🐂 :ox: 🐲 :dragon_face: 🐡 :blowfish: 🐊 :crocodile: 🐪 :dromedary_camel: 🐆 :leopard: 🐈 :cat2: 🐩 :poodle: 🐾 :paw_prints: 💐 :bouquet: 🌸 :cherry_blossom: 🌷 :tulip: 🍀 :four_leaf_clover: 🌹 :rose: 🌻 :sunflower: 🌺 :hibiscus: 🍁 :maple_leaf: 🍃 :leaves: 🍂 :fallen_leaf: 🌿 :herb: 🍄 :mushroom: 🌵 :cactus: 🌴 :palm_tree: 🌲 :evergreen_tree: 🌳 :deciduous_tree: 🌰 :chestnut: 🌱 :seedling: 🌼 :blossom: 🌾 :ear_of_rice: 🐚 :shell: 🌐 :globe_with_meridians: 🌞 :sun_with_face: 🌝 :full_moon_with_face: 🌚 :new_moon_with_face: 🌑 :new_moon: 🌒 :waxing_crescent_moon: 🌓 :first_quarter_moon: 🌔 :waxing_gibbous_moon: 🌕 :full_moon: 🌖 :waning_gibbous_moon: 🌗 :last_quarter_moon: 🌘 :waning_crescent_moon: 🌜 :last_quarter_moon_with_face: 🌛 :first_quarter_moon_with_face: 🌙 :crescent_moon: 🌍 :earth_africa: 🌎 :earth_americas: 🌏 :earth_asia: 🌋 :volcano: 🌌 :milky_way: ⛅ :partly_sunny:",
      "content_html": "<ul>\n<li>☀️ <code>:sunny:</code></li>\n<li>☔ <code>:umbrella:</code></li>\n<li>☁️ <code>:cloud:</code></li>\n<li>❄️ <code>:snowflake:</code></li>\n<li>⛄ <code>:snowman:</code></li>\n<li>⚡ <code>:zap:</code></li>\n<li>🌀 <code>:cyclone:</code></li>\n<li>🌁 <code>:foggy:</code></li>\n<li>🌊 <code>:ocean:</code></li>\n<li>🐱 <code>:cat:</code></li>\n<li>🐶 <code>:dog:</code></li>\n<li>🐭 <code>:mouse:</code></li>\n<li>🐹 <code>:hamster:</code></li>\n<li>🐰 <code>:rabbit:</code></li>\n<li>🐺 <code>:wolf:</code></li>\n<li>🐸 <code>:frog:</code></li>\n<li>🐯 <code>:tiger:</code></li>\n<li>🐨 <code>:koala:</code></li>\n<li>🐻 <code>:bear:</code></li>\n<li>🐷 <code>:pig:</code></li>\n<li>🐽 <code>:pig_nose:</code></li>\n<li>🐮 <code>:cow:</code></li>\n<li>🐗 <code>:boar:</code></li>\n<li>🐵 <code>:monkey_face:</code></li>\n<li>🐒 <code>:monkey:</code></li>\n<li>🐴 <code>:horse:</code></li>\n<li>🐎 <code>:racehorse:</code></li>\n<li>🐫 <code>:camel:</code></li>\n<li>🐑 <code>:sheep:</code></li>\n<li>🐘 <code>:elephant:</code></li>\n<li>🐼 <code>:panda_face:</code></li>\n<li>🐍 <code>:snake:</code></li>\n<li>🐦 <code>:bird:</code></li>\n<li>🐤 <code>:baby_chick:</code></li>\n<li>🐥 <code>:hatched_chick:</code></li>\n<li>🐣 <code>:hatching_chick:</code></li>\n<li>🐔 <code>:chicken:</code></li>\n<li>🐧 <code>:penguin:</code></li>\n<li>🐢 <code>:turtle:</code></li>\n<li>🐛 <code>:bug:</code></li>\n<li>🐝 <code>:honeybee:</code></li>\n<li>🐜 <code>:ant:</code></li>\n<li>🪲 <code>:beetle:</code></li>\n<li>🐌 <code>:snail:</code></li>\n<li>🐙 <code>:octopus:</code></li>\n<li>🐠 <code>:tropical_fish:</code></li>\n<li>🐟 <code>:fish:</code></li>\n<li>🐳 <code>:whale:</code></li>\n<li>🐋 <code>:whale2:</code></li>\n<li>🐬 <code>:dolphin:</code></li>\n<li>🐄 <code>:cow2:</code></li>\n<li>🐏 <code>:ram:</code></li>\n<li>🐀 <code>:rat:</code></li>\n<li>🐃 <code>:water_buffalo:</code></li>\n<li>🐅 <code>:tiger2:</code></li>\n<li>🐇 <code>:rabbit2:</code></li>\n<li>🐉 <code>:dragon:</code></li>\n<li>🐐 <code>:goat:</code></li>\n<li>🐓 <code>:rooster:</code></li>\n<li>🐕 <code>:dog2:</code></li>\n<li>🐖 <code>:pig2:</code></li>\n<li>🐁 <code>:mouse2:</code></li>\n<li>🐂 <code>:ox:</code></li>\n<li>🐲 <code>:dragon_face:</code></li>\n<li>🐡 <code>:blowfish:</code></li>\n<li>🐊 <code>:crocodile:</code></li>\n<li>🐪 <code>:dromedary_camel:</code></li>\n<li>🐆 <code>:leopard:</code></li>\n<li>🐈 <code>:cat2:</code></li>\n<li>🐩 <code>:poodle:</code></li>\n<li>🐾 <code>:paw_prints:</code></li>\n<li>💐 <code>:bouquet:</code></li>\n<li>🌸 <code>:cherry_blossom:</code></li>\n<li>🌷 <code>:tulip:</code></li>\n<li>🍀 <code>:four_leaf_clover:</code></li>\n<li>🌹 <code>:rose:</code></li>\n<li>🌻 <code>:sunflower:</code></li>\n<li>🌺 <code>:hibiscus:</code></li>\n<li>🍁 <code>:maple_leaf:</code></li>\n<li>🍃 <code>:leaves:</code></li>\n<li>🍂 <code>:fallen_leaf:</code></li>\n<li>🌿 <code>:herb:</code></li>\n<li>🍄 <code>:mushroom:</code></li>\n<li>🌵 <code>:cactus:</code></li>\n<li>🌴 <code>:palm_tree:</code></li>\n<li>🌲 <code>:evergreen_tree:</code></li>\n<li>🌳 <code>:deciduous_tree:</code></li>\n<li>🌰 <code>:chestnut:</code></li>\n<li>🌱 <code>:seedling:</code></li>\n<li>🌼 <code>:blossom:</code></li>\n<li>🌾 <code>:ear_of_rice:</code></li>\n<li>🐚 <code>:shell:</code></li>\n<li>🌐 <code>:globe_with_meridians:</code></li>\n<li>🌞 <code>:sun_with_face:</code></li>\n<li>🌝 <code>:full_moon_with_face:</code></li>\n<li>🌚 <code>:new_moon_with_face:</code></li>\n<li>🌑 <code>:new_moon:</code></li>\n<li>🌒 <code>:waxing_crescent_moon:</code></li>\n<li>🌓 <code>:first_quarter_moon:</code></li>\n<li>🌔 <code>:waxing_gibbous_moon:</code></li>\n<li>🌕 <code>:full_moon:</code></li>\n<li>🌖 <code>:waning_gibbous_moon:</code></li>\n<li>🌗 <code>:last_quarter_moon:</code></li>\n<li>🌘 <code>:waning_crescent_moon:</code></li>\n<li>🌜 <code>:last_quarter_moon_with_face:</code></li>\n<li>🌛 <code>:first_quarter_moon_with_face:</code></li>\n<li>🌙 <code>:crescent_moon:</code></li>\n<li>🌍 <code>:earth_africa:</code></li>\n<li>🌎 <code>:earth_americas:</code></li>\n<li>🌏 <code>:earth_asia:</code></li>\n<li>🌋 <code>:volcano:</code></li>\n<li>🌌 <code>:milky_way:</code></li>\n<li>⛅ <code>:partly_sunny:</code></li>\n</ul>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "对象 Emoji",
      "url": "https://blog.yzketx.online/tip/markdown/emoji/object.html",
      "id": "https://blog.yzketx.online/tip/markdown/emoji/object.html",
      "summary": "🎍 :bamboo: 💝 :gift_heart: 🎎 :dolls: 🎒 :school_satchel: 🎓 :mortar_board: 🎏 :flags: 🎆 :fireworks: 🎇 :sparkler: 🎐 :wind_chime: 🎑 :rice_scene: 🎃 :jack_o_lantern: 👻 :ghost: 🎅 :santa: 🎄 :christmas_tree: 🎁 :gift: 🔔 :bell: 🔕 :no_bell: 🎋 :tanabata_tree: 🎉 :tada: 🎊 :confetti_ball: 🎈 :balloon: 🔮 :crystal_ball: 💿 :cd: 📀 :dvd: 💾 :floppy_disk: 📷 :camera: 📹 :video_camera: 🎥 :movie_camera: 💻 :computer: 📺 :tv: 📱 :iphone: ☎️ :phone: ☎️ :telephone: 📞 :telephone_receiver: 📟 :pager: 📠 :fax: 💽 :minidisc: 📼 :vhs: 🔉 :sound: 🔈 :speaker: 🔇 :mute: 📢 :loudspeaker: 📣 :mega: ⌛ :hourglass: ⏳ :hourglass_flowing_sand: ⏰ :alarm_clock: ⌚ :watch: 📻 :radio: 📡 :satellite: ➿ :loop: 🔍 :mag: 🔎 :mag_right: 🔓 :unlock: 🔒 :lock: 🔏 :lock_with_ink_pen: 🔐 :closed_lock_with_key: 🔑 :key: 💡 :bulb: 🔦 :flashlight: 🔆 :high_brightness: 🔅 :low_brightness: 🔌 :electric_plug: 🔋 :battery: 📲 :calling: 📧 :email: 📫 :mailbox: 📮 :postbox: 🛀 :bath: 🛁 :bathtub: 🚿 :shower: 🚽 :toilet: 🔧 :wrench: 🔩 :nut_and_bolt: 🔨 :hammer: 💺 :seat: 💰 :moneybag: 💴 :yen: 💵 :dollar: 💷 :pound: 💶 :euro: 💳 :credit_card: 💸 :money_with_wings: 📧 :e-mail: 📥 :inbox_tray: 📤 :outbox_tray: ✉️ :envelope: 📨 :incoming_envelope: 📯 :postal_horn: 📪 :mailbox_closed: 📬 :mailbox_with_mail: 📭 :mailbox_with_no_mail: 📦 :package: 🚪 :door: 🚬 :smoking: 💣 :bomb: 🔫 :gun: 🔪 :hocho: 💊 :pill: 💉 :syringe: 📄 :page_facing_up: 📃 :page_with_curl: 📑 :bookmark_tabs: 📊 :bar_chart: 📈 :chart_with_upwards_trend: 📉 :chart_with_downwards_trend: 📜 :scroll: 📋 :clipboard: 📆 :calendar: 📅 :date: 📇 :card_index: 📁 :file_folder: 📂 :open_file_folder: ✂️ :scissors: 📌 :pushpin: 📎 :paperclip: ✒️ :black_nib: ✏️ :pencil2: 📏 :straight_ruler: 📐 :triangular_ruler: 📕 :closed_book: 📗 :green_book: 📘 :blue_book: 📙 :orange_book: 📓 :notebook: 📔 :notebook_with_decorative_cover: 📒 :ledger: 📚 :books: 🔖 :bookmark: 📛 :name_badge: 🔬 :microscope: 🔭 :telescope: 📰 :newspaper: 🏈 :football: 🏀 :basketball: ⚽ :soccer: ⚾ :baseball: 🎾 :tennis: 🎱 :8ball: 🏉 :rugby_football: 🎳 :bowling: ⛳ :golf: 🚵 :mountain_bicyclist: 🚴 :bicyclist: 🏇 :horse_racing: 🏂 :snowboarder: 🏊 :swimmer: 🏄 :surfer: 🎿 :ski: ♠️ :spades: ♥️ :hearts: ♣️ :clubs: ♦️ :diamonds: 💎 :gem: 💍 :ring: 🏆 :trophy: 🎼 :musical_score: 🎹 :musical_keyboard: 🎻 :violin: 👾 :space_invader: 🎮 :video_game: 🃏 :black_joker: 🎴 :flower_playing_cards: 🎲 :game_die: 🎯 :dart: 🀄 :mahjong: 🎬 :clapper: 📝 :memo: 📝 :pencil: 📖 :book: 🎨 :art: 🎤 :microphone: 🎧 :headphones: 🎺 :trumpet: 🎷 :saxophone: 🎸 :guitar: 👞 :shoe: 👡 :sandal: 👠 :high_heel: 💄 :lipstick: 👢 :boot: 👕 :shirt: 👕 :tshirt: 👔 :necktie: 👚 :womans_clothes: 👗 :dress: 🎽 :running_shirt_with_sash: 👖 :jeans: 👘 :kimono: 👙 :bikini: 🎀 :ribbon: 🎩 :tophat: 👑 :crown: 👒 :womans_hat: 👞 :mans_shoe: 🌂 :closed_umbrella: 💼 :briefcase: 👜 :handbag: 👝 :pouch: 👛 :purse: 👓 :eyeglasses: 🎣 :fishing_pole_and_fish: ☕ :coffee: 🍵 :tea: 🍶 :sake: 🍼 :baby_bottle: 🍺 :beer: 🍻 :beers: 🍸 :cocktail: 🍹 :tropical_drink: 🍷 :wine_glass: 🍴 :fork_and_knife: 🍕 :pizza: 🍔 :hamburger: 🍟 :fries: 🍗 :poultry_leg: 🍖 :meat_on_bone: 🍝 :spaghetti: 🍛 :curry: 🍤 :fried_shrimp: 🍱 :bento: 🍣 :sushi: 🍥 :fish_cake: 🍙 :rice_ball: 🍘 :rice_cracker: 🍚 :rice: 🍜 :ramen: 🍲 :stew: 🍢 :oden: 🍡 :dango: 🥚 :egg: 🍞 :bread: 🍩 :doughnut: 🍮 :custard: 🍦 :icecream: 🍨 :ice_cream: 🍧 :shaved_ice: 🎂 :birthday: 🍰 :cake: 🍪 :cookie: 🍫 :chocolate_bar: 🍬 :candy: 🍭 :lollipop: 🍯 :honey_pot: 🍎 :apple: 🍏 :green_apple: 🍊 :tangerine: 🍋 :lemon: 🍒 :cherries: 🍇 :grapes: 🍉 :watermelon: 🍓 :strawberry: 🍑 :peach: 🍈 :melon: 🍌 :banana: 🍐 :pear: 🍍 :pineapple: 🍠 :sweet_potato: 🍆 :eggplant: 🍅 :tomato: 🌽 :corn:",
      "content_html": "<ul>\n<li>🎍 <code>:bamboo:</code></li>\n<li>💝 <code>:gift_heart:</code></li>\n<li>🎎 <code>:dolls:</code></li>\n<li>🎒 <code>:school_satchel:</code></li>\n<li>🎓 <code>:mortar_board:</code></li>\n<li>🎏 <code>:flags:</code></li>\n<li>🎆 <code>:fireworks:</code></li>\n<li>🎇 <code>:sparkler:</code></li>\n<li>🎐 <code>:wind_chime:</code></li>\n<li>🎑 <code>:rice_scene:</code></li>\n<li>🎃 <code>:jack_o_lantern:</code></li>\n<li>👻 <code>:ghost:</code></li>\n<li>🎅 <code>:santa:</code></li>\n<li>🎄 <code>:christmas_tree:</code></li>\n<li>🎁 <code>:gift:</code></li>\n<li>🔔 <code>:bell:</code></li>\n<li>🔕 <code>:no_bell:</code></li>\n<li>🎋 <code>:tanabata_tree:</code></li>\n<li>🎉 <code>:tada:</code></li>\n<li>🎊 <code>:confetti_ball:</code></li>\n<li>🎈 <code>:balloon:</code></li>\n<li>🔮 <code>:crystal_ball:</code></li>\n<li>💿 <code>:cd:</code></li>\n<li>📀 <code>:dvd:</code></li>\n<li>💾 <code>:floppy_disk:</code></li>\n<li>📷 <code>:camera:</code></li>\n<li>📹 <code>:video_camera:</code></li>\n<li>🎥 <code>:movie_camera:</code></li>\n<li>💻 <code>:computer:</code></li>\n<li>📺 <code>:tv:</code></li>\n<li>📱 <code>:iphone:</code></li>\n<li>☎️ <code>:phone:</code></li>\n<li>☎️ <code>:telephone:</code></li>\n<li>📞 <code>:telephone_receiver:</code></li>\n<li>📟 <code>:pager:</code></li>\n<li>📠 <code>:fax:</code></li>\n<li>💽 <code>:minidisc:</code></li>\n<li>📼 <code>:vhs:</code></li>\n<li>🔉 <code>:sound:</code></li>\n<li>🔈 <code>:speaker:</code></li>\n<li>🔇 <code>:mute:</code></li>\n<li>📢 <code>:loudspeaker:</code></li>\n<li>📣 <code>:mega:</code></li>\n<li>⌛ <code>:hourglass:</code></li>\n<li>⏳ <code>:hourglass_flowing_sand:</code></li>\n<li>⏰ <code>:alarm_clock:</code></li>\n<li>⌚ <code>:watch:</code></li>\n<li>📻 <code>:radio:</code></li>\n<li>📡 <code>:satellite:</code></li>\n<li>➿ <code>:loop:</code></li>\n<li>🔍 <code>:mag:</code></li>\n<li>🔎 <code>:mag_right:</code></li>\n<li>🔓 <code>:unlock:</code></li>\n<li>🔒 <code>:lock:</code></li>\n<li>🔏 <code>:lock_with_ink_pen:</code></li>\n<li>🔐 <code>:closed_lock_with_key:</code></li>\n<li>🔑 <code>:key:</code></li>\n<li>💡 <code>:bulb:</code></li>\n<li>🔦 <code>:flashlight:</code></li>\n<li>🔆 <code>:high_brightness:</code></li>\n<li>🔅 <code>:low_brightness:</code></li>\n<li>🔌 <code>:electric_plug:</code></li>\n<li>🔋 <code>:battery:</code></li>\n<li>📲 <code>:calling:</code></li>\n<li>📧 <code>:email:</code></li>\n<li>📫 <code>:mailbox:</code></li>\n<li>📮 <code>:postbox:</code></li>\n<li>🛀 <code>:bath:</code></li>\n<li>🛁 <code>:bathtub:</code></li>\n<li>🚿 <code>:shower:</code></li>\n<li>🚽 <code>:toilet:</code></li>\n<li>🔧 <code>:wrench:</code></li>\n<li>🔩 <code>:nut_and_bolt:</code></li>\n<li>🔨 <code>:hammer:</code></li>\n<li>💺 <code>:seat:</code></li>\n<li>💰 <code>:moneybag:</code></li>\n<li>💴 <code>:yen:</code></li>\n<li>💵 <code>:dollar:</code></li>\n<li>💷 <code>:pound:</code></li>\n<li>💶 <code>:euro:</code></li>\n<li>💳 <code>:credit_card:</code></li>\n<li>💸 <code>:money_with_wings:</code></li>\n<li>📧 <code>:e-mail:</code></li>\n<li>📥 <code>:inbox_tray:</code></li>\n<li>📤 <code>:outbox_tray:</code></li>\n<li>✉️ <code>:envelope:</code></li>\n<li>📨 <code>:incoming_envelope:</code></li>\n<li>📯 <code>:postal_horn:</code></li>\n<li>📪 <code>:mailbox_closed:</code></li>\n<li>📬 <code>:mailbox_with_mail:</code></li>\n<li>📭 <code>:mailbox_with_no_mail:</code></li>\n<li>📦 <code>:package:</code></li>\n<li>🚪 <code>:door:</code></li>\n<li>🚬 <code>:smoking:</code></li>\n<li>💣 <code>:bomb:</code></li>\n<li>🔫 <code>:gun:</code></li>\n<li>🔪 <code>:hocho:</code></li>\n<li>💊 <code>:pill:</code></li>\n<li>💉 <code>:syringe:</code></li>\n<li>📄 <code>:page_facing_up:</code></li>\n<li>📃 <code>:page_with_curl:</code></li>\n<li>📑 <code>:bookmark_tabs:</code></li>\n<li>📊 <code>:bar_chart:</code></li>\n<li>📈 <code>:chart_with_upwards_trend:</code></li>\n<li>📉 <code>:chart_with_downwards_trend:</code></li>\n<li>📜 <code>:scroll:</code></li>\n<li>📋 <code>:clipboard:</code></li>\n<li>📆 <code>:calendar:</code></li>\n<li>📅 <code>:date:</code></li>\n<li>📇 <code>:card_index:</code></li>\n<li>📁 <code>:file_folder:</code></li>\n<li>📂 <code>:open_file_folder:</code></li>\n<li>✂️ <code>:scissors:</code></li>\n<li>📌 <code>:pushpin:</code></li>\n<li>📎 <code>:paperclip:</code></li>\n<li>✒️ <code>:black_nib:</code></li>\n<li>✏️ <code>:pencil2:</code></li>\n<li>📏 <code>:straight_ruler:</code></li>\n<li>📐 <code>:triangular_ruler:</code></li>\n<li>📕 <code>:closed_book:</code></li>\n<li>📗 <code>:green_book:</code></li>\n<li>📘 <code>:blue_book:</code></li>\n<li>📙 <code>:orange_book:</code></li>\n<li>📓 <code>:notebook:</code></li>\n<li>📔 <code>:notebook_with_decorative_cover:</code></li>\n<li>📒 <code>:ledger:</code></li>\n<li>📚 <code>:books:</code></li>\n<li>🔖 <code>:bookmark:</code></li>\n<li>📛 <code>:name_badge:</code></li>\n<li>🔬 <code>:microscope:</code></li>\n<li>🔭 <code>:telescope:</code></li>\n<li>📰 <code>:newspaper:</code></li>\n<li>🏈 <code>:football:</code></li>\n<li>🏀 <code>:basketball:</code></li>\n<li>⚽ <code>:soccer:</code></li>\n<li>⚾ <code>:baseball:</code></li>\n<li>🎾 <code>:tennis:</code></li>\n<li>🎱 <code>:8ball:</code></li>\n<li>🏉 <code>:rugby_football:</code></li>\n<li>🎳 <code>:bowling:</code></li>\n<li>⛳ <code>:golf:</code></li>\n<li>🚵 <code>:mountain_bicyclist:</code></li>\n<li>🚴 <code>:bicyclist:</code></li>\n<li>🏇 <code>:horse_racing:</code></li>\n<li>🏂 <code>:snowboarder:</code></li>\n<li>🏊 <code>:swimmer:</code></li>\n<li>🏄 <code>:surfer:</code></li>\n<li>🎿 <code>:ski:</code></li>\n<li>♠️ <code>:spades:</code></li>\n<li>♥️ <code>:hearts:</code></li>\n<li>♣️ <code>:clubs:</code></li>\n<li>♦️ <code>:diamonds:</code></li>\n<li>💎 <code>:gem:</code></li>\n<li>💍 <code>:ring:</code></li>\n<li>🏆 <code>:trophy:</code></li>\n<li>🎼 <code>:musical_score:</code></li>\n<li>🎹 <code>:musical_keyboard:</code></li>\n<li>🎻 <code>:violin:</code></li>\n<li>👾 <code>:space_invader:</code></li>\n<li>🎮 <code>:video_game:</code></li>\n<li>🃏 <code>:black_joker:</code></li>\n<li>🎴 <code>:flower_playing_cards:</code></li>\n<li>🎲 <code>:game_die:</code></li>\n<li>🎯 <code>:dart:</code></li>\n<li>🀄 <code>:mahjong:</code></li>\n<li>🎬 <code>:clapper:</code></li>\n<li>📝 <code>:memo:</code></li>\n<li>📝 <code>:pencil:</code></li>\n<li>📖 <code>:book:</code></li>\n<li>🎨 <code>:art:</code></li>\n<li>🎤 <code>:microphone:</code></li>\n<li>🎧 <code>:headphones:</code></li>\n<li>🎺 <code>:trumpet:</code></li>\n<li>🎷 <code>:saxophone:</code></li>\n<li>🎸 <code>:guitar:</code></li>\n<li>👞 <code>:shoe:</code></li>\n<li>👡 <code>:sandal:</code></li>\n<li>👠 <code>:high_heel:</code></li>\n<li>💄 <code>:lipstick:</code></li>\n<li>👢 <code>:boot:</code></li>\n<li>👕 <code>:shirt:</code></li>\n<li>👕 <code>:tshirt:</code></li>\n<li>👔 <code>:necktie:</code></li>\n<li>👚 <code>:womans_clothes:</code></li>\n<li>👗 <code>:dress:</code></li>\n<li>🎽 <code>:running_shirt_with_sash:</code></li>\n<li>👖 <code>:jeans:</code></li>\n<li>👘 <code>:kimono:</code></li>\n<li>👙 <code>:bikini:</code></li>\n<li>🎀 <code>:ribbon:</code></li>\n<li>🎩 <code>:tophat:</code></li>\n<li>👑 <code>:crown:</code></li>\n<li>👒 <code>:womans_hat:</code></li>\n<li>👞 <code>:mans_shoe:</code></li>\n<li>🌂 <code>:closed_umbrella:</code></li>\n<li>💼 <code>:briefcase:</code></li>\n<li>👜 <code>:handbag:</code></li>\n<li>👝 <code>:pouch:</code></li>\n<li>👛 <code>:purse:</code></li>\n<li>👓 <code>:eyeglasses:</code></li>\n<li>🎣 <code>:fishing_pole_and_fish:</code></li>\n<li>☕ <code>:coffee:</code></li>\n<li>🍵 <code>:tea:</code></li>\n<li>🍶 <code>:sake:</code></li>\n<li>🍼 <code>:baby_bottle:</code></li>\n<li>🍺 <code>:beer:</code></li>\n<li>🍻 <code>:beers:</code></li>\n<li>🍸 <code>:cocktail:</code></li>\n<li>🍹 <code>:tropical_drink:</code></li>\n<li>🍷 <code>:wine_glass:</code></li>\n<li>🍴 <code>:fork_and_knife:</code></li>\n<li>🍕 <code>:pizza:</code></li>\n<li>🍔 <code>:hamburger:</code></li>\n<li>🍟 <code>:fries:</code></li>\n<li>🍗 <code>:poultry_leg:</code></li>\n<li>🍖 <code>:meat_on_bone:</code></li>\n<li>🍝 <code>:spaghetti:</code></li>\n<li>🍛 <code>:curry:</code></li>\n<li>🍤 <code>:fried_shrimp:</code></li>\n<li>🍱 <code>:bento:</code></li>\n<li>🍣 <code>:sushi:</code></li>\n<li>🍥 <code>:fish_cake:</code></li>\n<li>🍙 <code>:rice_ball:</code></li>\n<li>🍘 <code>:rice_cracker:</code></li>\n<li>🍚 <code>:rice:</code></li>\n<li>🍜 <code>:ramen:</code></li>\n<li>🍲 <code>:stew:</code></li>\n<li>🍢 <code>:oden:</code></li>\n<li>🍡 <code>:dango:</code></li>\n<li>🥚 <code>:egg:</code></li>\n<li>🍞 <code>:bread:</code></li>\n<li>🍩 <code>:doughnut:</code></li>\n<li>🍮 <code>:custard:</code></li>\n<li>🍦 <code>:icecream:</code></li>\n<li>🍨 <code>:ice_cream:</code></li>\n<li>🍧 <code>:shaved_ice:</code></li>\n<li>🎂 <code>:birthday:</code></li>\n<li>🍰 <code>:cake:</code></li>\n<li>🍪 <code>:cookie:</code></li>\n<li>🍫 <code>:chocolate_bar:</code></li>\n<li>🍬 <code>:candy:</code></li>\n<li>🍭 <code>:lollipop:</code></li>\n<li>🍯 <code>:honey_pot:</code></li>\n<li>🍎 <code>:apple:</code></li>\n<li>🍏 <code>:green_apple:</code></li>\n<li>🍊 <code>:tangerine:</code></li>\n<li>🍋 <code>:lemon:</code></li>\n<li>🍒 <code>:cherries:</code></li>\n<li>🍇 <code>:grapes:</code></li>\n<li>🍉 <code>:watermelon:</code></li>\n<li>🍓 <code>:strawberry:</code></li>\n<li>🍑 <code>:peach:</code></li>\n<li>🍈 <code>:melon:</code></li>\n<li>🍌 <code>:banana:</code></li>\n<li>🍐 <code>:pear:</code></li>\n<li>🍍 <code>:pineapple:</code></li>\n<li>🍠 <code>:sweet_potato:</code></li>\n<li>🍆 <code>:eggplant:</code></li>\n<li>🍅 <code>:tomato:</code></li>\n<li>🌽 <code>:corn:</code></li>\n</ul>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "人物 Emoji",
      "url": "https://blog.yzketx.online/tip/markdown/emoji/people.html",
      "id": "https://blog.yzketx.online/tip/markdown/emoji/people.html",
      "summary": "😄 :smile: 😆 :laughing: 😊 :blush: 😃 :smiley: 😏 :smirk: 😍 :heart_eyes: 😘 :kissing_heart: 😚 :kissing_closed_eyes: 😳 :flushed: 😌 :relieved: 😆 :satisfied: 😁 :grin: 😉 :wink: 😜 :stuck_out_tongue_winking_eye: 😝 :stuck_out_tongue_closed_eyes: 😀 :grinning: 😗 :kissing: 😙 :kissing_smiling_eyes: 😛 :stuck_out_tongue: 😴 :sleeping: 😟 :worried: 😦 :frowning: 😧 :anguished: 😮 :open_mouth: 😬 :grimacing: 😕 :confused: 😯 :hushed: 😑 :expressionless: 😒 :unamused: 😅 :sweat_smile: 😓 :sweat: 😥 :disappointed_relieved: 😩 :weary: 😔 :pensive: 😞 :disappointed: 😖 :confounded: 😨 :fearful: 😰 :cold_sweat: 😣 :persevere: 😢 :cry: 😭 :sob: 😂 :joy: 😲 :astonished: 😱 :scream: 😫 :tired_face: 😠 :angry: 😡 :rage: 😤 :triumph: 😪 :sleepy: 😋 :yum: 😷 :mask: 😎 :sunglasses: 😵 :dizzy_face: 👿 :imp: 😈 :smiling_imp: 😐 :neutral_face: 😶 :no_mouth: 😇 :innocent: 👽 :alien: 💛 :yellow_heart: 💙 :blue_heart: 💜 :purple_heart: ❤️ :heart: 💚 :green_heart: 💔 :broken_heart: 💓 :heartbeat: 💗 :heartpulse: 💕 :two_hearts: 💞 :revolving_hearts: 💘 :cupid: 💖 :sparkling_heart: ✨ :sparkles: ⭐ :star: 🌟 :star2: 💫 :dizzy: 💥 :boom: 💥 :collision: 💢 :anger: ❗ :exclamation: ❓ :question: ❕ :grey_exclamation: ❔ :grey_question: 💤 :zzz: 💨 :dash: 💦 :sweat_drops: 🎶 :notes: 🎵 :musical_note: 🔥 :fire: 💩 :hankey: 💩 :poop: 💩 :shit: 👍 :+1: 👍 :thumbsup: 👎 :-1: 👎 :thumbsdown: 👌 :ok_hand: 👊 :punch: 👊 :facepunch: ✊ :fist: ✌️ :v: 👋 :wave: ✋ :hand: ✋ :raised_hand: 👐 :open_hands: ☝️ :point_up: 👇 :point_down: 👈 :point_left: 👉 :point_right: 🙌 :raised_hands: 🙏 :pray: 👆 :point_up_2: 👏 :clap: 💪 :muscle: 🤘 :metal: 🖕 :fu: 🏃 :runner: 🏃 :running: 👫 :couple: 👪 :family: 👬 :two_men_holding_hands: 👭 :two_women_holding_hands: 💃 :dancer: 👯 :dancers: 🙆‍♀️ :ok_woman: 🙅 :no_good: 💁 :information_desk_person: 🙋 :raising_hand: 👰‍♀️ :bride_with_veil: :person_with_pouting_face: :person_with_pouting_face: :person_frowning: :person_frowning: 🙇 :bow: 💑 :couple_with_heart: 💆 :massage: 💇 :haircut: 💅 :nail_care: 👦 :boy: 👧 :girl: 👩 :woman: 👨 :man: 👶 :baby: 👵 :older_woman: 👴 :older_man: :person_with_blond_hair: :person_with_blond_hair: 👲 :man_with_gua_pi_mao: 👳‍♂️ :man_with_turban: 👷 :construction_worker: 👮 :cop: 👼 :angel: 👸 :princess: 😺 :smiley_cat: 😸 :smile_cat: 😻 :heart_eyes_cat: 😽 :kissing_cat: 😼 :smirk_cat: 🙀 :scream_cat: 😿 :crying_cat_face: 😹 :joy_cat: 😾 :pouting_cat: 👹 :japanese_ogre: 👺 :japanese_goblin: 🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil: 💂‍♂️ :guardsman: 💀 :skull: 🐾 :feet: 👄 :lips: 💋 :kiss: 💧 :droplet: 👂 :ear: 👀 :eyes: 👃 :nose: 👅 :tongue: 💌 :love_letter: 👤 :bust_in_silhouette: 👥 :busts_in_silhouette: 💬 :speech_balloon: 💭 :thought_balloon:",
      "content_html": "<ul>\n<li>😄 <code>:smile:</code></li>\n<li>😆 <code>:laughing:</code></li>\n<li>😊 <code>:blush:</code></li>\n<li>😃 <code>:smiley:</code></li>\n<li>😏 <code>:smirk:</code></li>\n<li>😍 <code>:heart_eyes:</code></li>\n<li>😘 <code>:kissing_heart:</code></li>\n<li>😚 <code>:kissing_closed_eyes:</code></li>\n<li>😳 <code>:flushed:</code></li>\n<li>😌 <code>:relieved:</code></li>\n<li>😆 <code>:satisfied:</code></li>\n<li>😁 <code>:grin:</code></li>\n<li>😉 <code>:wink:</code></li>\n<li>😜 <code>:stuck_out_tongue_winking_eye:</code></li>\n<li>😝 <code>:stuck_out_tongue_closed_eyes:</code></li>\n<li>😀 <code>:grinning:</code></li>\n<li>😗 <code>:kissing:</code></li>\n<li>😙 <code>:kissing_smiling_eyes:</code></li>\n<li>😛 <code>:stuck_out_tongue:</code></li>\n<li>😴 <code>:sleeping:</code></li>\n<li>😟 <code>:worried:</code></li>\n<li>😦 <code>:frowning:</code></li>\n<li>😧 <code>:anguished:</code></li>\n<li>😮 <code>:open_mouth:</code></li>\n<li>😬 <code>:grimacing:</code></li>\n<li>😕 <code>:confused:</code></li>\n<li>😯 <code>:hushed:</code></li>\n<li>😑 <code>:expressionless:</code></li>\n<li>😒 <code>:unamused:</code></li>\n<li>😅 <code>:sweat_smile:</code></li>\n<li>😓 <code>:sweat:</code></li>\n<li>😥 <code>:disappointed_relieved:</code></li>\n<li>😩 <code>:weary:</code></li>\n<li>😔 <code>:pensive:</code></li>\n<li>😞 <code>:disappointed:</code></li>\n<li>😖 <code>:confounded:</code></li>\n<li>😨 <code>:fearful:</code></li>\n<li>😰 <code>:cold_sweat:</code></li>\n<li>😣 <code>:persevere:</code></li>\n<li>😢 <code>:cry:</code></li>\n<li>😭 <code>:sob:</code></li>\n<li>😂 <code>:joy:</code></li>\n<li>😲 <code>:astonished:</code></li>\n<li>😱 <code>:scream:</code></li>\n<li>😫 <code>:tired_face:</code></li>\n<li>😠 <code>:angry:</code></li>\n<li>😡 <code>:rage:</code></li>\n<li>😤 <code>:triumph:</code></li>\n<li>😪 <code>:sleepy:</code></li>\n<li>😋 <code>:yum:</code></li>\n<li>😷 <code>:mask:</code></li>\n<li>😎 <code>:sunglasses:</code></li>\n<li>😵 <code>:dizzy_face:</code></li>\n<li>👿 <code>:imp:</code></li>\n<li>😈 <code>:smiling_imp:</code></li>\n<li>😐 <code>:neutral_face:</code></li>\n<li>😶 <code>:no_mouth:</code></li>\n<li>😇 <code>:innocent:</code></li>\n<li>👽 <code>:alien:</code></li>\n<li>💛 <code>:yellow_heart:</code></li>\n<li>💙 <code>:blue_heart:</code></li>\n<li>💜 <code>:purple_heart:</code></li>\n<li>❤️ <code>:heart:</code></li>\n<li>💚 <code>:green_heart:</code></li>\n<li>💔 <code>:broken_heart:</code></li>\n<li>💓 <code>:heartbeat:</code></li>\n<li>💗 <code>:heartpulse:</code></li>\n<li>💕 <code>:two_hearts:</code></li>\n<li>💞 <code>:revolving_hearts:</code></li>\n<li>💘 <code>:cupid:</code></li>\n<li>💖 <code>:sparkling_heart:</code></li>\n<li>✨ <code>:sparkles:</code></li>\n<li>⭐ <code>:star:</code></li>\n<li>🌟 <code>:star2:</code></li>\n<li>💫 <code>:dizzy:</code></li>\n<li>💥 <code>:boom:</code></li>\n<li>💥 <code>:collision:</code></li>\n<li>💢 <code>:anger:</code></li>\n<li>❗ <code>:exclamation:</code></li>\n<li>❓ <code>:question:</code></li>\n<li>❕ <code>:grey_exclamation:</code></li>\n<li>❔ <code>:grey_question:</code></li>\n<li>💤 <code>:zzz:</code></li>\n<li>💨 <code>:dash:</code></li>\n<li>💦 <code>:sweat_drops:</code></li>\n<li>🎶 <code>:notes:</code></li>\n<li>🎵 <code>:musical_note:</code></li>\n<li>🔥 <code>:fire:</code></li>\n<li>💩 <code>:hankey:</code></li>\n<li>💩 <code>:poop:</code></li>\n<li>💩 <code>:shit:</code></li>\n<li>👍 <code>:+1:</code></li>\n<li>👍 <code>:thumbsup:</code></li>\n<li>👎 <code>:-1:</code></li>\n<li>👎 <code>:thumbsdown:</code></li>\n<li>👌 <code>:ok_hand:</code></li>\n<li>👊 <code>:punch:</code></li>\n<li>👊 <code>:facepunch:</code></li>\n<li>✊ <code>:fist:</code></li>\n<li>✌️ <code>:v:</code></li>\n<li>👋 <code>:wave:</code></li>\n<li>✋ <code>:hand:</code></li>\n<li>✋ <code>:raised_hand:</code></li>\n<li>👐 <code>:open_hands:</code></li>\n<li>☝️ <code>:point_up:</code></li>\n<li>👇 <code>:point_down:</code></li>\n<li>👈 <code>:point_left:</code></li>\n<li>👉 <code>:point_right:</code></li>\n<li>🙌 <code>:raised_hands:</code></li>\n<li>🙏 <code>:pray:</code></li>\n<li>👆 <code>:point_up_2:</code></li>\n<li>👏 <code>:clap:</code></li>\n<li>💪 <code>:muscle:</code></li>\n<li>🤘 <code>:metal:</code></li>\n<li>🖕 <code>:fu:</code></li>\n<li>🏃 <code>:runner:</code></li>\n<li>🏃 <code>:running:</code></li>\n<li>👫 <code>:couple:</code></li>\n<li>👪 <code>:family:</code></li>\n<li>👬 <code>:two_men_holding_hands:</code></li>\n<li>👭 <code>:two_women_holding_hands:</code></li>\n<li>💃 <code>:dancer:</code></li>\n<li>👯 <code>:dancers:</code></li>\n<li>🙆‍♀️ <code>:ok_woman:</code></li>\n<li>🙅 <code>:no_good:</code></li>\n<li>💁 <code>:information_desk_person:</code></li>\n<li>🙋 <code>:raising_hand:</code></li>\n<li>👰‍♀️ <code>:bride_with_veil:</code></li>\n<li>:person_with_pouting_face: <code>:person_with_pouting_face:</code></li>\n<li>:person_frowning: <code>:person_frowning:</code></li>\n<li>🙇 <code>:bow:</code></li>\n<li>💑 <code>:couple_with_heart:</code></li>\n<li>💆 <code>:massage:</code></li>\n<li>💇 <code>:haircut:</code></li>\n<li>💅 <code>:nail_care:</code></li>\n<li>👦 <code>:boy:</code></li>\n<li>👧 <code>:girl:</code></li>\n<li>👩 <code>:woman:</code></li>\n<li>👨 <code>:man:</code></li>\n<li>👶 <code>:baby:</code></li>\n<li>👵 <code>:older_woman:</code></li>\n<li>👴 <code>:older_man:</code></li>\n<li>:person_with_blond_hair: <code>:person_with_blond_hair:</code></li>\n<li>👲 <code>:man_with_gua_pi_mao:</code></li>\n<li>👳‍♂️ <code>:man_with_turban:</code></li>\n<li>👷 <code>:construction_worker:</code></li>\n<li>👮 <code>:cop:</code></li>\n<li>👼 <code>:angel:</code></li>\n<li>👸 <code>:princess:</code></li>\n<li>😺 <code>:smiley_cat:</code></li>\n<li>😸 <code>:smile_cat:</code></li>\n<li>😻 <code>:heart_eyes_cat:</code></li>\n<li>😽 <code>:kissing_cat:</code></li>\n<li>😼 <code>:smirk_cat:</code></li>\n<li>🙀 <code>:scream_cat:</code></li>\n<li>😿 <code>:crying_cat_face:</code></li>\n<li>😹 <code>:joy_cat:</code></li>\n<li>😾 <code>:pouting_cat:</code></li>\n<li>👹 <code>:japanese_ogre:</code></li>\n<li>👺 <code>:japanese_goblin:</code></li>\n<li>🙈 <code>:see_no_evil:</code></li>\n<li>🙉 <code>:hear_no_evil:</code></li>\n<li>🙊 <code>:speak_no_evil:</code></li>\n<li>💂‍♂️ <code>:guardsman:</code></li>\n<li>💀 <code>:skull:</code></li>\n<li>🐾 <code>:feet:</code></li>\n<li>👄 <code>:lips:</code></li>\n<li>💋 <code>:kiss:</code></li>\n<li>💧 <code>:droplet:</code></li>\n<li>👂 <code>:ear:</code></li>\n<li>👀 <code>:eyes:</code></li>\n<li>👃 <code>:nose:</code></li>\n<li>👅 <code>:tongue:</code></li>\n<li>💌 <code>:love_letter:</code></li>\n<li>👤 <code>:bust_in_silhouette:</code></li>\n<li>👥 <code>:busts_in_silhouette:</code></li>\n<li>💬 <code>:speech_balloon:</code></li>\n<li>💭 <code>:thought_balloon:</code></li>\n</ul>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "地点 Emoji",
      "url": "https://blog.yzketx.online/tip/markdown/emoji/place.html",
      "id": "https://blog.yzketx.online/tip/markdown/emoji/place.html",
      "summary": "🏠 :house: 🏡 :house_with_garden: 🏫 :school: 🏢 :office: 🏣 :post_office: 🏥 :hospital: 🏦 :bank: 🏪 :convenience_store: 🏩 :love_hotel: 🏨 :hotel: 💒 :wedding: ⛪ :church: 🏬 :department_store: 🏤 :european_post_office: 🌇 :city_sunrise: 🌆 :city_sunset: 🏯 :japanese_castle: 🏰 :european_castle: ⛺ :tent: 🏭 :factory: 🗼 :tokyo_tower: 🗾 :japan: 🗻 :mount_fuji: 🌄 :sunrise_over_mountains: 🌅 :sunrise: 🌠 :stars: 🗽 :statue_of_liberty: 🌉 :bridge_at_night: 🎠 :carousel_horse: 🌈 :rainbow: 🎡 :ferris_wheel: ⛲ :fountain: 🎢 :roller_coaster: 🚢 :ship: 🚤 :speedboat: ⛵ :boat: ⛵ :sailboat: 🚣 :rowboat: ⚓ :anchor: 🚀 :rocket: ✈️ :airplane: 🚁 :helicopter: 🚂 :steam_locomotive: 🚊 :tram: 🚞 :mountain_railway: 🚲 :bike: 🚡 :aerial_tramway: 🚟 :suspension_railway: 🚠 :mountain_cableway: 🚜 :tractor: 🚙 :blue_car: 🚘 :oncoming_automobile: 🚗 :car: 🚗 :red_car: 🚕 :taxi: 🚖 :oncoming_taxi: 🚛 :articulated_lorry: 🚌 :bus: 🚍 :oncoming_bus: 🚨 :rotating_light: 🚓 :police_car: 🚔 :oncoming_police_car: 🚒 :fire_engine: 🚑 :ambulance: 🚐 :minibus: 🚚 :truck: 🚋 :train: 🚉 :station: 🚆 :train2: 🚅 :bullettrain_front: 🚄 :bullettrain_side: 🚈 :light_rail: 🚝 :monorail: 🚃 :railway_car: 🚎 :trolleybus: 🎫 :ticket: ⛽ :fuelpump: 🚦 :vertical_traffic_light: 🚥 :traffic_light: ⚠️ :warning: 🚧 :construction: 🔰 :beginner: 🏧 :atm: 🎰 :slot_machine: 🚏 :busstop: 💈 :barber: ♨️ :hotsprings: 🏁 :checkered_flag: 🎌 :crossed_flags: 🏮 :izakaya_lantern: 🗿 :moyai: 🎪 :circus_tent: 🎭 :performing_arts: 📍 :round_pushpin: 🚩 :triangular_flag_on_post:",
      "content_html": "<ul>\n<li>🏠 <code>:house:</code></li>\n<li>🏡 <code>:house_with_garden:</code></li>\n<li>🏫 <code>:school:</code></li>\n<li>🏢 <code>:office:</code></li>\n<li>🏣 <code>:post_office:</code></li>\n<li>🏥 <code>:hospital:</code></li>\n<li>🏦 <code>:bank:</code></li>\n<li>🏪 <code>:convenience_store:</code></li>\n<li>🏩 <code>:love_hotel:</code></li>\n<li>🏨 <code>:hotel:</code></li>\n<li>💒 <code>:wedding:</code></li>\n<li>⛪ <code>:church:</code></li>\n<li>🏬 <code>:department_store:</code></li>\n<li>🏤 <code>:european_post_office:</code></li>\n<li>🌇 <code>:city_sunrise:</code></li>\n<li>🌆 <code>:city_sunset:</code></li>\n<li>🏯 <code>:japanese_castle:</code></li>\n<li>🏰 <code>:european_castle:</code></li>\n<li>⛺ <code>:tent:</code></li>\n<li>🏭 <code>:factory:</code></li>\n<li>🗼 <code>:tokyo_tower:</code></li>\n<li>🗾 <code>:japan:</code></li>\n<li>🗻 <code>:mount_fuji:</code></li>\n<li>🌄 <code>:sunrise_over_mountains:</code></li>\n<li>🌅 <code>:sunrise:</code></li>\n<li>🌠 <code>:stars:</code></li>\n<li>🗽 <code>:statue_of_liberty:</code></li>\n<li>🌉 <code>:bridge_at_night:</code></li>\n<li>🎠 <code>:carousel_horse:</code></li>\n<li>🌈 <code>:rainbow:</code></li>\n<li>🎡 <code>:ferris_wheel:</code></li>\n<li>⛲ <code>:fountain:</code></li>\n<li>🎢 <code>:roller_coaster:</code></li>\n<li>🚢 <code>:ship:</code></li>\n<li>🚤 <code>:speedboat:</code></li>\n<li>⛵ <code>:boat:</code></li>\n<li>⛵ <code>:sailboat:</code></li>\n<li>🚣 <code>:rowboat:</code></li>\n<li>⚓ <code>:anchor:</code></li>\n<li>🚀 <code>:rocket:</code></li>\n<li>✈️ <code>:airplane:</code></li>\n<li>🚁 <code>:helicopter:</code></li>\n<li>🚂 <code>:steam_locomotive:</code></li>\n<li>🚊 <code>:tram:</code></li>\n<li>🚞 <code>:mountain_railway:</code></li>\n<li>🚲 <code>:bike:</code></li>\n<li>🚡 <code>:aerial_tramway:</code></li>\n<li>🚟 <code>:suspension_railway:</code></li>\n<li>🚠 <code>:mountain_cableway:</code></li>\n<li>🚜 <code>:tractor:</code></li>\n<li>🚙 <code>:blue_car:</code></li>\n<li>🚘 <code>:oncoming_automobile:</code></li>\n<li>🚗 <code>:car:</code></li>\n<li>🚗 <code>:red_car:</code></li>\n<li>🚕 <code>:taxi:</code></li>\n<li>🚖 <code>:oncoming_taxi:</code></li>\n<li>🚛 <code>:articulated_lorry:</code></li>\n<li>🚌 <code>:bus:</code></li>\n<li>🚍 <code>:oncoming_bus:</code></li>\n<li>🚨 <code>:rotating_light:</code></li>\n<li>🚓 <code>:police_car:</code></li>\n<li>🚔 <code>:oncoming_police_car:</code></li>\n<li>🚒 <code>:fire_engine:</code></li>\n<li>🚑 <code>:ambulance:</code></li>\n<li>🚐 <code>:minibus:</code></li>\n<li>🚚 <code>:truck:</code></li>\n<li>🚋 <code>:train:</code></li>\n<li>🚉 <code>:station:</code></li>\n<li>🚆 <code>:train2:</code></li>\n<li>🚅 <code>:bullettrain_front:</code></li>\n<li>🚄 <code>:bullettrain_side:</code></li>\n<li>🚈 <code>:light_rail:</code></li>\n<li>🚝 <code>:monorail:</code></li>\n<li>🚃 <code>:railway_car:</code></li>\n<li>🚎 <code>:trolleybus:</code></li>\n<li>🎫 <code>:ticket:</code></li>\n<li>⛽ <code>:fuelpump:</code></li>\n<li>🚦 <code>:vertical_traffic_light:</code></li>\n<li>🚥 <code>:traffic_light:</code></li>\n<li>⚠️ <code>:warning:</code></li>\n<li>🚧 <code>:construction:</code></li>\n<li>🔰 <code>:beginner:</code></li>\n<li>🏧 <code>:atm:</code></li>\n<li>🎰 <code>:slot_machine:</code></li>\n<li>🚏 <code>:busstop:</code></li>\n<li>💈 <code>:barber:</code></li>\n<li>♨️ <code>:hotsprings:</code></li>\n<li>🏁 <code>:checkered_flag:</code></li>\n<li>🎌 <code>:crossed_flags:</code></li>\n<li>🏮 <code>:izakaya_lantern:</code></li>\n<li>🗿 <code>:moyai:</code></li>\n<li>🎪 <code>:circus_tent:</code></li>\n<li>🎭 <code>:performing_arts:</code></li>\n<li>📍 <code>:round_pushpin:</code></li>\n<li>🚩 <code>:triangular_flag_on_post:</code></li>\n</ul>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "符号 Emoji",
      "url": "https://blog.yzketx.online/tip/markdown/emoji/symbol.html",
      "id": "https://blog.yzketx.online/tip/markdown/emoji/symbol.html",
      "summary": "1️⃣ :one: 2️⃣ :two: 3️⃣ :three: 4️⃣ :four: 5️⃣ :five: 6️⃣ :six: 7️⃣ :seven: 8️⃣ :eight: 9️⃣ :nine: 🔟 :keycap_ten: 🔢 :1234: 0️⃣ :zero: #️⃣ :hash: 🔣 :symbols: ◀️ :arrow_backward: ⬇️ :arrow_down: ▶️ :arrow_forward: ⬅️ :arrow_left: 🔠 :capital_abcd: 🔡 :abcd: 🔤 :abc: ↙️ :arrow_lower_left: ↘️ :arrow_lower_right: ➡️ :arrow_right: ⬆️ :arrow_up: ↖️ :arrow_upper_left: ↗️ :arrow_upper_right: ⏬ :arrow_double_down: ⏫ :arrow_double_up: 🔽 :arrow_down_small: ⤵️ :arrow_heading_down: ⤴️ :arrow_heading_up: ↩️ :leftwards_arrow_with_hook: ↪️ :arrow_right_hook: ↔️ :left_right_arrow: ↕️ :arrow_up_down: 🔼 :arrow_up_small: 🔃 :arrows_clockwise: 🔄 :arrows_counterclockwise: ⏪ :rewind: ⏩ :fast_forward: ℹ️ :information_source: 🆗 :ok: 🔀 :twisted_rightwards_arrows: 🔁 :repeat: 🔂 :repeat_one: 🆕 :new: 🔝 :top: 🆙 :up: 🆒 :cool: 🆓 :free: 🆖 :ng: 🎦 :cinema: 🈁 :koko: 📶 :signal_strength: 🈂️ :sa: 🚻 :restroom: 🚹 :mens: 🚺 :womens: 🚼 :baby_symbol: 🚭 :no_smoking: 🅿️ :parking: ♿ :wheelchair: 🚇 :metro: 🛄 :baggage_claim: 🉑 :accept: 🚾 :wc: 🚰 :potable_water: 🚮 :put_litter_in_its_place: ㊙️ :secret: ㊗️ :congratulations: Ⓜ️ :m: 🛂 :passport_control: 🛅 :left_luggage: 🛃 :customs: 🉐 :ideograph_advantage: 🆑 :cl: 🆘 :sos: 🆔 :id: 🚫 :no_entry_sign: 🔞 :underage: 📵 :no_mobile_phones: 🚯 :do_not_litter: 🚱 :non-potable_water: 🚳 :no_bicycles: 🚷 :no_pedestrians: 🚸 :children_crossing: ⛔ :no_entry: ✳️ :eight_spoked_asterisk: ❇️ :sparkle: ✴️ :eight_pointed_black_star: 💟 :heart_decoration: 🆚 :vs: 📳 :vibration_mode: 📴 :mobile_phone_off: 💹 :chart: 💱 :currency_exchange: ♈ :aries: ♉ :taurus: ♊ :gemini: ♋ :cancer: ♌ :leo: ♍ :virgo: ♎ :libra: ♏ :scorpius: ♐ :sagittarius: ♑ :capricorn: ♒ :aquarius: ♓ :pisces: ⛎ :ophiuchus: 🔯 :six_pointed_star: ❎ :negative_squared_cross_mark: 🅰️ :a: 🅱️ :b: 🆎 :ab: 🅾️ :o2: 💠 :diamond_shape_with_a_dot_inside: ♻️ :recycle: 🔚 :end: 🔙 :back: 🔛 :on: 🔜 :soon: 🕐 :clock1: 🕜 :clock130: 🕙 :clock10: 🕥 :clock1030: 🕚 :clock11: 🕦 :clock1130: 🕛 :clock12: 🕧 :clock1230: 🕑 :clock2: 🕝 :clock230: 🕒 :clock3: 🕞 :clock330: 🕓 :clock4: 🕟 :clock430: 🕔 :clock5: 🕠 :clock530: 🕕 :clock6: 🕡 :clock630: 🕖 :clock7: 🕢 :clock730: 🕗 :clock8: 🕣 :clock830: 🕘 :clock9: 🕤 :clock930: 💲 :heavy_dollar_sign: ©️ :copyright: ®️ :registered: ™️ :tm: ❌ :x: ❗ :heavy_exclamation_mark: ‼️ :bangbang: ⁉️ :interrobang: ⭕ :o: ✖️ :heavy_multiplication_x: ➕ :heavy_plus_sign: ➖ :heavy_minus_sign: ➗ :heavy_division_sign: 💮 :white_flower: 💯 :100: ✔️ :heavy_check_mark: ☑️ :ballot_box_with_check: 🔘 :radio_button: 🔗 :link: ➰ :curly_loop: 〰️ :wavy_dash: 〽️ :part_alternation_mark: 🔱 :trident: ▪️ :black_small_square: ▫️ :white_small_square: ◾ :black_medium_small_square: ◽ :white_medium_small_square: ◼️ :black_medium_square: ◻️ :white_medium_square: ⬛ :black_large_square: ⬜ :white_large_square: ✅ :white_check_mark: 🔲 :black_square_button: 🔳 :white_square_button: ⚫ :black_circle: ⚪ :white_circle: 🔴 :red_circle: 🔵 :large_blue_circle: 🔷 :large_blue_diamond: 🔶 :large_orange_diamond: 🔹 :small_blue_diamond: 🔸 :small_orange_diamond: 🔺 :small_red_triangle: 🔻 :small_red_triangle_down:",
      "content_html": "<ul>\n<li>1️⃣ <code>:one:</code></li>\n<li>2️⃣ <code>:two:</code></li>\n<li>3️⃣ <code>:three:</code></li>\n<li>4️⃣ <code>:four:</code></li>\n<li>5️⃣ <code>:five:</code></li>\n<li>6️⃣ <code>:six:</code></li>\n<li>7️⃣ <code>:seven:</code></li>\n<li>8️⃣ <code>:eight:</code></li>\n<li>9️⃣ <code>:nine:</code></li>\n<li>🔟 <code>:keycap_ten:</code></li>\n<li>🔢 <code>:1234:</code></li>\n<li>0️⃣ <code>:zero:</code></li>\n<li>#️⃣ <code>:hash:</code></li>\n<li>🔣 <code>:symbols:</code></li>\n<li>◀️ <code>:arrow_backward:</code></li>\n<li>⬇️ <code>:arrow_down:</code></li>\n<li>▶️ <code>:arrow_forward:</code></li>\n<li>⬅️ <code>:arrow_left:</code></li>\n<li>🔠 <code>:capital_abcd:</code></li>\n<li>🔡 <code>:abcd:</code></li>\n<li>🔤 <code>:abc:</code></li>\n<li>↙️ <code>:arrow_lower_left:</code></li>\n<li>↘️ <code>:arrow_lower_right:</code></li>\n<li>➡️ <code>:arrow_right:</code></li>\n<li>⬆️ <code>:arrow_up:</code></li>\n<li>↖️ <code>:arrow_upper_left:</code></li>\n<li>↗️ <code>:arrow_upper_right:</code></li>\n<li>⏬ <code>:arrow_double_down:</code></li>\n<li>⏫ <code>:arrow_double_up:</code></li>\n<li>🔽 <code>:arrow_down_small:</code></li>\n<li>⤵️ <code>:arrow_heading_down:</code></li>\n<li>⤴️ <code>:arrow_heading_up:</code></li>\n<li>↩️ <code>:leftwards_arrow_with_hook:</code></li>\n<li>↪️ <code>:arrow_right_hook:</code></li>\n<li>↔️ <code>:left_right_arrow:</code></li>\n<li>↕️ <code>:arrow_up_down:</code></li>\n<li>🔼 <code>:arrow_up_small:</code></li>\n<li>🔃 <code>:arrows_clockwise:</code></li>\n<li>🔄 <code>:arrows_counterclockwise:</code></li>\n<li>⏪ <code>:rewind:</code></li>\n<li>⏩ <code>:fast_forward:</code></li>\n<li>ℹ️ <code>:information_source:</code></li>\n<li>🆗 <code>:ok:</code></li>\n<li>🔀 <code>:twisted_rightwards_arrows:</code></li>\n<li>🔁 <code>:repeat:</code></li>\n<li>🔂 <code>:repeat_one:</code></li>\n<li>🆕 <code>:new:</code></li>\n<li>🔝 <code>:top:</code></li>\n<li>🆙 <code>:up:</code></li>\n<li>🆒 <code>:cool:</code></li>\n<li>🆓 <code>:free:</code></li>\n<li>🆖 <code>:ng:</code></li>\n<li>🎦 <code>:cinema:</code></li>\n<li>🈁 <code>:koko:</code></li>\n<li>📶 <code>:signal_strength:</code></li>\n<li>🈂️ <code>:sa:</code></li>\n<li>🚻 <code>:restroom:</code></li>\n<li>🚹 <code>:mens:</code></li>\n<li>🚺 <code>:womens:</code></li>\n<li>🚼 <code>:baby_symbol:</code></li>\n<li>🚭 <code>:no_smoking:</code></li>\n<li>🅿️ <code>:parking:</code></li>\n<li>♿ <code>:wheelchair:</code></li>\n<li>🚇 <code>:metro:</code></li>\n<li>🛄 <code>:baggage_claim:</code></li>\n<li>🉑 <code>:accept:</code></li>\n<li>🚾 <code>:wc:</code></li>\n<li>🚰 <code>:potable_water:</code></li>\n<li>🚮 <code>:put_litter_in_its_place:</code></li>\n<li>㊙️ <code>:secret:</code></li>\n<li>㊗️ <code>:congratulations:</code></li>\n<li>Ⓜ️ <code>:m:</code></li>\n<li>🛂 <code>:passport_control:</code></li>\n<li>🛅 <code>:left_luggage:</code></li>\n<li>🛃 <code>:customs:</code></li>\n<li>🉐 <code>:ideograph_advantage:</code></li>\n<li>🆑 <code>:cl:</code></li>\n<li>🆘 <code>:sos:</code></li>\n<li>🆔 <code>:id:</code></li>\n<li>🚫 <code>:no_entry_sign:</code></li>\n<li>🔞 <code>:underage:</code></li>\n<li>📵 <code>:no_mobile_phones:</code></li>\n<li>🚯 <code>:do_not_litter:</code></li>\n<li>🚱 <code>:non-potable_water:</code></li>\n<li>🚳 <code>:no_bicycles:</code></li>\n<li>🚷 <code>:no_pedestrians:</code></li>\n<li>🚸 <code>:children_crossing:</code></li>\n<li>⛔ <code>:no_entry:</code></li>\n<li>✳️ <code>:eight_spoked_asterisk:</code></li>\n<li>❇️ <code>:sparkle:</code></li>\n<li>✴️ <code>:eight_pointed_black_star:</code></li>\n<li>💟 <code>:heart_decoration:</code></li>\n<li>🆚 <code>:vs:</code></li>\n<li>📳 <code>:vibration_mode:</code></li>\n<li>📴 <code>:mobile_phone_off:</code></li>\n<li>💹 <code>:chart:</code></li>\n<li>💱 <code>:currency_exchange:</code></li>\n<li>♈ <code>:aries:</code></li>\n<li>♉ <code>:taurus:</code></li>\n<li>♊ <code>:gemini:</code></li>\n<li>♋ <code>:cancer:</code></li>\n<li>♌ <code>:leo:</code></li>\n<li>♍ <code>:virgo:</code></li>\n<li>♎ <code>:libra:</code></li>\n<li>♏ <code>:scorpius:</code></li>\n<li>♐ <code>:sagittarius:</code></li>\n<li>♑ <code>:capricorn:</code></li>\n<li>♒ <code>:aquarius:</code></li>\n<li>♓ <code>:pisces:</code></li>\n<li>⛎ <code>:ophiuchus:</code></li>\n<li>🔯 <code>:six_pointed_star:</code></li>\n<li>❎ <code>:negative_squared_cross_mark:</code></li>\n<li>🅰️ <code>:a:</code></li>\n<li>🅱️ <code>:b:</code></li>\n<li>🆎 <code>:ab:</code></li>\n<li>🅾️ <code>:o2:</code></li>\n<li>💠 <code>:diamond_shape_with_a_dot_inside:</code></li>\n<li>♻️ <code>:recycle:</code></li>\n<li>🔚 <code>:end:</code></li>\n<li>🔙 <code>:back:</code></li>\n<li>🔛 <code>:on:</code></li>\n<li>🔜 <code>:soon:</code></li>\n<li>🕐 <code>:clock1:</code></li>\n<li>🕜 <code>:clock130:</code></li>\n<li>🕙 <code>:clock10:</code></li>\n<li>🕥 <code>:clock1030:</code></li>\n<li>🕚 <code>:clock11:</code></li>\n<li>🕦 <code>:clock1130:</code></li>\n<li>🕛 <code>:clock12:</code></li>\n<li>🕧 <code>:clock1230:</code></li>\n<li>🕑 <code>:clock2:</code></li>\n<li>🕝 <code>:clock230:</code></li>\n<li>🕒 <code>:clock3:</code></li>\n<li>🕞 <code>:clock330:</code></li>\n<li>🕓 <code>:clock4:</code></li>\n<li>🕟 <code>:clock430:</code></li>\n<li>🕔 <code>:clock5:</code></li>\n<li>🕠 <code>:clock530:</code></li>\n<li>🕕 <code>:clock6:</code></li>\n<li>🕡 <code>:clock630:</code></li>\n<li>🕖 <code>:clock7:</code></li>\n<li>🕢 <code>:clock730:</code></li>\n<li>🕗 <code>:clock8:</code></li>\n<li>🕣 <code>:clock830:</code></li>\n<li>🕘 <code>:clock9:</code></li>\n<li>🕤 <code>:clock930:</code></li>\n<li>💲 <code>:heavy_dollar_sign:</code></li>\n<li>©️ <code>:copyright:</code></li>\n<li>®️ <code>:registered:</code></li>\n<li>™️ <code>:tm:</code></li>\n<li>❌ <code>:x:</code></li>\n<li>❗ <code>:heavy_exclamation_mark:</code></li>\n<li>‼️ <code>:bangbang:</code></li>\n<li>⁉️ <code>:interrobang:</code></li>\n<li>⭕ <code>:o:</code></li>\n<li>✖️ <code>:heavy_multiplication_x:</code></li>\n<li>➕ <code>:heavy_plus_sign:</code></li>\n<li>➖ <code>:heavy_minus_sign:</code></li>\n<li>➗ <code>:heavy_division_sign:</code></li>\n<li>💮 <code>:white_flower:</code></li>\n<li>💯 <code>:100:</code></li>\n<li>✔️ <code>:heavy_check_mark:</code></li>\n<li>☑️ <code>:ballot_box_with_check:</code></li>\n<li>🔘 <code>:radio_button:</code></li>\n<li>🔗 <code>:link:</code></li>\n<li>➰ <code>:curly_loop:</code></li>\n<li>〰️ <code>:wavy_dash:</code></li>\n<li>〽️ <code>:part_alternation_mark:</code></li>\n<li>🔱 <code>:trident:</code></li>\n<li>▪️ <code>:black_small_square:</code></li>\n<li>▫️ <code>:white_small_square:</code></li>\n<li>◾ <code>:black_medium_small_square:</code></li>\n<li>◽ <code>:white_medium_small_square:</code></li>\n<li>◼️ <code>:black_medium_square:</code></li>\n<li>◻️ <code>:white_medium_square:</code></li>\n<li>⬛ <code>:black_large_square:</code></li>\n<li>⬜ <code>:white_large_square:</code></li>\n<li>✅ <code>:white_check_mark:</code></li>\n<li>🔲 <code>:black_square_button:</code></li>\n<li>🔳 <code>:white_square_button:</code></li>\n<li>⚫ <code>:black_circle:</code></li>\n<li>⚪ <code>:white_circle:</code></li>\n<li>🔴 <code>:red_circle:</code></li>\n<li>🔵 <code>:large_blue_circle:</code></li>\n<li>🔷 <code>:large_blue_diamond:</code></li>\n<li>🔶 <code>:large_orange_diamond:</code></li>\n<li>🔹 <code>:small_blue_diamond:</code></li>\n<li>🔸 <code>:small_orange_diamond:</code></li>\n<li>🔺 <code>:small_red_triangle:</code></li>\n<li>🔻 <code>:small_red_triangle_down:</code></li>\n</ul>\n",
      "date_published": "2023-03-06T16:35:04.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "《假装是日记》",
      "url": "https://blog.yzketx.online/roast/",
      "id": "https://blog.yzketx.online/roast/",
      "summary": "本来这里是有吐槽的，但是捏，记着记着就…写得多了点 🫥",
      "content_html": "<p>本来这里是有吐槽的，但是捏，记着记着就…写得多了点 <a href=\"diary\">🫥</a></p>\n<p>虽然也没啥关系，但是就小小的藏了一下，嘿嘿嘿 <a href=\"todo-list\">🫠</a></p>\n",
      "date_published": "2023-02-27T15:10:47.000Z",
      "date_modified": "2023-03-08T14:37:33.000Z",
      "authors": [],
      "tags": [
        "小吐槽"
      ]
    },
    {
      "title": "认识python中的inf和nan",
      "url": "https://blog.yzketx.online/daily/python_inf_nan.html",
      "id": "https://blog.yzketx.online/daily/python_inf_nan.html",
      "summary": "认识python中的inf和nan",
      "content_html": "<h1> 认识python中的inf和nan</h1>\n<blockquote>\n<p>from <a href=\"https://www.jianshu.com/p/d9caa4ab46e1\" target=\"_blank\" rel=\"noopener noreferrer\">认识python中的inf和nan - 简书 (jianshu.com)</a></p>\n</blockquote>\n<p>python中的正无穷或负无穷，使用float(\"inf\")或float(\"-inf\")来表示。</p>\n<p>这里有点特殊，写成：float(\"inf\")，float(\"INF\")或者float('Inf')都是可以的。</p>\n<p>当涉及 &gt; 和 &lt; 比较时，所有数都比无穷小float(\"-inf\")大，所有数都比无穷大float(\"inf\")小。</p>\n<p>相等比较时，float(\"+inf\")与float(\"+inf\")、float(\"inf\")三者相等。即：</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>同样地，float(\"-inf\") == float(\"-inf\") 返回也是True。</p>\n<p>简单的加，减，乘操作，还是会返回无穷。</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>特别地，</p>\n<ul>\n<li>\n<p>0 * float('inf') 结果为：nan</p>\n</li>\n<li>\n<p>float('inf') / float('inf') 结果为：nan</p>\n</li>\n<li>\n<p>float('inf') - float('inf') 结果为：nan</p>\n</li>\n<li>\n<p>float('-inf') - float('-inf') 结果也为：nan</p>\n</li>\n</ul>\n<p>nan代表Not A Number（不是一个数），它并不等于0，</p>\n<p>因为nan不是一个数，所以相关计算都无法得到数字。</p>\n<p>所有涉及nan的操作，返回的都是nan。</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>结果都是：nan</p>\n<p>比较操作时，返回的都是 False</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>特别注意两个float('nan')并不相等</p>\n<p>python中可以用math.isinf()与math.isnan()来判断数据是否为inf或nan。</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>numpy中也有相类似的方法可用来判断数据。</p>\n<div class=\"language-python\" data-ext=\"py\"></div><hr>\n<p>参考资料：</p>\n<p><a href=\"https://blog.csdn.net/shennongzhaizhu/article/details/51997887\" target=\"_blank\" rel=\"noopener noreferrer\">Python 关于正负无穷float(‘inf’)的一些用法</a></p>\n<p><a href=\"https://stackoverflow.com/questions/17628613/what-is-inf-and-nan\" target=\"_blank\" rel=\"noopener noreferrer\">Stackoverflow.com上的问答：What is inf and nan?</a></p>\n",
      "date_published": "2022-03-02T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "线程安全",
      "url": "https://blog.yzketx.online/daily/Thread-safety.html",
      "id": "https://blog.yzketx.online/daily/Thread-safety.html",
      "summary": "线程安全 线程安全是多线程编程时的计算机程序代码中的一个概念。在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染[1]等意外情况。 如果一个函数能够安全地同时被多个线程调用而得到正确的结果，那么，我们说这个函数是线程安全的。所谓\"安全\"，一切可能导致结果不正确的因素都是不安全的调用。",
      "content_html": "<h1> 线程安全</h1>\n<blockquote>\n<p>线程安全是多线程编程时的计算机程序代码中的一个概念。在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现<strong>数据污染</strong><sup class=\"footnote-ref\"><a href=\"#footnote1\">[1]</a><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a></sup><a class=\"footnote-anchor\" id=\"footnote-ref1\">等意外情况。</a></p><a class=\"footnote-anchor\" id=\"footnote-ref1\">\n<p>如果一个函数能够安全地同时被多个线程调用而得到正确的结果，那么，我们说这个函数是线程安全的。所谓\"安全\"，一切可能导致结果不正确的因素都是不安全的调用。</p>\n</a></blockquote><a class=\"footnote-anchor\" id=\"footnote-ref1\">\n</a><h2><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a> 意义</h2>\n<p>线程安全，是指变量或方法(这些变量或方法是多线程共享的)可以在多线程的环境下被安全有效的访问。这说明了两方面的问题:</p>\n<p>(1)可以从多个线程中调用， 无需调用方有任何操作;</p>\n<p>(2)可以同时被多个线程调用， 无需线程之不必要的交互。</p>\n<hr>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"footnote1\" class=\"footnote-item\"><p>即破坏了数据完整性。数据完整性包括：域完整性【输入范围有效性】、实体完整性【存在唯一主键】、参照完整性【外键关联】 <a href=\"#footnote-ref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2022-02-13T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Runtime",
      "url": "https://blog.yzketx.online/daily/runtime.html",
      "id": "https://blog.yzketx.online/daily/runtime.html",
      "summary": "Runtime 运行时（runtime）是什么意思？应该怎样深入且直观地理解？ - 知乎 (zhihu.com) 根据使用语境有两种含义，一个是单纯的字面意思，指程序运行的时候。 另一个是指支撑程序运行所需的环境，包括比如系统性的变量、其他系统级的辅助程序等。",
      "content_html": "<h1> Runtime</h1>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/20607178\" target=\"_blank\" rel=\"noopener noreferrer\">运行时（runtime）是什么意思？应该怎样深入且直观地理解？ - 知乎 (zhihu.com)</a></p>\n<p>根据使用语境有两种含义，一个是单纯的字面意思，指程序运行的时候。</p>\n<p>另一个是指支撑程序运行所需的环境，包括比如系统性的变量、其他系统级的辅助程序等。</p>\n</blockquote>\n<p>实际上编程语境中的 runtime 至少有三个含义，而目前的回答都只侧重讲了其中的某一个，所以看起来很令人困惑。这几个含义分别可以这样概括：</p>\n<ol>\n<li>指「<a href=\"https://en.wikipedia.org/wiki/Runtime_(program_lifecycle_phase)\" target=\"_blank\" rel=\"noopener noreferrer\">程序运行的时候</a>」，<strong>即程序生命周期中的一个阶段</strong>。例句：「<em>Rust 比 C 更容易将错误发现在编译时而非运行时。</em>」</li>\n<li>指「<a href=\"https://en.wikipedia.org/wiki/Runtime_library\" target=\"_blank\" rel=\"noopener noreferrer\">运行时库</a>」，<strong>即 glibc 这类原生语言的标准库</strong>。例句：「<em>C 程序的 malloc 函数实现需要由运行时提供。</em>」</li>\n<li>指「<a href=\"https://en.wikipedia.org/wiki/Runtime_system\" target=\"_blank\" rel=\"noopener noreferrer\">运行时系统</a>」，<strong>即某门语言的宿主环境</strong>。例句：「<em>Node.js 是一个 JavaScript 的运行时。</em>」</li>\n</ol>\n<p>下面简单介绍一下个人的理解。</p>\n<h2> 含义一：程序生命周期中的阶段</h2>\n<p>一个程序从写好代码字符串（起点）到跑完退出（终点），有一整套标准化的生命周期（流程），可以被拆分为多个阶段。这其中编译阶段是 compile time，链接阶段是 link time，那运行起来的阶段自然就是 run time 了。如果在前面的阶段预先做了通常在后面才方便做的事，我们就管这个叫 ahead of time。</p>\n<blockquote>\n<p>注意所谓 ahead of time 其实只是英语口语中的常见词汇，并不是 AJAX 这种专有的技术概念。比如美军参谋长在通共电话里说的这句：\nIf we're going to attack, I'm going to call you <strong>ahead of time</strong>. It's not going to be a surprise.[<a href=\"https://www.zhihu.com/question/20607178#ref_1\" target=\"_blank\" rel=\"noopener noreferrer\">1]</a></p>\n</blockquote>\n<p>个人猜测 runtime 这个词衍生出的定义应该就源于 run time，泛指那些「<strong>供代码运行所需的最基础的软件</strong>」。下面的两个定义其实也都没有超出这个范畴。</p>\n<h2> 含义二：运行时库（runtime library）</h2>\n<p>怎样理解 runtime library 呢？要知道 C、C++ 和 Rust 这类「系统级语言」相比于 JavaScript 这类「应用级语言」最大的特点之一，就在于它们可以胜任嵌入式裸机、操作系统驱动等贴近硬件性质的开发——<strong>而所谓 runtime library，大致就是这时候你没法用的东西</strong>。</p>\n<p>回想一下，我们在 C 语言里是怎么写 hello world 的呢？</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>这里面除了最后一个括号，每行都和运行时库有很大关系：</p>\n<ol>\n<li><code>stdio.h</code> 里的符号是 C 标准库提供的 API，我们可以 include 进来按需使用（但注意运行时库并不只是标准库）。</li>\n<li><code>main</code> 函数是程序入口，但难道可执行文件的机器码一打开就是它吗？这需要有一个复杂的启动流程，是个从 <code>_start</code> 开始的兔子洞。</li>\n<li><code>printf</code> 是运行时库提供的符号。可这里难道不是直接调操作系统的 API 吗？实际上不管是 OS 的系统调用还是汇编指令，它们都不方便让你直接把字符串画到终端上，这些过程也要靠标准库帮你封装一下。</li>\n</ol>\n<p>在缺少操作系统和标准库的裸机环境下（例如 Rust 的 <a href=\"https://docs.rust-embedded.org/book/intro/no-std.html\" target=\"_blank\" rel=\"noopener noreferrer\">no_std</a>），上面的代码是跑不起来的。而这里的 stdio 只是标准库的冰山一角，再举几个非常常见的例子：</p>\n<ul>\n<li>\n<p>负责数学运算的 <code>math.h</code>：很多精简指令集或嵌入式的低端 CPU 未必会提供做 sin 和 cos 这类<a href=\"https://www.zhihu.com/search?q=%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2133648600%7D\" target=\"_blank\" rel=\"noopener noreferrer\">三角函数</a>运算的指令，这时它们需要软件实现。</p>\n</li>\n<li>\n<p>负责字符串的 <code>string.h</code>：你觉得硬件和操作系统会内置「比较字符串长度」这种功能吗？当然也是靠软件实现啦。</p>\n</li>\n<li>\n<p>负责内存分配的</p>\n<div class=\"language-text\" data-ext=\"text\"></div><p>：直接通过</p>\n<p>mmap</p>\n<p>这类 OS 系统调用来分配内存是过于底层的，一般也需要有人帮你封装。分配内存的 malloc 虽然只是一个接受单个参数的函数，它的实现可远没有表面上的 API 那么简单，建议翻一翻</p>\n<p><a href=\"https://www.zhihu.com/people/bb0d908a66935400e75154587ae4a3fb\" target=\"_blank\" rel=\"noopener noreferrer\">@郭忠明</a></p>\n<p>老师的回答。</p>\n</li>\n</ul>\n<p>换句话说，虽然 C 的 if、for 和函数等语言特性都可以很朴素且优雅地映射（lowering）到汇编，但必然会有些没法直接映射到系统调用和汇编指令的常用功能，比如上面介绍的那几项。对于这些脏活累活，它们就需要由运行时库（例如 Linux 上的 glibc 和 Windows 上的 CRT）来实现。</p>\n<blockquote>\n<p>如果你熟悉 JavaScript 但还不熟悉 C，我还有篇讲「<a href=\"https://zhuanlan.zhihu.com/p/356214452\" target=\"_blank\" rel=\"noopener noreferrer\">C 手动内存管理基础入门</a>」的教程应该适合你。</p>\n</blockquote>\n<p>我们可以把「应用程序、运行时库和 OS」三者间的关系大致按这样来理解：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202201221137775.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>注意运行时库并不只是标准库，你就算不显式 include 任何标准库，也有一些额外的代码会被编译器插入到最后的可执行文件里。比如上面提到的 main 函数，它在真正执行前就需要大量来自运行时库的辅助，一图胜千言（具体细节推荐参考 <a href=\"http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html\" target=\"_blank\" rel=\"noopener noreferrer\">Linux x86 Program Start Up</a>）：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202201221139946.jpg\" alt=\"v2-ac9b094dbe8f231765e32a0c79e204ef_720w\" tabindex=\"0\"><figcaption>v2-ac9b094dbe8f231765e32a0c79e204ef_720w</figcaption></figure>\n<p>除了加载和退出这些程序必备的地方以外，运行时库还可以起到类似前端社区 polyfill 的作用，在程序执行过程中被隐式而「按需」地调用。例如 gcc 的 <a href=\"https://gcc.gnu.org/onlinedocs/gccint/Libgcc.html\" target=\"_blank\" rel=\"noopener noreferrer\">libgcc</a> 和 clang 的 <a href=\"https://compiler-rt.llvm.org/\" target=\"_blank\" rel=\"noopener noreferrer\">compiler-rt</a>（后者还被移植成了 Rust 的 <a href=\"https://github.com/rust-lang/compiler-builtins\" target=\"_blank\" rel=\"noopener noreferrer\">compiler-builtins</a> ），这些库都是特定于编译器的，我们一般比较少听到，但其实也很好理解。</p>\n<p>举个例子，我在移植 QuickJS 引擎到索尼 PSP 的时候，发现虽然把 libc 的静态库链接进来了，但链接时始终找不到 <code>__truncdfsf2</code> 这个符号。这非常让人困惑，因为那个报错位置的源码简单到了这种程度：</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>我把这个函数在 <code>.o</code> 目标文件里反汇编以后的结果读来读去，也完全没有看到 <code>__truncdfsf2</code> 这个东西。但其实是这样的：double 到 float 的转换并不能由 PSP 的 CPU 指令直接完成（PSP 刻意阉割了对双精度浮点数的硬件支持），因此编译 PSP 应用时需要通过软件实现来兼容，这个软浮点算法就叫 <code>__truncdfsf2</code>，它本来应该由编译器在链接出可执行文件时自动插入，但我用的 Rust 工具链恰好没有实现它（<a href=\"https://github.com/rust-lang/compiler-builtins/issues/327\" target=\"_blank\" rel=\"noopener noreferrer\">Issue #327 · compiler-builtins</a>），于是就有了这个报错。最后我把找来的一个软浮点函数的代码贴进来，就可以正确完成链接了。这其实也是个人第一次意识到原来所谓「运行时库」并不仅仅是 stdio.h 里提供的那些符号——哪有什么 include 进来一把梭的岁月静好，还要有<a href=\"https://www.zhihu.com/search?q=%E7%BC%96%E8%AF%91%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2133648600%7D\" target=\"_blank\" rel=\"noopener noreferrer\">编译器</a>和运行时替你默默负重前行。</p>\n<p>理解问题原因后再去看上面的 C 代码，可以感受到这里运行时库所起到的作用，跟 JavaScript 中用于支持新语法的 babel <a href=\"https://www.zhihu.com/search?q=%E8%BD%AC%E8%AF%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2133648600%7D\" target=\"_blank\" rel=\"noopener noreferrer\">转译</a>产物颇有些相似之处。这还是挺有趣的。</p>\n<p>总之，由于系统级语言被设计成既可以用来写操作系统上的原生应用，也可以用来写 bare metal 的裸机程序，因此这类语言需要的运行时（runtime）被设计成了可以按需使用的库（library），于是我们就自然地得到了 runtime library 这个概念。</p>\n<h2> 含义三：运行时系统（runtime system）</h2>\n<p>上面介绍的运行时库，主要针对的是 C、C++ 和 Rust 这些「系统级语言」。只要将这个概念继续推广到其他高级语言，这时候的「运行时」指的就是 runtime system 了——<strong>如果讨论某门高级语言的运行时，我们通常是在讨论一个更重、更大而全的运行时库</strong>。</p>\n<p>比如 Java 的运行时是 JRE，C# 的运行时是 CLR。这两者都相当于一个需要在 OS 上单独安装的软件，借助它们来解释执行相应语言的程序（编译出的字节码）。而对 JavaScript 来说，一般「JS 引擎」是个不带 IO 支持的<a href=\"https://www.zhihu.com/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2133648600%7D\" target=\"_blank\" rel=\"noopener noreferrer\">虚拟机</a>，需要浏览器和 Node 这样的「JS 运行时」才能让它控制文件、网络、图形等硬件资源而真正实用。这些都是很经典的模型了。</p>\n<p>典型的高级语言「运行时系统」里大概需要这些基础组件：</p>\n<ul>\n<li>一个解释执行字节码的虚拟机，多半得带个垃圾回收器。</li>\n<li>如果语言是源码解释执行，那么需要一个编译器前端做词法分析和语法分析。</li>\n<li>如果运行时支持 JIT 优化，那么还得藏着个编译器后端（动态生成<a href=\"https://www.zhihu.com/search?q=%E6%9C%BA%E5%99%A8%E7%A0%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2133648600%7D\" target=\"_blank\" rel=\"noopener noreferrer\">机器码</a>）。</li>\n<li>IO 相关能力，比如 Node.js 的 <code>fs.readFile</code> 之类。</li>\n</ul>\n<p>可以看到相比上面 C 语言的「运行时」，这已经是个复杂的基础软件系统了。</p>\n<p>稍微再展开一点，<strong>注意上面的「运行时」里是不包含应用程序业务逻辑的</strong>。那么拿 JavaScript 举例来说，如果我们把业务逻辑先编译成字节码，再把它和运行时一起编译成一个可执行文件，那不就相当于「<strong>直接把 JavaScript 编译成机器码</strong>」了吗？QuickJS 就可以这么做，但其实这时候业务逻辑解释执行的天性不会变——难道真有黑科技能把弱类型的脚本直接靠静态分析编译达到系统级语言的水平？这更多地只是概念定义上的话术而已。</p>\n<p>因此，理论上任意的弱类型动态语言都可以基于这种形式来 AOT 编译成「原生机器码」，你看 Dart、Swift 和 Java 都可以直接编译成可执行文件，区别只是这个运行时的轻重量级不同——当然实际情况肯定没有这么理想化，譬如哪怕编译成了 ARM 机器码，Flutter 里的 Dart 运行时也必然需要比 C 做更多的类型检查和 stop the world 的 GC，这都是有成本的。但对于<a href=\"https://www.zhihu.com/search?q=%E5%BA%94%E7%94%A8%E5%B1%82&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2133648600%7D\" target=\"_blank\" rel=\"noopener noreferrer\">应用层</a>开发来说，能做到这样已经够好了。</p>\n<p>所以我们甚至可以激进地认为对于 OS 上的应用程序，各种编程语言都是或多或少地需要运行时的，大家只有运行时轻重的区别———「<strong>其 实 都 一 样</strong>」。</p>\n<p>综上所述，runtime 在技术讨论中有多个含义，我们经常用它作为 runtime library 和 runtime system 的简称，因此可能造成一些误解。</p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202201221137775.jpeg",
      "date_published": "2022-01-22T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Vue3 Lifecycle",
      "url": "https://blog.yzketx.online/daily/vue3-lifecycle.html",
      "id": "https://blog.yzketx.online/daily/vue3-lifecycle.html",
      "summary": "Vue3 Lifecycle",
      "content_html": "<h1> Vue3 Lifecycle</h1>\n<h2> 生命周期图示</h2>\n<p>下图展示了实例的生命周期。我们不需要立马弄明白所有的东西，不过随着不断学习和使用，它的参考价值会越来越高。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202201221208294.svg\" alt=\"lifecycle\" tabindex=\"0\"><figcaption>lifecycle</figcaption></figure>\n<h2> lifecycle-hooks</h2>\n<table>\n<thead>\n<tr>\n<th>选项式 API</th>\n<th>Hook inside <code>setup</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>beforeCreate</code></td>\n<td>Not needed*</td>\n</tr>\n<tr>\n<td><code>created</code></td>\n<td>Not needed*</td>\n</tr>\n<tr>\n<td><code>beforeMount</code></td>\n<td><code>onBeforeMount</code></td>\n</tr>\n<tr>\n<td><code>mounted</code></td>\n<td><code>onMounted</code></td>\n</tr>\n<tr>\n<td><code>beforeUpdate</code></td>\n<td><code>onBeforeUpdate</code></td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td><code>onUpdated</code></td>\n</tr>\n<tr>\n<td><code>beforeUnmount</code></td>\n<td><code>onBeforeUnmount</code></td>\n</tr>\n<tr>\n<td><code>unmounted</code></td>\n<td><code>onUnmounted</code></td>\n</tr>\n<tr>\n<td><code>errorCaptured</code></td>\n<td><code>onErrorCaptured</code></td>\n</tr>\n<tr>\n<td><code>renderTracked</code></td>\n<td><code>onRenderTracked</code></td>\n</tr>\n<tr>\n<td><code>renderTriggered</code></td>\n<td><code>onRenderTriggered</code></td>\n</tr>\n<tr>\n<td><code>activated</code></td>\n<td><code>onActivated</code></td>\n</tr>\n<tr>\n<td><code>deactivated</code></td>\n<td><code>onDeactivated</code></td>\n</tr>\n</tbody>\n</table>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202201221208294.svg",
      "date_published": "2022-01-20T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "VuePress",
      "url": "https://blog.yzketx.online/daily/vuepress-starter.html",
      "id": "https://blog.yzketx.online/daily/vuepress-starter.html",
      "summary": "VuePress 简介",
      "content_html": "<h1> VuePress</h1>\n<h2> 简介</h2>\n<p>VuePress 是一个以 Markdown 为中心的静态网站生成器。你可以使用 <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown在新窗口打开</a> 来书写内容（如文档、博客等），然后 VuePress 会帮助你生成一个静态网站来展示它们。</p>\n<p>VuePress 诞生的初衷是为了支持 Vue.js 及其子项目的文档需求，但是现在它已经在帮助大量用户构建他们的文档、博客和其他静态网站。</p>\n<h2> 安装</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在<code>target-dir/package.json</code>中加一些脚本：</p>\n<div class=\"language-json\" data-ext=\"json\"></div><h2> 使用</h2>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h2> 部署</h2>\n<h3> 方法1：Github Action</h3>\n<h4> 借助已有的他人 Github Action 模板</h4>\n<p><a href=\"https://github.com/jenkey2011/vuepress-deploy/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-deploy/README.zh-CN.md at master · jenkey2011/vuepress-deploy (github.com)</a></p>\n<p>在你项目仓库<code>.github/workflows</code>目录下创建一个 <code>.yml</code>文件，举例：<code>vuepress-deploy.yml</code>。</p>\n<p>内容：</p>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述配置的结果是：每次推送代码，将自动构建、部署到<code>username/repo</code>的<code>master</code>分支。就是这么简单~</p>\n<h4> 自定义</h4>\n<p><a href=\"https://v2.vuepress.vuejs.org/zh/guide/deployment.html#github-pages\" target=\"_blank\" rel=\"noopener noreferrer\">部署 | VuePress (vuejs.org)</a></p>\n<ol>\n<li>\n<p>设置正确的 <a href=\"https://v2.vuepress.vuejs.org/zh/reference/config.html#base\" target=\"_blank\" rel=\"noopener noreferrer\">base</a> 选项。</p>\n<p>如果你准备发布到 <code>https://&lt;USERNAME&gt;.github.io/</code> ，你可以省略这一步，因为 <code>base</code> 默认就是 <code>\"/\"</code> 。</p>\n<p>如果你准备发布到 <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code> ，也就是说你的仓库地址是 <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code> ，则将 <code>base</code> 设置为 <code>\"/&lt;REPO&gt;/\"</code>。</p>\n</li>\n<li>\n<p>选择你想要使用的 CI 工具。这里我们以 <a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Actions在新窗口打开</a> 为例。</p>\n<p>创建 <code>.github/workflows/docs.yml</code> 文件来配置工作流。</p>\n</li>\n</ol>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> VuePress Theme</h2>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-theme-hope</a></li>\n<li></li>\n</ul>\n",
      "date_published": "2022-01-20T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Tags说明",
      "url": "https://blog.yzketx.online/tags.html",
      "id": "https://blog.yzketx.online/tags.html",
      "summary": "Tags说明 Lang：计算机语言技术相关原理与解释",
      "content_html": "<h1> Tags说明</h1>\n<ul>\n<li>Lang：计算机语言技术相关原理与解释</li>\n<li></li>\n</ul>\n",
      "date_published": "2021-01-18T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "Blog 指南"
      ]
    },
    {
      "title": "开源书籍",
      "url": "https://blog.yzketx.online/book/",
      "id": "https://blog.yzketx.online/book/",
      "summary": "书名 《Designing Data-Intensive Applications》",
      "content_html": "<h2> 书名</h2>\n<h3> 《Designing Data-Intensive Applications》</h3>\n<p><a href=\"http://ddia.vonng.com/#/\" target=\"_blank\" rel=\"noopener noreferrer\">📖The Website</a></p>\n<p><a href=\"/book/ddia/\" target=\"blank\">📗Clone Data</a></p>\n<h2> 专业名词</h2>\n<ol>\n<li><strong>扇出</strong>：描述为了完成一个服务请求而去调用其他服务请求的次数。</li>\n<li></li>\n</ol>\n",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "开源书籍"
      ]
    },
    {
      "title": "类内部定义自身",
      "url": "https://blog.yzketx.online/daily/Class-defines-itself-internally.html",
      "id": "https://blog.yzketx.online/daily/Class-defines-itself-internally.html",
      "summary": "类内部定义自身 CPP",
      "content_html": "<h1> 类内部定义自身</h1>\n<h2> CPP</h2>\n<blockquote>\n<p>为什么C++类定义中，数据成员不能被指定为自身类型，但可以是指向自身类型的指针或引用？</p>\n</blockquote>\n<p>在介绍这个问题前，我们先简要说一下类定义和声明的区别。</p>\n<p><strong>类声明</strong></p>\n<div class=\"language-cpp\" data-ext=\"cpp\"></div><p><strong>类定义</strong></p>\n<div class=\"language-cpp\" data-ext=\"cpp\"></div><p>当用实例化一个类的对象时，编译器会根据类的定义来分配相应的存储空间。也就是说，在创建对象前，一定要有完整的类定义，这样编译器才能正确的计算所需空间。</p>\n<p>那么我们来看如下代码：</p>\n<div class=\"language-cpp\" data-ext=\"cpp\"></div><p>上述代码中，由于Screen还没有定义结束，在内部定义一个Screen类型的对象时，编译器无法知道应该为sc分配多少空间，因此会报注释中的错误。</p>\n<p>我们再看下面一段代码：</p>\n<div class=\"language-cpp\" data-ext=\"cpp\"></div><p>在类定义时，已指向自身类型的指针或引用作为数据成员则没有问题。按照前面的介绍就很好理解了，由于指针和引用所占存储空间大小与类型无关，所以编译器可以计算分配空间，所以正确。</p>\n<h2> Java</h2>\n",
      "date_published": "2021-11-14T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "函数回调",
      "url": "https://blog.yzketx.online/daily/Functioncallback.html",
      "id": "https://blog.yzketx.online/daily/Functioncallback.html",
      "summary": "函数回调 整理自 码农的荒岛求生",
      "content_html": "<h1> 函数回调</h1>\n<blockquote>\n<p>整理自 <a href=\"https://www.zhihu.com/people/mac-82-59\" target=\"_blank\" rel=\"noopener noreferrer\">码农的荒岛求生</a></p>\n</blockquote>\n<p>不知你是不是也有这样的疑惑，我们为什么需要回调函数这个概念呢？直接调用函数不就可以了？回调函数到底有什么作用？程序员到底该如何理解回调函数？</p>\n<h2> 一切要从这样的需求说起</h2>\n<p>假设你们公司要开发下一代国民App“明日油条”，一款主打解决国民早餐问题的App，为了加快开发进度，这款应用由A小组和B小组协同开发。</p>\n<p>其中有一个核心模块由A小组开发然后供B小组调用，这个核心模块被封装成了一个函数，这个函数就叫make_youtiao()。</p>\n<p>如果make_youtiao()这个函数执行的很快并可以立即返回，那么B小组的同学只需要：</p>\n<ol>\n<li>调用make_youtiao()</li>\n<li>等待该函数执行完成</li>\n<li>该函数执行完后继续后续流程</li>\n</ol>\n<p>从程序执行的角度看这个过程是这样的：</p>\n<ol>\n<li>保存当前被执行函数的上下文</li>\n<li>开始执行make_youtiao()这个函数</li>\n<li>make_youtiao()执行完后，控制转回到调用函数中</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251857028.jpg\" alt=\"1\" tabindex=\"0\"><figcaption>1</figcaption></figure>\n<p>如果世界上所有的函数都像make_youtiao()这么简单，那么程序员大概率就要失业了，还好程序的世界是复杂的，这样程序员才有了存在的价值。</p>\n<h2> 现实情况并不容易</h2>\n<p>现实中make_youtiao()这个函数需要处理的数据非常庞大，假设有10000个，<strong>那么make_youtiao(10000)不会立刻返回</strong>，而是可能需要10分钟才执行完成并返回。</p>\n<p>这时你该怎么办呢？想一想这个问题。</p>\n<p>可能有的同学就像把头埋在沙子里的鸵鸟一样：和刚才一样直接调用不可以吗，这样多简单。</p>\n<p>是的，这样做没有问题，但就像爱因斯坦说的那样“一切都应该尽可能简单，但是不能过于简单”。</p>\n<p>想一想直接调用会有什么问题？</p>\n<p>显然直接调用的话，那么调用线程会被阻塞暂停，在等待10分钟后才能继续运行。在这10分钟内该线程不会被操作系统分配CPU，也就是说该线程得不到任何推进。</p>\n<p>这并不是一种高效的做法。</p>\n<p>没有一个程序员想死盯着屏幕10分钟后才能得到结果。</p>\n<p>那么有没有一种更加高效的做法呢？</p>\n<h2> 同步与异步</h2>\n<p>我们已经知道了这种<strong>一直等待直到另一个任务完成的</strong>模式叫做同步。</p>\n<p>如果你是老板的话你会什么都不干一直盯着员工写代码吗？因此一种更好的做法是程序员在代码的时候老板该干啥干啥，程序员写完后自然会通知老板，这样老板和程序员都不需要相互等待，这种模式被称为异步。</p>\n<p>回到我们的主题，这里一种更好的方式是<strong>调用make_youtiao()这个函数后不再等待这个函数执行完成</strong>，而是直接返回继续后续流程，这样A小组的程序就可以和make_youtiao()这个函数同时进行了，就像这样：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251911744.jpg\" alt=\"2\" tabindex=\"0\"><figcaption>2</figcaption></figure>\n<p>在这种情况下，回调(callback)就必须出场了。</p>\n<h2> 为什么我们需要回调callback</h2>\n<p>有的同学可能还没有明白为什么在这种情况下需要回调，别着急，我们慢慢讲。</p>\n<p>假设我们“明日油条”App代码第一版是这样写的：</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>可以看到这是最简单的写法，意思很简单，制作好油条后卖出去。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251911066.jpg\" alt=\"3\" tabindex=\"0\"><figcaption>3</figcaption></figure>\n<p>我们已经知道了由于make_youtiao(10000)这个函数10分钟才能返回，你不想一直死盯着屏幕10分钟等待结果，那么一种更好的方法是让make_youtiao()这个函数知道制作完油条后该干什么，即，更好的调用make_youtiao的方式是这样的：“制作10000个油条，<strong>炸好后卖出去</strong>”，因此调用make_youtiao就变出这样了：</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>看到了吧，现在make_youtiao这个函数多了一个参数，除了指定制作油条的数量外<strong>还可以指定制作好后该干什么</strong>，第二个被make_youtiao这个函数调用的函数就叫回调，callback。</p>\n<p>现在你应该看出来了吧，虽然sell函数是你定义的，但是这个函数却是被其它模块调用执行的，就像这样：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251912197.jpg\" alt=\"4\" tabindex=\"0\"><figcaption>4</figcaption></figure>\n<p>make_youtiao这个函数是怎么实现的呢，很简单：</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>这样你就不用死盯着屏幕了，因为你把make_youtiao这个函数执行完后该做的任务交代给make_youtiao这个函数了，该函数制作完油条后知道该干些什么，这样就解放了你的程序。</p>\n<p>有的同学可能还是有疑问，为什么编写make_youtiao这个小组不直接定义sell函数然后调用呢？</p>\n<p>不要忘了明日油条这个App是由A小组和B小组同时开发的，A小组在编写make_youtiao时怎么知道B小组要怎么用这个模块，假设A小组真的自己定义sell函数就会这样写：</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>同时A小组设计的模块非常好用，这时C小组也想用这个模块，然而C小组的需求是制作完油条后放到仓库而不是不是直接卖掉，要满足这一需求那么A小组该怎么写呢？</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>故事还没完，假设这时D小组又想使用呢，难道还要接着添加if else吗？这个问题该怎么解决呢？关于这个问题的答案，你懂的。</p>\n<h2> 新的编程思维模式</h2>\n<p>让我们再来仔细的看一下这个过程。</p>\n<p>程序员最熟悉的思维模式是这样的：</p>\n<ol>\n<li>调用某个函数，获取结果</li>\n<li>处理获取到的结果</li>\n</ol>\n<div class=\"language-c\" data-ext=\"c\"></div><p>这就是函数的同步调用，只有request()函数返回拿到结果后，才能调用handle函数进行处理，request函数返回前我们必须<strong>等待</strong>，这就是同步调用，其控制流是这样的：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251913923.jpg\" alt=\"5\" tabindex=\"0\"><figcaption>5</figcaption></figure>\n<p>但是如果我们想更加高效的话，那么就需要异步调用了，我们不去直接调用handle函数，而是作为参数传递给request：</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>我们根本就不关心request什么时候真正的获取的结果，这是request该关心的事情，我们只需要把获取到结果后该怎么处理告诉request就可以了，因此request函数可以立刻返回，真的获取结果的处理可能是在另一个线程、进程、甚至另一台机器上完成。</p>\n<p>这就是异步调用，其控制流是这样的：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251913273.jpg\" alt=\"6\" tabindex=\"0\"><figcaption>6</figcaption></figure>\n<p>从编程思维上看，异步调用和同步有很大的差别，如果我们把处理流程当做一个任务来的话，那么同步下整个任务都是我们来实现的，但是异步情况下任务的处理流程被分为了两部分：</p>\n<ol>\n<li>第一部分是我们来处理的，也就是调用request之前的部分</li>\n<li>第二部分不是我们处理的，而是在其它线程、进程、甚至另一个机器上处理的。</li>\n</ol>\n<p>我们可以看到由于任务被分成了两部分，第二部分的调用不在我们的掌控范围内，同时只有调用方才知道该做什么，因此在这种情况下回调函数就是一种必要的机制了。</p>\n<p>也就是说回调函数的本质就是“只有我们才知道做些什么，但是我们并不清楚什么时候去做这些，只有其它模块才知道，因此我们必须把我们知道的封装成回调函数告诉其它模块”。</p>\n<p>现在你应该能看出异步回调这种编程思维模式和同步的差异了吧。</p>\n<p>接下来我们给回调一个较为学术的定义</p>\n<h2> 正式定义</h2>\n<blockquote>\n<p>在计算机科学中，回调函数是指一段以参数的形式传递给其它代码的可执行代码。</p>\n</blockquote>\n<p>这就是回调函数的定义了。</p>\n<p>回调函数就是一个函数，和其它函数没有任何区别。</p>\n<p>注意，回调函数是一种软件设计上的概念，和某个编程语言没有关系，几乎所有的编程语言都能实现回调函数。</p>\n<p>对于一般的函数来说，我们自己编写的函数会在自己的程序内部调用，也就是说函数的编写方是我们自己，调用方也是我们自己。</p>\n<p>但回调函数不是这样的，虽然函数编写方是我们自己，但是函数调用方不是我们，而是我们引用的其它模块，也就是第三方库，我们调用第三方库中的函数，并把回调函数传递给第三方库，第三方库中的函数调用我们编写的回调函数，如图所示：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251913384.jpg\" alt=\"7\" tabindex=\"0\"><figcaption>7</figcaption></figure>\n<p>而之所以需要给第三方库指定回调函数，是因为第三方库的编写者并不清楚在某些特定节点，比如我们举的例子油条制作完成、接收到网络数据、文件读取完成等之后该做什么，这些只有库的使用方才知道，因此第三方库的编写者无法针对具体的实现来写代码，而只能对外提供一个回调函数，库的使用方来实现该函数，第三方库在特定的节点调用该回调函数就可以了。</p>\n<p>另一点值得注意的是，从图中我们可以看出回调函数和我们的主程序位于<strong>同一层</strong>中，我们只负责编写该回调函数，但并不是我们来调用的。</p>\n<p>最后值得注意的一点就是回调函数被调用的时间节点，回调函数只在某些特定的节点被调用，就像上面说的油条制作完成、接收到网络数据、文件读取完成等，这些都是事件，也就是event，本质上我们编写的回调函数就是用来处理event的，因此从这个角度看回调函数不过就是event handler，因此回调函数天然适用于事件驱动编程event-driven，我们将会在后续文章中再次回到这一主题。</p>\n<h2> 回调的类型</h2>\n<p>我们已经知道有两种类型的回调，这两种类型的回调区别在于回调函数被调用的时机。</p>\n<p><strong>同步回调</strong></p>\n<p>这种回调就是通常所说的同步回调synchronous callbacks、也有的将其称为阻塞式回调blocking callbacks，或者什么修饰都没有，就是回调，callback，这是我们最为熟悉的回调方式。</p>\n<p>当我们调用某个函数A并以参数的形式传入回调函数后，在A返回之前回调函数会被执行，也就是说我们的主程序会等待回调函数执行完成，这就是所谓的同步回调。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251914580.jpg\" alt=\"8\" tabindex=\"0\"><figcaption>8</figcaption></figure>\n<p>有同步回调就有异步回调。</p>\n<h2> 回调对应的编程思维模式</h2>\n<p>让我们用简单的几句话来总结一下回调下与常规编程思维模式的不同。</p>\n<p>假设我们想处理某项任务，这项任务需要依赖某项服务S，我们可以将任务的处理分为两部分，调用服务S前的部分PA，和调用服务S后的部分PB。</p>\n<p>在常规模式下，PA和PB都是服务调用方来执行的，也就是我们自己来执行PA部分，等待服务S返回后再执行PB部分。</p>\n<p>但在回调这种方式下就不一样了。</p>\n<p>在这种情况下，我们自己来执行PA部分，然后告诉服务S：“等你完成服务后执行PB部分”。</p>\n<p>因此我们可以看到，现在一项任务是由不同的模块来协作完成的。</p>\n<p>即：</p>\n<ul>\n<li>常规模式：调用完S服务后后我去执行X任务，</li>\n<li>回调模式：调用完S服务后你接着再去执行X任务，</li>\n</ul>\n<p>其中X是服务调用方制定的，区别在于谁来执行。</p>\n<h2> 为什么异步回调这种思维模式正变得的越来越重要</h2>\n<p>在同步模式下，服务调用方会因服务执行而被阻塞暂停执行，这会导致整个线程被阻塞，因此这种编程方式天然不适用于高并发动辄几万几十万的并发连接场景，</p>\n<p>针对高并发这一场景，异步其实是更加高效的，原因很简单，你不需要在原地等待，因此从而更好的利用机器资源，而回调函数又是异步下不可或缺的一种机制。</p>\n<h2> 回调地狱，callback hell</h2>\n<p>有的同学可能认为有了异步回调这种机制应付起一切高并发场景就可以高枕无忧了。</p>\n<p>实际上在计算机科学中还没有任何一种可以横扫一切包治百病的技术，现在没有，在可预见的将来也不会有，一切都是妥协的结果。</p>\n<p>那么异步回调这种机制有什么问题呢？</p>\n<p>实际上我们已经看到了，异步回调这种机制和程序员最熟悉的同步模式不一样，在可理解性上比不过同步，而如果业务逻辑相对复杂，比如我们处理某项任务时不止需要调用一项服务，而是几项甚至十几项，如果这些服务调用都采用异步回调的方式来处理的话，那么很有可能我们就陷入回调地狱中。</p>\n<p>举个例子，假设处理某项任务我们需要调用四个服务，每一个服务都需要依赖上一个服务的结果，如果用同步方式来实现的话可能是这样的：</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>代码很清晰，很容易理解有没有。</p>\n<p>我们知道异步回调的方式会更加高效，那么使用异步回调的方式来写将会是什么样的呢？</p>\n<div class=\"language-c\" data-ext=\"c\"></div><p>我想不需要再强调什么了吧，你觉得这两种写法哪个更容易理解，代码更容易维护呢？</p>\n<p>博主有幸曾经维护过这种类型的代码，不得不说每次增加新功能的时候恨不得自己化为两个分身，一个不得不去重读一边代码；另一个在一旁骂自己为什么当初选择维护这个项目。</p>\n<p>异步回调代码稍不留意就会跌到回调陷阱中，那么有没有一种更好的办法既能结合异步回调的高效又能结合同步编码的简单易读呢？</p>\n<p>幸运的是，答案是肯定的。</p>\n<h2> 总结</h2>\n<p>在这里，我们从一个实际的例子出发详细讲解了回调函数这种机制的来龙去脉，这是应对高并发、高性能场景的一种极其重要的编码机制，异步加回调可以充分利用机器资源，实际上异步回调最本质上就是<strong>事件驱动编程</strong>。</p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110251857028.jpg",
      "date_published": "2021-10-25T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Listary & Everything",
      "url": "https://blog.yzketx.online/daily/Listary-Everything.html",
      "id": "https://blog.yzketx.online/daily/Listary-Everything.html",
      "summary": "Listary &amp; Everything",
      "content_html": "<h1> Listary &amp; Everything</h1>\n<blockquote>\n<p>1、Everything 是一款独立的本地搜索软件，更是一款基于文件系统的搜索引擎，侧重于文件搜索，替代了传统的本地搜索工具，主要是做「过滤筛查」的，面向的是「结果集」，是为了方便文件的批处理操作；</p>\n<p>2、Listary 是一款效率辅助搜索工具，更多是作为启动器设计的，侧重于文件定位，无需拥有自己的主界面，需要依附其它软件，主要是做「定位」的，面向的是「单一对象」，进而扩展更多动作，提升操作效率。</p>\n</blockquote>\n<p>Listary :</p>\n<ul>\n<li>任意界面双击“Ctrl”打开搜索框</li>\n<li>资源管理器内任意位置直接搜索</li>\n<li>搜索网络资源，一触即达</li>\n<li>拼音首字母模糊搜索</li>\n</ul>\n<p>Everyhing :</p>\n<ul>\n<li>远快于Listary的文件检索速度与筛选功能</li>\n</ul>\n<p>举个例子，比如我想快速找到一个文件，可以通过Listary迅速启动Everything，利用Everything强悍的搜索能力快速找到文件。两者结合，效率倍增。</p>\n<p>在全局任意界面双击 Ctrl 键就可以快速调出Listary搜索栏，秒速开启搜索！执行完毕，搜索栏就会自动消失，招之即来，挥之即去。</p>\n<p>简单来说，Everything替代了 File Explorer 的功能，Listary 替代了 Win+S 的功能，并进一步强化了File Explorer</p>\n",
      "date_published": "2021-10-14T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "负载均衡分类",
      "url": "https://blog.yzketx.online/daily/LoadBalance.html",
      "id": "https://blog.yzketx.online/daily/LoadBalance.html",
      "summary": "负载均衡分类 Nginx 与 SpringCloud 的 Ribbon 对比： Nginx 做的是客户端范围访问请求的负载均衡，负责将客户端请求代理转发给服务器。 Ribbon 做的是 SpringCloud 内部微服务之间访问的负载均衡，该请求源自 完成某用户请求而需要调用的内部微服务。",
      "content_html": "<h1> 负载均衡分类</h1>\n<blockquote>\n<p>Nginx 与 SpringCloud 的 Ribbon 对比：</p>\n<ul>\n<li>Nginx 做的是客户端范围访问请求的负载均衡，负责将客户端请求代理转发给服务器。</li>\n<li>Ribbon 做的是 SpringCloud 内部微服务之间访问的负载均衡，该请求源自 完成某用户请求而需要调用的内部微服务。</li>\n</ul>\n</blockquote>\n<h2> 客户端负载均衡器</h2>\n<p>在SpringCloud中Ribbon负载均衡客户端，会从eureka注册中心服务器端上获取服务注册信息列表，缓存到本地。</p>\n<p>让后在本地实现轮训负载均衡策略。</p>\n<h3> Ribbon与Nginx区别</h3>\n<h4> 1.服务器端负载均衡Nginx</h4>\n<p>nginx是客户端所有请求统一交给nginx，由nginx进行实现负载均衡请求转发，属于服务器端负载均衡。</p>\n<p>既请求有nginx服务器端进行转发。</p>\n<h4> 2.客户端负载均衡Ribbon</h4>\n<p>Ribbon是从eureka注册中心服务器端上获取服务注册信息列表，缓存到本地，让后在本地实现轮训负载均衡策略。</p>\n<p>既在客户端实现负载均衡。</p>\n<h4> 应用场景的区别：</h4>\n<p>Nginx适合于服务器端实现负载均衡 比如Tomcat ，Ribbon适合与在微服务中RPC远程调用实现本地服务负载均衡，比如Dubbo、SpringCloud中都是采用本地负载均衡。</p>\n<p>Ribbon是Spring Cloud （本地）客户端负载均衡器</p>\n",
      "date_published": "2021-12-19T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "消息推送实现原理",
      "url": "https://blog.yzketx.online/daily/Message-push.html",
      "id": "https://blog.yzketx.online/daily/Message-push.html",
      "summary": "消息推送实现原理",
      "content_html": "<h1> 消息推送实现原理</h1>\n",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Promise基本使用及方法介绍",
      "url": "https://blog.yzketx.online/daily/Promise-base.html",
      "id": "https://blog.yzketx.online/daily/Promise-base.html",
      "summary": "Promise基本使用及方法介绍",
      "content_html": "<h1> Promise基本使用及方法介绍</h1>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/270fec5b33ce\" target=\"_blank\" rel=\"noopener noreferrer\">整理自🌐</a></p>\n</blockquote>\n<h2> 含义</h2>\n<p><code>Promise</code>是异步编程的一种解决方案，用于一个异步操作的最终完成(或失败)及其结果值的表示，比传统的回调函数方案更加合理。</p>\n<h2> 描述</h2>\n<ol>\n<li><code>Promise</code> 对象是一个代理对象（代理一个值），被代理的值在<code>Promise</code>对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（<code>handlers</code>）。</li>\n<li>一个 <code>Promise</code>有以下几种状态:\n(1) <code>pending</code>: 意味着操作正在进行。\n(2) <code>fulfilled</code>: 意味着操作成功。\n(3) <code>rejected</code>: 意味着操作失败。</li>\n<li><code>pending</code> 状态的 <code>Promise</code> 对象可能触发<code>fulfilled</code> 状态并传递一个值给相应的状态处理方法，也可能触发失败状态（<code>rejected</code>）并传递失败信息。当其中任一种情况出现时，<code>Promise</code> 对象的<code>then</code> 方法绑定的处理方法（<code>handlers</code> ）就会被调用（<code>then</code>方法包含两个参数：<code>onfulfilled</code> 和 <code>onrejected</code>（可选参数），它们都是 <code>Function</code> 类型。</li>\n</ol>\n<h2> 语法</h2>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>参数\n<code>executor</code> 函数在<code>Promise</code>构造函数执行时同步执行，被传递 <code>resolve</code> 和 <code>reject</code> 函数（<code>executor</code>函数在<code>Promise</code>构造函数返回新建对象前被调用）。\n<code>executor</code> 内部通常会执行一些异步操作，一旦完成，可以调用<code>resolve</code>函数来将<code>promise</code>状态改成<code>fulfilled</code>(完成)，或者将<code>promise</code>的状态改为<code>rejected</code>(失败)。\n如果在<code>executor</code>函数中抛出一个错误，那么该<code>promise</code> 状态为<code>rejected</code>。<code>executor</code>函数的返回值被忽略。</li>\n<li>简单使用</li>\n</ol>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><h2> 细节</h2>\n<ol>\n<li><code>Promise</code>对象在创建后立即执行，<code>then</code>方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行。</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>如果调用<code>resolve</code>函数和<code>reject</code>函数时带有参数，那么它们的参数会被传递给回调函数。<code>reject</code>函数的参数通常是<code>Error</code>对象的实例，表示抛出的错误；<code>resolve</code>函数的参数除了正常的值以外，还可能是另一个<code>Promise</code> 实例。</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果<code>p2</code>的<code>resolve</code>方法将<code>p1</code>作为参数，<code>p1</code>的状态决定了<code>p2</code>的状态。如果<code>p1</code>的状态是<code>pending</code>，那么<code>p2</code>的回调函数就会等待<code>p1</code>的状态改变；如果<code>p1</code>的状态已经是<code>resolved</code>或者<code>rejected</code>，那么<code>p2</code>的回调函数将会立刻执行。\n由于<code>p2</code>返回的是另一个 <code>Promise</code>，导致<code>p2</code>自己的状态无效了，由<code>p1</code>的状态决定<code>p2</code>的状态。\n注意：<code>resolve</code>函数传递不同参数生成<code>Promise</code>对象的不同情况可以参考<code>Promise.resolve</code>的用法。<code>reject</code>函数传递不同参数生成<code>Promise</code>对象的不同情况可以参考<code>Promise.reject</code>的用法。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><h2> 原型方法</h2>\n<h3> Promise.prototype.then(onFulfilled, onRejected)</h3>\n<ol>\n<li>语法\n<code>p.then(onFulfilled, onRejected);</code>\n<code>p.then((value) =&gt; {// fulfillment}, (reason) =&gt; {// rejection});</code></li>\n<li>含义\n为 <code>Promise</code>实例添加状态改变时的回调函数。<code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数，第二个参数（可选）是<code>rejected</code>状态的回调函数。</li>\n<li>链式操作\n<code>then</code>方法返回的是一个新的<code>promise</code>，因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法。</li>\n</ol>\n<div class=\"language-tsx line-numbers-mode\" data-ext=\"tsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：①不管是<code>then</code>方法的<code>onfulfilled</code>函数参数执行还是<code>onrejected</code>（可选参数）函数参数执行，<code>then</code>方法返回的都是一个新的<code>Promise</code>对象，都可以继续采用链式写法调用另一个<code>then</code>方法。②<code>Promise.prototype.catch()</code>方法返回的也是一个<code>Promise</code>对象。<code>then</code>方法和<code>catch</code>方法可以链式操作。</p>\n<ol>\n<li>返回值\n<code>then</code>方法返回一个<code>Promise</code>，而它的行为与<code>then</code>中的被调用的回调函数(<code>onfulfilled</code>函数/<code>onrejected</code>函数)的返回值有关。\n(1) 如果<code>then</code>中的回调函数返回一个值，那么<code>then</code>返回的<code>Promise</code>将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。</li>\n</ol>\n<div class=\"language-tsx\" data-ext=\"tsx\"></div><p>(2) 如果<code>then</code>中的回调函数抛出一个错误，那么<code>then</code>返回的<code>Promise</code>将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。</p>\n<div class=\"language-tsx\" data-ext=\"tsx\"></div><p>(3) 如果<code>then</code>中的回调函数返回一个已经是接受状态的<code>Promise</code>，那么<code>then</code>返回的<code>Promise</code>也会成为接受状态，并且将那个<code>Promise</code>的接受状态的回调函数的参数值作为该被返回的<code>Promise</code>的接受状态回调函数的参数值。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><p>(4) 如果<code>then</code>中的回调函数返回一个已经是拒绝状态的<code>Promise</code>，那么<code>then</code>返回的<code>Promise</code>也会成为拒绝状态，并且将那个<code>Promise</code>的拒绝状态的回调函数的参数值作为该被返回的<code>Promise</code>的拒绝状态回调函数的参数值。</p>\n<div class=\"language-tsx\" data-ext=\"tsx\"></div><p>(5) 如果<code>then</code>中的回调函数返回一个未定状态（<code>pending</code>）的<code>Promise</code>，那么<code>then</code>返回<code>Promise</code>的状态也是未定的，并且它的终态与那个<code>Promise</code>的终态相同；同时，它变为终态时调用的回调函数参数与那个<code>Promise</code>变为终态时的回调函数的参数是相同的。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><p>注意：这里是<code>then</code>方法中被调用回调函数的返回值与<code>then</code>方法返回的<code>Promise</code>对象状态之间的关系。</p>\n<h3> Promise.prototype.catch(onRejected)</h3>\n<ol>\n<li>语法</li>\n</ol>\n<div class=\"language-php\" data-ext=\"php\"></div><ol>\n<li>含义\n<code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数，返回一个新的<code>promise</code>对象。</li>\n<li>用法</li>\n</ol>\n<div class=\"language-tsx line-numbers-mode\" data-ext=\"tsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：由于<code>.catch</code>方法是<code>.then(null, rejection)</code>的别名，故<code>.then</code>中的链式操作(3)、返回值(4)等语法在<code>.catch</code>中都适用。</p>\n<ol>\n<li>一般总是建议，<code>Promise</code> 对象后面要跟<code>catch</code>方法，这样可以处理 <code>Promise</code>内部发生的错误。<code>catch</code>方法返回的还是一个 <code>Promise</code> 对象，因此后面还可以接着调用<code>then</code>方法。</li>\n<li><code>Promise</code>对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。 即：当前<code>catch</code>方法可以捕获上一个<code>catch</code>方法(包括上一个<code>catch</code>)到当前<code>catch</code>(不包括当前<code>catch</code>)方法之间所有的错误，如果没有错误，则当前<code>catch</code>方法不执行。</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>一般来说，不要在<code>then</code>方法里面定义<code>Reject</code>状态的回调函数（即<code>then</code>的第二个参数），总是使用<code>catch</code>方法。</li>\n</ol>\n<div class=\"language-tsx\" data-ext=\"tsx\"></div><p>上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面<code>then</code>方法执行中的错误，也更接近同步的写法。</p>\n<ol>\n<li>与传统的<code>try/catch</code>代码块不同的是，即使没有使用<code>catch</code>方法指定错误处理的回调函数，<code>Promise</code> 对象抛出的错误也不会中止外部脚本运行。</li>\n</ol>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><ol>\n<li>在异步函数中抛出的错误不会被<code>catch</code>捕获到</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>在<code>resolve()</code>后面抛出的错误会被忽略</li>\n</ol>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><h2> 静态方法</h2>\n<h3> Promise.all(iterable)</h3>\n<ol>\n<li>语法\n<code>var p = Promise.all([p1, p2, p3]);</code></li>\n<li>含义\n<code>Promise.all</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 <code>Promise</code> 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为 <code>Promise</code> 实例，再进一步处理。（<code>Promise.all</code>方法的参数可以不是数组，但必须具有 <code>Iterator</code> 接口，且返回的每个成员都是 <code>Promise</code> 实例。）\n<code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。\n(1) 只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。\n(2) 只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</li>\n<li>用法</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Promise.race(iterable)</h3>\n<ol>\n<li>语法\n<code>var p = Promise.race([p1, p2, p3]);</code></li>\n<li>含义\n<code>Promise.race</code>方法同样是将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例。只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 <code>Promise</code> 实例的返回值，就传递给<code>p</code>的回调函数。\n<code>Promise.race</code>方法的参数与<code>Promise.all</code>方法一样，如果不是 <code>Promise</code> 实例，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为<code>Promise</code>实例，再进一步处理。</li>\n<li>用法</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Promise.resolve(value)</h3>\n<ol>\n<li>语法</li>\n</ol>\n<div class=\"language-css\" data-ext=\"css\"></div><p><code>Promise.resolve</code>等价于下面的写法。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><ol>\n<li>含义\n返回一个状态由给定<code>value</code>决定的<code>Promise</code>实例。</li>\n<li>用法\n(1) 如果该值是一个<code>Promise</code>对象，则直接返回该对象；</li>\n</ol>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><p>(2) 如果参数是<code>thenable</code>对象(即带有<code>then</code>方法的对象)，则返回的<code>Promise</code>对象的最终状态由<code>then</code>方法的执行决定；</p>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><p>(3) 如果参数是不具有<code>then</code>方法的对象或基本数据类型，则返回的<code>Promise</code>对象的状态为<code>fulfilled</code>，并且将该参数传递给<code>then</code>方法。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><p>(4) 如果不带有任何参数，则返回的<code>Promise</code>对象的状态为<code>fulfilled</code>，并且将<code>undefined</code>作为参数传递给<code>then</code>方法。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><ol>\n<li>通常而言，如果你不知道一个值是否是<code>Promise</code>对象，使用<code>Promise.resolve(value)</code> 来返回一个<code>Promise</code>对象,这样就能将该<code>value</code>以<code>Promise</code>对象形式使用。</li>\n<li>立即<code>resolve</code>的<code>Promise</code>对象，是在本轮“事件循环”（<code>event loop</code>）的结束时，而不是在下一轮“事件循环”的开始时。</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注释：<a href=\"https://www.cnblogs.com/wangziye/p/9566454.html\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 宏任务和微任务</a>\n注意：<code>setTimeout</code>为新开一个宏任务，<code>Promise.resolve()</code>为添加一个微任务。</p>\n<h3> Promise.reject(reason)</h3>\n<ol>\n<li>语法</li>\n</ol>\n<div class=\"language-css\" data-ext=\"css\"></div><p><code>Promise.reject</code>等价于下面的写法。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\"></div><ol>\n<li>含义\n返回一个状态为<code>rejected</code>的<code>Promise</code>对象，并将给定的失败信息传递给对应的处理方法。</li>\n</ol>\n<blockquote>\n<p><strong>注意：<code>Promise.resolve(value)</code>方法返回的<code>Promise</code>实例的状态由<code>value</code>决定，可能是<code>fulfilled</code>，也可能是<code>rejected</code>。<code>Promise.reject(reason)</code>方法返回的<code>Promise</code>实例的状态一定是<code>rejected</code>。</strong></p>\n</blockquote>\n<ol>\n<li>用法</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li><code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数。这一点与<code>Promise.resolve</code>方法不一致。</li>\n</ol>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<ol>\n<li><code>then()</code>方法、<code>catch()</code>方法是<code>Promise()</code>对象的原型方法，被<code>Promise</code>对象调用，返回值是一个<code>Promise</code>对象。</li>\n<li><code>all()</code>、<code>race()</code>、<code>reject()</code>、<code>resolve()</code>方法是<code>Promise</code>类的静态方法，被<code>Promise</code>类调用，返回值也是一个<code>Promise</code>对象。</li>\n<li>使用<code>new Promise((resolve, reject)=&gt;{});</code>的方式创建<code>Promise</code>对象时，如果构造函数中传递的不是<code>function</code>类型，则会报错。</li>\n<li><code>new Promise((resolve, reject)=&gt;{})</code>的方式创建<code>Promise</code>对象时，调用<code>resolve</code>或<code>reject</code>函数时传递不同参数类型时该<code>Promise</code>对象的状态分析及其参数传递的不同情况分析。</li>\n<li><code>p.then((result)=&gt;{})</code>或<code>p.catch((err)=&gt;{})</code>方法调用时返回的<code>Promise</code>对象的状态及其参数传递的不同情况分析。</li>\n<li><code>Promise.resolve(value)</code>方法调用时返回的<code>Promise</code>对象的状态及其参数传递的不同情况分析。</li>\n</ol>\n<h2> 参考</h2>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener noreferrer\">ECMAScript 6 入门</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener noreferrer\">MDN-Promise</a></p>\n",
      "date_published": "2021-10-16T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Python中循环代码优化",
      "url": "https://blog.yzketx.online/daily/Python-loop.html",
      "id": "https://blog.yzketx.online/daily/Python-loop.html",
      "summary": "Python中循环代码优化",
      "content_html": "<h1> Python中循环代码优化</h1>\n<p>编写循环时，遵循下面三个原则可以大大提高运行效率，避免不需要的低效计算：</p>\n<p>1、尽量减少循环内部不必要的计算</p>\n<p>2、嵌套循环中，尽量减少内层循环的计算，尽可能的将计算往外层提</p>\n<p>3、局部变量查询较快，尽量使用局部变量。</p>\n<p>其他优化手段：</p>\n<p>1、连接多个字符串时，使用join()而不使用+（因为+会产生新的字符串对象）</p>\n<p>2、列表进行元素插入和删除，尽量在列表尾部操作</p>\n<p>3、充分运用 pandas、numpy、scipy 等库及其数据结构</p>\n<p>4、对于计算问题，<em>动态编译</em></p>\n<div class=\"language-python\" data-ext=\"py\"></div>",
      "date_published": "2021-10-14T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "如何形象说明路由协议RIP和OSPF？",
      "url": "https://blog.yzketx.online/daily/RIP-OSPF.html",
      "id": "https://blog.yzketx.online/daily/RIP-OSPF.html",
      "summary": "如何形象说明路由协议RIP和OSPF？",
      "content_html": "<h1> 如何形象说明路由协议RIP和OSPF？</h1>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/people/chexiaopang\" target=\"_blank\" rel=\"noopener noreferrer\">车小胖</a> 计算机网络话题下的优秀答主</p>\n</blockquote>\n<p><strong>RIP</strong></p>\n<p>RIP协议是基于谣言的消息传播，这话怎么理解呢，先来看一个例子。</p>\n<p>宫廷戏经常有这样的场景，正襟危坐的皇上老大，对下边的太监小弟说：宣隔壁老王觐见！</p>\n<p>太监小弟尖着阳气不足的喉咙喊：宣隔壁老王觐见！（娘娘腔…）</p>\n<p>大厅外的宣令官A听到，丝毫不敢怠慢，用雄厚的男中音喊：宣隔壁老王觐见！</p>\n<p>经过多轮的消息传播，最后消息被宣令官H接收到，然后宣令官喊最后一嗓子：宣隔壁老王觐见！</p>\n<p>于是，诚惶诚恐的隔壁老王被带进了皇宫…</p>\n<p>这是典型的谣言传播的场景，这里的出场人物除了皇上本人、太监，谁都不知道皇上到底说没说“宣隔壁老王觐见”，宣令官遵守的原则是：盲目相信比自己更靠近皇上的宣令官，并将消息传播出去，这就够了。</p>\n<p>如果中途宣令官E打瞌睡，没有听到D的喊声，消息传播就断了，游戏就没法玩了。</p>\n<p><strong>OSPF</strong></p>\n<p>OSPF协议，类似车载导航系统，将每条道路都收集到自己的数据库里。当计算上海到北京的最短路径时，有以下选择：</p>\n<p>（1）沈海高速—长深高速—荣乌高速—京沪高速</p>\n<p>（2）京沪高速—滨莱高速—荣乌高速</p>\n<p>（3）京沪高速—泰新高速—京台高速—廊沧高速</p>\n<p>第一条路径最短，优先选择。如果遇到中途“荣乌高速”严重堵车，可以提前切换到京沪高速，提高通行的效率。</p>\n<p><strong>OSPF比RIP强大的地方是，OSPF对整网的拓扑结构了如指掌，一旦某一条路径断了，可以及时选择备份链路，对通信的影响小。</strong></p>\n<p>RIP是基于谣言，对整网的拓扑结构没有概念，只知道有几个邻居，至于更远的邻居是什么样子，对不起，不知道！</p>\n<p>这样的后果是，当不和自己直连的邻居down掉了、或物理链路down掉了，自己却浑然不知，依然将流量发给自己的直连邻居，直连邻居暗暗叫苦：我的邻居已经down了，让我发给鬼啊？ 没办法，丢了丢了…</p>\n<p>经过一段相对漫长的时间，down掉的路由器或链路终于被大家发现了，因为自己的邻居不再散播这条谣言了，于是路由器纷纷使用更优的谣言来转发流量！</p>\n",
      "date_published": "2021-11-16T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Redis 缓存问题解释",
      "url": "https://blog.yzketx.online/daily/Redis.html",
      "id": "https://blog.yzketx.online/daily/Redis.html",
      "summary": "Redis 缓存问题解释 2种可持续化策略",
      "content_html": "<h1> Redis 缓存问题解释</h1>\n<p>2种可持续化策略</p>\n<hr>\n<h2> <strong>缓存雪崩</strong></h2>\n<p>是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至宕机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p>\n<blockquote>\n<p>面试官追问：缓存雪崩有什么解决方法？</p>\n</blockquote>\n<ol>\n<li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li>\n<li>采用 Redis 集群。如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中，避免单机出现问题整个缓存服务都没办法使用。</li>\n<li>设置热点数据永远不过期。</li>\n</ol>\n<h2> <strong>缓存击穿</strong></h2>\n<p>是指某一个热点数据缓存中没有但数据库中有数据（一般是缓存时间到期）。这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p>\n<blockquote>\n<p>面试官追问：缓存击穿你会怎么解决？</p>\n</blockquote>\n<ol>\n<li>设置热点数据永远不过期。</li>\n<li>接口限流与熔断，降级。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要降级准备，当接口中的某些服务不可用时候，进行熔断，失败快速返回机制。</li>\n<li>设置互斥锁。在并发的多个请求中，只有第一个请求线程能拿到锁并执行数据库查询操作，其他的线程拿不到锁就阻塞等着，等到第一个线程将数据写入缓存后，直接走缓存。（可以使用 Redis 分布式锁）</li>\n</ol>\n<h2> <strong>缓存穿透</strong></h2>\n<p>是指缓存和数据库中都没有的数据。此时请求会直接打到数据库上，并且数据库查不到数据，也没办法写入缓存，所以下一次请求同样会打到数据库上。此时，缓存起不到作用，请求每次都会走到数据库，流量大时数据库可能会被打挂。此时缓存就好像被“穿透”了一样，起不到任何作用！</p>\n<p>举个例子：某个黑客故意制造我们缓存中不存在的 key 发起大量请求，导致大量请求落到数据库。</p>\n<blockquote>\n<p>面试官追问：缓存穿透怎么解决？</p>\n</blockquote>\n<ol>\n<li>接口层增加校验。如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截。</li>\n<li>缓存无效key。从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击。</li>\n<li>布隆过滤器。bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小。</li>\n</ol>\n",
      "date_published": "2021-01-13T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "协程",
      "url": "https://blog.yzketx.online/daily/Synergetic-process.html",
      "id": "https://blog.yzketx.online/daily/Synergetic-process.html",
      "summary": "协程 **协程，英文Coroutines，是一种比线程更加轻量级的存在。**正如一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程。",
      "content_html": "<h1> 协程</h1>\n<blockquote>\n<p>**协程，英文Coroutines，是一种比线程更加轻量级的存在。**正如一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程。</p>\n</blockquote>\n<h2> 什么是进程和线程</h2>\n<p><strong>进程是什么呢？</strong></p>\n<p>直白地讲，进程就是应用程序的启动实例。比如我们运行一个游戏，打开一个软件，就是开启了一个进程。</p>\n<p>进程拥有代码和打开的文件资源、数据资源、独立的内存空间。</p>\n<p><strong>线程又是什么呢？</strong></p>\n<p>线程从属于进程，是程序的实际执行者。一个进程至少包含一个主线程，也可以有更多的子线程。</p>\n<p>线程拥有自己的栈空间。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110241608412.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>有人给出了很好的归纳：</p>\n<p><strong>对操作系统来说，线程是最小的执行单元，进程是最小的资源管理单元。</strong></p>\n<p>无论进程还是线程，都是由<strong>操作系统</strong>所管理的。</p>\n<p>Java中线程具有五种状态：</p>\n<p><strong>初始化</strong>、<strong>可运行</strong>、<strong>运行中</strong>、<strong>阻塞</strong>、<strong>销毁</strong></p>\n<p>这五种状态的转化关系如下：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110241612974.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>但是，线程不同状态之间的转化是谁来实现的呢？是JVM吗？</p>\n<p>并不是。JVM需要通过操作系统内核中的TCB（Thread Control Block）模块来改变线程的状态，这一过程需要耗费一定的CPU资源。</p>\n<h2> 进程和线程的痛点</h2>\n<p>线程之间是如何进行协作的呢？</p>\n<p>最经典的例子就是<strong>生产者/消费者模式</strong>：</p>\n<p>若干个生产者线程向队列中写入数据，若干个消费者线程从队列中消费数据。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110241613133.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>如何用java语言实现生产者/消费者模式呢？</p>\n<p>让我们来看一看代码：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这段代码做了下面几件事：</p>\n<ol>\n<li>\n<p>定义了一个生产者类，一个消费者类。</p>\n</li>\n<li>\n<p>生产者类循环100次，向同步队列当中插入数据。</p>\n</li>\n<li>\n<p>消费者循环监听同步队列，当队列有数据时拉取数据。</p>\n</li>\n<li>\n<p>如果队列满了（达到5个元素），生产者阻塞。</p>\n</li>\n<li>\n<p>如果队列空了，消费者阻塞。</p>\n</li>\n</ol>\n<p>上面的代码正确地实现了生产者/消费者模式，但是却并不是一个高性能的实现。为什么性能不高呢？原因如下：</p>\n<ol>\n<li>\n<p>涉及到同步锁。</p>\n</li>\n<li>\n<p>涉及到线程阻塞状态和可运行状态之间的切换。</p>\n</li>\n<li>\n<p>涉及到线程上下文的切换。</p>\n</li>\n</ol>\n<p>以上涉及到的任何一点，都是非常耗费性能的操作。</p>\n<h2> 协程的优势</h2>\n<p><strong>什么是协程</strong></p>\n<p><strong>协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。</strong></p>\n<p>这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。</p>\n<p>协程与进程、线程相比不是一个维度的概念，但是有时候，我们仍然需要将它们做一番比较，具体如下：</p>\n<ol>\n<li>\n<p>协程既不是进程，也不是线程，协程仅仅是一个特殊的函数，协程跟他们就不是一个维度。</p>\n</li>\n<li>\n<p>一个进程可以包含多个线程，一个线程可以包含多个协程。</p>\n</li>\n<li>\n<p>一个线程内的多个协程虽然可以切换，但是这多个协程是串行执行的，只能在这一个线程内运行，没法利用CPU多核能力。</p>\n</li>\n</ol>\n<p>4 协程与进程、线程一样，它们的切换都存在上下文切换问题。</p>\n<p>表面上，进程、线程、协程都存在上下文切换的问题，但是三者上下文切换又有明显不同，见下表：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110241622875.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<h2> 协程的使用场景</h2>\n<p><strong>一个线程内的多个协程是串行执行的</strong>，不能利用多核，所以，显然，协程不适合计算密集型的场景。<strong>协程适合I/O 阻塞型。</strong></p>\n<p>I/O本身就是阻塞型的（相较于CPU的时间世界而言）。就目前而言，无论I/O的速度多快，也比不上CPU的速度，所以一个I/O相关的程序，当其在进行I/O操作时候，CPU实际上是空闲的。</p>\n<p>我们假设这样的场景，如下图：1个线程有5个I/O的事情（子程序）要处理。如果我们绝对的串行化，那么当其中一个I/O阻塞时，其他4个I/O并不能得到执行，因为程序是绝对串行的，5个I/O必须一个一个排队等待处理，当一个I/O阻塞时，其它4个也得等着。</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110241624748.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>而协程能比较好地处理这个问题，当一个协程（特殊子进程）阻塞时，它可以切换到其他没有阻塞的协程上去继续执行，这样就能得到比较高的效率，如下图所示：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110241624875.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>上面举的例子是5个I/O处理，如果每秒500个，5万个或500万个呢？已经达到了“I/O密集型”的程度，而**“I/O密集型”确实是协程无法应付的，因为它没有利用多核的能力。这个时候的解决方案就是“多进程+协程”了。**</p>\n<p>所以说，I/O阻塞时，利用协程来处理确实有优点（切换效率比较高），但是我们也需要看到其不能利用多核的这个缺点，必要的时候，还需要使用综合方案：多进程+协程。</p>\n<h2> <a href=\"https://mp.weixin.qq.com/s/7nAs1T4hh_lGpEEEYjTVDg\" target=\"_blank\" rel=\"noopener noreferrer\">Kotlin Jetpack 实战：图解协程原理</a></h2>\n<h2> 个人理解</h2>\n<p>Kotlin 的协程，核心在于其内部新定义实现的<em>单例</em> 子类 <code>ContinuationImpl</code>，本质为 CPS + 状态机，核心使得本质运行。</p>\n<p><code>ContinuationImpl</code> 实现了对状态机的状态的标识，<code>invokeSuspend()</code> 回调函数对 <code>CPS</code>(<code>this</code>) 的回调。</p>\n<p>大致步骤如下：</p>\n<ol>\n<li>\n<p>对各挂起函数 ( <code>suspend</code> 修饰 ) 进行 <code>CPS转换</code> ( <code>Continuation-Passing-Style Transformation</code> )</p>\n</li>\n<li>\n<p>为 continuation 参数赋值，如果该值为 <code>ContinuationImpl</code> 类型，则延用该类，否则调用定义的子类 <code>ContinuationImpl</code> 进行包装 ( 一般只要在初次赋值包装 )。</p>\n</li>\n<li>\n<p>进入 <code>whe(continuation.label){ x -&gt; {}}</code> 状态机判断，更新状态标记 <code>label</code> 并调用<strong>IO线程</strong>执行挂起函数体，其中挂起函数 <code>withContext(Dispatchers.IO){ x }</code> 的调用将直接返回 <strong>挂起状态码</strong>，状态机状态机检测到该值后，将响应挂起函数的回调。</p>\n</li>\n<li>\n<p>若加入 <code>suspend</code> 修饰的函数中不包含 <code>withContext(Dispatchers.IO){ x }</code> 实现挂起进程，则该函数为<strong>伪函数</strong>，状态机将判断其未进入挂起状态，通过跳转到 <code>when</code> 前的 <code>label</code> 赋值进入下一状态，也即该函数还是在<strong>主线程</strong>完成的。</p>\n</li>\n<li>\n<p>循环往复，直至到达最终状态为止。</p>\n</li>\n</ol>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110241608412.jpeg",
      "date_published": "2021-10-24T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "TCP 握手",
      "url": "https://blog.yzketx.online/daily/TCP.html",
      "id": "https://blog.yzketx.online/daily/TCP.html",
      "summary": "TCP 握手 链接：https://www.nowcoder.com/questionTerminal/ec843c8a27c84a7693865f55a71a7e8c 来源：牛客网",
      "content_html": "<h1> TCP 握手</h1>\n<blockquote>\n<p>链接：<a href=\"https://www.nowcoder.com/questionTerminal/ec843c8a27c84a7693865f55a71a7e8c\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.nowcoder.com/questionTerminal/ec843c8a27c84a7693865f55a71a7e8c</a></p>\n<p>来源：牛客网</p>\n</blockquote>\n<p><strong>三次握手的最主要目的是保证连接是双工的，可靠更多的是通过重传机制来保证的。</strong></p>\n<p>​      但是为什么一定要进行三次握手来保证连接是双工的呢，一次不行么？两次不行么？我们举一个现实生活中两个人进行语言沟通的例子来模拟三次握手。</p>\n<p>​      <strong>第一次对话：</strong></p>\n<p>​    老婆让甲出去打酱油，半路碰到一个朋友乙，甲问了一句：哥们你吃饭了么？</p>\n<p>结果乙带着耳机听歌呢，根本没听到，没反应。甲心里想：跟你说话也没个音，不跟你说了，沟通失败。说明乙接受不到甲传过来的信息的情况下沟通肯定是失败的。</p>\n<p>如果乙听到了甲说的话，那么第一次对话成功，接下来进行第二次对话。</p>\n<p>​      <strong>第二次对话：</strong></p>\n<p>​     乙听到了甲说的话，但是他是老外，中文不好，不知道甲说的啥意思也不知道怎样回答，于是随便回答了一句学过的中文  ：我去厕所了。甲一听立刻笑喷了，“去厕所吃饭”?道不同不相为谋，离你远点吧，沟通失败。说明乙无法做出正确应答的情况下沟通失败。</p>\n<p>如果乙听到了甲的话，做出了正确的应答，并且还进行了反问：我吃饭了，你呢？那么第二次握手成功。</p>\n<p>**通过前两次对话证明了乙能够听懂甲说的话，并且能做出正确的应答。**接下来进行第三次对话。</p>\n<p>​      <strong>第三次对话：</strong></p>\n<p>甲刚和乙打了个招呼，突然老婆喊他，“你个死鬼，打个酱油咋这么半天，看我回家咋收拾你”，甲是个妻管严，听完吓得二话不说就跑回家了，把乙自己晾那了。乙心想：这什么人啊，得，我也回家吧，沟通失败。说明甲无法做出应答的情况下沟通失败。</p>\n<p>如果甲也做出了正确的应答：我也吃了。那么第三次对话成功，两人已经建立起了顺畅的沟通渠道，接下来开始持续的聊天。</p>\n<p><strong>通过第二次和第三次的对话证明了甲能够听懂乙说的话，并且能做出正确的应答。</strong></p>\n<p>可见，两个人进行有效的语言沟通，这三次对话的过程是必须的。</p>\n<p>同理对于TCP为什么需要进行三次握手我们可以一样的理解：</p>\n<p>​            <strong>为了保证服务端能收接受到客户端的信息并能做出正确的应答而进行前两次(第一次和第二次)握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次(第二次和第三次)握手。</strong></p>\n<h2> 为什么四报文挥手客户端发完ACK后需要有2MSL的TIME-WAIT</h2>\n<p><code>MSL</code> 是 Maximum Segment Lifetime，<strong>报文最大生存时间</strong>，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。因为 TCP 报文基于是 IP 协议的，而 IP 头中有一个 <code>TTL</code> 字段，是 IP 数据报可以经过的最大路由数，每经过一个处理他的<a href=\"https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">路由器</a>此值就减 1，当此值为 0 则数据报将被丢弃，同时发送 ICMP 报文通知源主机。</p>\n<p>MSL 与 TTL 的区别： MSL 的单位是时间，而 TTL 是经过路由跳数。所以 <strong>MSL 应该要大于等于 TTL 消耗为 0 的时间</strong>，以确保报文已被自然消亡。</p>\n<p>2MSL 的时间是从**<a href=\"https://www.zhihu.com/search?q=%E5%AE%A2%E6%88%B7%E7%AB%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">客户端</a>接收到 FIN 后发送 ACK 开始计时的**。如果在 TIME-WAIT 时间内，因为客户端的 ACK 没有传输到服务端，客户端又接收到了服务端重发的 FIN 报文，那么 <strong>2MSL 时间将重新计时</strong>。</p>\n<p>下面我们开始分析为什么在发送了最后一个ACK报文之后需要等待2MSL时长来确保没有任何属于当前连接的报文还存活于网络之中（前提是在这2MSL时间内不再收到对方的FIN报文，但即使收到了对端的FIN报文也并不影响我们的讨论，因为如果收到FIN则会回复ACK并重新计时）。</p>\n<p>为了便于描述，我们设想有一个处于断开过程中的TCP连接，这个连接的两端分别是A和B，其中A是主动关闭连接的一端，因为刚刚向对端发送了针对对端发送过来的FIN报文的ACK，此时正处于TIME_WAIT状态；而B是被动关闭的一端，此时正处于LAST_ACK状态，在收到最后一个ACK之前它会一直重传FIN报文直至超时。随着时间的流逝，A发送给B的ACK报文将会有两种结局：</p>\n<ol>\n<li>ACK报文在网络中丢失；如前所述，这种情况我们不需要考虑，因为除非多次重传失败，否则AB两端的状态不会发生变化直至某一个ACK不再丢失。</li>\n<li>ACK报文被B接收到。我们假设A发送了ACK报文后过了一段时间t之后B才收到该ACK，则有 0 &lt; t &lt;= MSL。因为A并不知道它发送出去的ACK要多久对方才能收到，所以A至少要维持MSL时长的TIME_WAIT状态才能保证它的ACK从网络中消失。同时处于LAST_ACK状态的B因为收到了ACK，所以它直接就进入了CLOSED状态，而不会向网络发送任何报文。所以晃眼一看，A只需要等待1个MSL就够了，但仔细想一下其实1个MSL是不行的，因为在B收到ACK前的一刹那，B可能因为没收到ACK而重传了一个FIN报文，这个FIN报文要从网络中消失最多还需要一个MSL时长，所以A还需要多等一个MSL。</li>\n</ol>\n<p>综上所述，<strong>TIME_WAIT至少需要持续2MSL时长，这2个MSL中的第一个MSL是为了等自己发出去的最后一个ACK从网络中消失，而第二MSL是为了等在对端收到ACK之前的一刹那可能重传的FIN报文从网络中消失。</strong></p>\n<p>可以看到 <strong>2MSL时长</strong> 这其实是相当于<strong>至少允许报文丢失一次</strong>。比如，若 ACK 在一个 MSL 内丢失，这样被动方重发的 FIN 会在第 2 个 MSL 内到达，TIME_WAIT 状态的连接可以应对。</p>\n<p>为什么不是 4 或者 8 MSL 的时长呢？你可以想象一个丢包率达到百分之一的糟糕网络，连续两次丢包的概率只有万分之一，这个概率实在是太小了，忽略它比解决它更具性价比。</p>\n<p>在 Linux 系统里 <code>2MSL</code> 默认是 <code>60</code> 秒，那么一个 <code>MSL</code> 也就是 <code>30</code> 秒。<strong>Linux 系统停留在 TIME_WAIT 的时间为固定的 60 秒</strong>。</p>\n<p>其定义在 Linux 内核代码里的名称为 TCP_TIMEWAIT_LEN：</p>\n<div class=\"language-text\" data-ext=\"text\"></div><p>如果要修改 TIME_WAIT 的时间长度，只能修改 Linux <a href=\"https://www.zhihu.com/search?q=%E5%86%85%E6%A0%B8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">内核</a>代码里 TCP_TIMEWAIT_LEN 的值，并重新编译 Linux 内核。</p>\n<blockquote>\n<p>“ 为什么需要 TIME_WAIT 状态？”</p>\n</blockquote>\n<p>主动发起关闭连接的一方，才会有 <code>TIME-WAIT</code> 状态。</p>\n<p>需要 TIME-WAIT 状态，主要是两个原因：</p>\n<ul>\n<li>防止具有相同「四元组」的「旧」数据包被收到；</li>\n<li>保证「<a href=\"https://www.zhihu.com/search?q=%E8%A2%AB%E5%8A%A8%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">被动关闭连接</a>」的一方能被正确的关闭，即保证最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭；</li>\n</ul>\n<p><em>原因一：防止旧连接的数据包</em></p>\n<p>假设 TIME-WAIT 没有等待时间或时间过短，被延迟的数据包抵达后会发生什么呢？</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202112091645763.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<blockquote>\n<p>yzk：这里第4次  FIN 应当是 0</p>\n</blockquote>\n<ul>\n<li>如上图黄色框框<a href=\"https://www.zhihu.com/search?q=%E6%9C%8D%E5%8A%A1%E7%AB%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">服务端</a>在关闭连接之前发送的 <code>SEQ = 301</code> 报文，被网络延迟了。</li>\n<li>这时有相同<a href=\"https://www.zhihu.com/search?q=%E7%AB%AF%E5%8F%A3&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">端口</a>的 TCP 连接被复用后，被延迟的 <code>SEQ = 301</code> 抵达了客户端，那么客户端是有可能正常接收这个过期的报文，这就会产生<a href=\"https://www.zhihu.com/search?q=%E6%95%B0%E6%8D%AE%E9%94%99%E4%B9%B1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">数据错乱</a>等严重的问题。</li>\n</ul>\n<p>所以，TCP 就设计出了这么一个机制，经过 <code>2MSL</code> 这个时间，<strong>足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的。</strong></p>\n<p><em>原因二：保证连接正确关闭</em></p>\n<p>在 RFC 793 指出 <a href=\"https://www.zhihu.com/search?q=TIME-WAIT&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">TIME-WAIT</a> 另一个重要的作用是：</p>\n<p><em>TIME-WAIT - represents waiting for enough time to pass to be sure the remote TCP received the acknowledgment of its connection termination request.</em></p>\n<p>也就是说，TIME-WAIT 作用是<strong>等待足够的时间以确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭。</strong></p>\n<p>假设 TIME-WAIT 没有等待时间或时间过短，<a href=\"https://www.zhihu.com/search?q=%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2005038284%7D\" target=\"_blank\" rel=\"noopener noreferrer\">断开连接</a>会造成什么问题呢？</p>\n<figure><img src=\"https://pic1.zhimg.com/80/v2-6a44dd001ef2ece18297121c90305861_720w.jpg?source=1940ef5c\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<ul>\n<li>如上图红色框框客户端四次挥手的最后一个 <code>ACK</code> 报文如果在网络中被丢失了，此时如果客户端 <code>TIME-WAIT</code> 过短或没有，则就直接进入了 <code>CLOSED</code> 状态了，那么服务端则会一直处在 <code>LASE_ACK</code> 状态。</li>\n<li>当客户端发起建立连接的 <code>SYN</code> 请求报文后，服务端会发送 <code>RST</code> 报文给客户端，连接建立的过程就会被终止。</li>\n</ul>\n<p>如果 TIME-WAIT 等待足够长的情况就会遇到两种情况：</p>\n<ul>\n<li>服务端正常收到四次挥手的最后一个 <code>ACK</code> 报文，则服务端正常关闭连接。</li>\n<li>服务端没有收到四次挥手的最后一个 <code>ACK</code> 报文时，则会重发 <code>FIN</code> 关闭连接报文并等待新的 <code>ACK</code> 报文。</li>\n</ul>\n<p>所以客户端在 <code>TIME-WAIT</code> 状态等待 <code>2MSL</code> 时间后，就可以<strong>保证双方的连接都可以正常的关闭。</strong></p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202112091645763.jpeg",
      "date_published": "2021-12-09T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Ubuntu",
      "url": "https://blog.yzketx.online/daily/Ubuntu.html",
      "id": "https://blog.yzketx.online/daily/Ubuntu.html",
      "summary": "Ubuntu Ubuntu crontab 自动任务配置",
      "content_html": "<h1> Ubuntu</h1>\n<h2> Ubuntu crontab 自动任务配置</h2>\n<blockquote>\n<p>对于可能涉及的脚本文件、代码源文件，其中所有需要用到的文件路径请使用 <strong>绝对路径</strong> ！！！</p>\n</blockquote>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h2> 默认开启或关闭图形化桌面</h2>\n<div class=\"language-bash\" data-ext=\"sh\"></div>",
      "date_published": "2020-01-15T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Vim Intro",
      "url": "https://blog.yzketx.online/daily/Vim.html",
      "id": "https://blog.yzketx.online/daily/Vim.html",
      "summary": "Vim Intro Vim是Vi的增强版本，在不正式的情况下，两者是一回事。 Vim是所有UNIX和Linux系统下的标准软件。",
      "content_html": "<h1> Vim Intro</h1>\n<blockquote>\n<p>Vim是Vi的增强版本，在不正式的情况下，两者是一回事。</p>\n<p>Vim是所有UNIX和Linux系统下的标准软件。</p>\n</blockquote>\n<h3> 两种模式/编辑和保存</h3>\n<ul>\n<li>\n<p><code>vim file</code> : 对文件用vim编辑器进行编辑。如果文件不存在，Vim将自动创建文件。</p>\n<ul>\n<li><code>vim</code> : 不带参数的vim自动打开编辑器。</li>\n</ul>\n</li>\n<li>\n<p>vim分为 插入 和 命令 两种模式，启动时自动处于命令模式。</p>\n<ul>\n<li>按 <code>I</code> 键进入<strong>插入模式</strong>，此模式下可以输入字符;</li>\n<li>按 <code>Esc</code> 键进入<strong>命令模式</strong>，此模式下执行除了字符操作以外的所有操作，包括保存、搜索、移动光标等。</li>\n</ul>\n</li>\n<li>\n<p>命令模式下，输入 <code>:</code> 在底部打开一个命令行，此时光标闪烁输入，等待用户输入。</p>\n</li>\n<li>\n<p><code>H、J、K、L</code> : 分别代表向左、下、上、右移动。当然使用方向键也是可以的。</p>\n</li>\n<li>\n<p><code>O</code> : 在当前行下插入一行空白行。</p>\n</li>\n<li>\n<p><code>w</code> : 保存，</p>\n</li>\n<li>\n<p><code>q</code> : 退出，</p>\n</li>\n<li>\n<p><code>wq</code> : 保存且退出，</p>\n</li>\n<li>\n<p><code>q!</code> : 强制退出。</p>\n</li>\n</ul>\n<h3> 搜索字符串</h3>\n<ul>\n<li>\n<p><code>/string</code> : 用于搜索一个字符串，输入 <code>/</code> 后，vim底部也会出现一个命令行。</p>\n</li>\n<li>\n<p>vim的搜索可以循环进行，<code>/</code> 命令向前(文件尾)查找，<code>?</code> 命令向后(向文件头)查找。</p>\n</li>\n<li>\n<p>对大小写是否敏感：</p>\n<ul>\n<li><code>:set ignorecase</code> 命令vim忽略大小写;</li>\n<li><code>:set noignorecase</code> 命令vim重新开启大小写敏感。</li>\n</ul>\n</li>\n</ul>\n<h3> 替换字符串</h3>\n<ul>\n<li>\n<p><code>:[range]s/pattern/string/[c,e,g,i]</code> : 替换命令的完整语法，将匹配pattern(正则表达式)的字符串替换为string。</p>\n<ul>\n<li>\n<p><code>range</code> 规定替换范围，<code>1,4</code>表示1到4行，<code>1,$</code> 表示1行到最后一行(全文)，<code>%</code>也表示全文。</p>\n</li>\n<li>\n<p>最后方括号内的字符是可选选项，选项含义如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标志</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:center\">每次替换前询问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e</td>\n<td style=\"text-align:center\">不显示错误信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">g</td>\n<td style=\"text-align:center\">替换一行中的所有匹配项（通常需要使用,否则替换第一项）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">i</td>\n<td style=\"text-align:center\">不区分大小写</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p><code>*</code> 清除文本文件中的 <code>^M</code> 字符：由于来自windows环境的源代码对换行符的表述和Linux不一致，因此文末常出现 <code>^M</code> 符号——虽然对程序编译器和解释器没有影响，但在shell编程时会产生问题，此时用 <code>%s/^M$//g</code> 删除行末的 <code>^M</code> 字符。</p>\n</li>\n</ul>\n<h3> 针对程序员的配置</h3>\n<ul>\n<li>\n<p>一些常用的配置命令：</p>\n<ul>\n<li><code>:syntax on</code>打开语法高亮，vim会根据文件扩展名决定哪些为关键字。</li>\n<li><code>:set autoindent</code>设置自动缩进;</li>\n<li><code>:set shiftwidth=4</code>设置自动缩进的空白长度;</li>\n<li><code>:set tabstop=4</code>将tab键缩进设置为4个空格。</li>\n</ul>\n</li>\n<li>\n<p>为避免每次启动vim都要手动输入命令，可以将命令写入vim的配置文件中(文件中不要包含 <code>:</code>)，vim的配置文件为 <code>/etc/vim/vimrc</code> ( <code>/etc</code> 中的文件对系统中所有用户生效)，推荐用户可以新建一个 <code>~/.vimrc</code> 文件在其中写入配置信息，只对当前用户生效。</p>\n<ul>\n<li>通常用户个性化的设置文件都是隐藏文件 ( <code>.</code> 开头的文件 )，且保存在用户主目录下。</li>\n</ul>\n</li>\n</ul>\n<h3> Vim的常用命令总结</h3>\n<ul>\n<li>\n<p>模式切换：</p>\n<ul>\n<li><code>a</code> : 在光标后插入;</li>\n<li><code>i</code> : 在光标所在位置插入;</li>\n<li><code>o</code> : 在光标所在位置下一行插入;</li>\n<li><code>Esc</code> : 进入命令模式;</li>\n<li><code>:</code> : 进入行命令模式。</li>\n</ul>\n</li>\n<li>\n<p>光标移动(名列前加上数字，可以重复多次移动，如 <code>5w</code> )：</p>\n<ul>\n<li><code>h</code>/<code>l</code>/<code>j</code>/<code>k</code> : 光标向左/右/上/下移动;</li>\n<li><code>^</code>/<code>$</code> : 移动光标到行首/尾;</li>\n<li><code>gg</code>/<code>shift+g</code> : 移动光标到文件首/尾;</li>\n<li><code>w</code>/<code>b</code> : 移动到下一个/上一个单词;</li>\n<li><code>ctrl+f</code>/<code>ctrl+b</code> : 向前(文件尾)/后(文件头)翻动一页。</li>\n</ul>\n</li>\n<li>\n<p>删除、复制和粘贴：</p>\n<ul>\n<li><code>x</code> : 删除光标所在位置的字符;</li>\n<li><code>dd</code> : 删除光标所在行;</li>\n<li><code>shift+d</code> : 删除光标所在位置到行尾的所有字符;</li>\n<li><code>d</code> : 和移动命令配合使用的删除命令，如 <code>dw</code> 表示删除光标所在位置到下一个单词之间的所有字符;</li>\n<li><code>yy</code> : 复制光标所在行;</li>\n<li><code>y</code> : 和移动命令配合使用的复制命令;</li>\n<li><code>shift+p</code> : 在光标所在位置粘贴最近复制/删除的内容。</li>\n</ul>\n</li>\n<li>\n<p>撤销和重做：</p>\n<ul>\n<li><code>u</code> : 撤销一次操作;</li>\n<li><code>ctrl+r</code> : 重做被撤销的操作。</li>\n</ul>\n</li>\n<li>\n<p>搜索和替换：</p>\n<ul>\n<li><code>:/string</code> : 向前搜索字符串string;</li>\n<li><code>:?string</code> : 向后搜索字符串string;</li>\n<li><code>:s/pattern/string</code> : 将pattern代表的字符串替换成string。</li>\n</ul>\n</li>\n<li>\n<p>保存和退出：</p>\n<ul>\n<li><code>:w</code> : 保存文件;</li>\n<li><code>:w filename</code> : 另存为filename;</li>\n<li><code>:q</code> : 退出vim;</li>\n<li><code>:!q</code> : 强制退出，放弃保存修改。</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2021-10-20T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Bitmap简介",
      "url": "https://blog.yzketx.online/daily/bitmap.html",
      "id": "https://blog.yzketx.online/daily/bitmap.html",
      "summary": "Bitmap简介",
      "content_html": "<h1> <a href=\"https://www.cnblogs.com/cjsblog/p/11613708.html\" target=\"_blank\" rel=\"noopener noreferrer\">Bitmap简介</a></h1>\n<h2> 1. BitMap</h2>\n<p>Bit-map的基本思想就是用一个bit位来标记某个元素对应的Value，而Key即是该元素。由于采用了Bit为单位来存储数据，因此在存储空间方面，可以大大节省。（PS：划重点 <strong>节省存储空间</strong>）</p>\n<p>假设有这样一个需求：在20亿个随机整数中找出某个数m是否存在其中，并假设32位操作系统，4G内存</p>\n<p>在Java中，int占4字节，1字节=8位（1 byte = 8 bit）</p>\n<p>如果每个数字用int存储，那就是20亿个int，因而占用的空间约为 (2000000000*4/1024/1024/1024)≈<strong>7.45</strong>G</p>\n<p>如果按位存储就不一样了，20亿个数就是20亿位，占用空间约为 (2000000000/8/1024/1024/1024)≈<strong>0.2****33</strong>G</p>\n<p>高下立判，无需多言</p>\n<p>那么，问题来了，如何表示一个数呢？</p>\n<h3> 表示</h3>\n<p>刚才说了，每一位表示一个数，0表示不存在，1表示存在，这正符合二进制</p>\n<p>这样我们可以很容易表示{1,2,4,6}这几个数：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/874963-20190930154945790-1681218156.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>计算机内存分配的最小单位是字节，也就是8位，那如果要表示{12,13,15}怎么办呢？</p>\n<p>当然是在另一个8位上表示了：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/874963-20190930161508728-1545815203.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>这样的话，好像变成一个二维数组了</p>\n<p>1个int占32位，那么我们只需要申请一个int数组长度为 int tmp[1+N/32] 即可存储，其中N表示要存储的这些数中的最大值，于是乎：</p>\n<p>tmp[0]：可以表示0~31</p>\n<p>tmp[1]：可以表示32~63</p>\n<p>tmp[2]：可以表示64~95</p>\n<p>。。。</p>\n<p>如此一来，给定任意整数M，那么M/32就得到下标，M%32就知道它在此下标的哪个位置</p>\n<h3> 添加</h3>\n<p>这里有个问题，我们怎么把一个数放进去呢？例如，想把5这个数字放进去，怎么做呢？</p>\n<p>首先，5/32=0，5%32=5，也是说它应该在tmp[0]的第5个位置，那我们把1向左移动5位，然后按位或</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/874963-20190930170044824-1061422457.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>换成二进制就是</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/874963-20190930174515759-289489948.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>这就相当于 86 | 32 = 118</p>\n<p>86 | (1&lt;&lt;5) = 118</p>\n<p>b[0] = b[0] | (1&lt;&lt;5)</p>\n<p>也就是说，要想插入一个数，将1左移带代表该数字的那一位，然后与原数进行按位或操作</p>\n<p>化简一下，就是 86 + (5/8) | (1&lt;&lt;(5%8))</p>\n<p>因此，公式可以概括为：p + (i/8)|(1&lt;&lt;(i%8)) 其中，p表示现在的值，i表示待插入的数</p>\n<h3> 清除</h3>\n<p>以上是添加，那如果要清除该怎么做呢？</p>\n<p>还是上面的例子，假设我们要6移除，该怎么做呢？</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/874963-20191013123453790-20308625.png\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>从图上看，只需将该数所在的位置为0即可</p>\n<p>1左移6位，就到达6这个数字所代表的位，然后按位取反，最后与原数按位与，这样就把该位置为0了</p>\n<p>b[0] = b[0] &amp; (~(1&lt;&lt;6))</p>\n<p>b[0] = b[0] &amp; (~(1&lt;&lt;(i%8)))</p>\n<h3> 查找</h3>\n<p>前面我们也说了，每一位代表一个数字，1表示有（或者说存在），0表示无（或者说不存在）。通过把该为置为1或者0来达到添加和清除的小伙，那么判断一个数存不存在就是判断该数所在的位是0还是1</p>\n<p>假设，我们想知道3在不在，那么只需判断 b[0] &amp; (1&lt;&lt;3) 如果这个值是0，则不存在，如果是1，就表示存在</p>\n<h2> 2. Bitmap有什么用</h2>\n<p>大量数据的快速排序、查找、去重</p>\n<h3> 快速排序</h3>\n<p>假设我们要对0-7内的5个元素(4,7,2,5,3)排序（这里假设这些元素没有重复）,我们就可以采用Bit-map的方法来达到排序的目的。</p>\n<p>要表示8个数，我们就只需要8个Bit（1Bytes），首先我们开辟1Byte的空间，将这些空间的所有Bit位都置为0，然后将对应位置为1。</p>\n<p>最后，遍历一遍Bit区域，将该位是一的位的编号输出（2，3，4，5，7），这样就达到了排序的目的，时间复杂度O(n)。</p>\n<p>优点：</p>\n<ul>\n<li>运算效率高，不需要进行比较和移位；</li>\n<li>占用内存少，比如N=10000000；只需占用内存为N/8=1250000Byte=1.25M</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>所有的数据不能重复。即不可对重复的数据进行排序和查找。</li>\n<li>只有当数据比较密集时才有优势</li>\n</ul>\n<h3> 快速去重</h3>\n<p>20亿个整数中找出不重复的整数的个数，内存不足以容纳这20亿个整数。</p>\n<p>首先，根据“内存空间不足以容纳这05亿个整数”我们可以快速的联想到Bit-map。下边关键的问题就是怎么设计我们的Bit-map来表示这20亿个数字的状态了。其实这个问题很简单，一个数字的状态只有三种，分别为不存在，只有一个，有重复。因此，我们只需要2bits就可以对一个数字的状态进行存储了，假设我们设定一个数字不存在为00，存在一次01，存在两次及其以上为11。那我们大概需要存储空间2G左右。</p>\n<p>接下来的任务就是把这20亿个数字放进去（存储），如果对应的状态位为00，则将其变为01，表示存在一次；如果对应的状态位为01，则将其变为11，表示已经有一个了，即出现多次；如果为11，则对应的状态位保持不变，仍表示出现多次。</p>\n<p>最后，统计状态位为01的个数，就得到了不重复的数字个数，时间复杂度为O(n)。</p>\n<h3> 快速查找</h3>\n<p>这就是我们前面所说的了，int数组中的一个元素是4字节占32位，那么除以32就知道元素的下标，对32求余数（%32）就知道它在哪一位，如果该位是1，则表示存在。</p>\n<h2> 小结&amp;回顾</h2>\n<p>Bitmap主要用于快速检索关键字状态，通常要求关键字是一个连续的序列（或者关键字是一个连续序列中的大部分）， 最基本的情况，使用1bit表示一个关键字的状态（可标示两种状态），但根据需要也可以使用2bit（表示4种状态），3bit（表示8种状态）。</p>\n<p>Bitmap的主要应用场合：表示连续（或接近连续，即大部分会出现）的关键字序列的状态（状态数/关键字个数 越小越好）。</p>\n<p>32位机器上，对于一个整型数，比如int a=1 在内存中占32bit位，这是为了方便计算机的运算。但是对于某些应用场景而言，这属于一种巨大的浪费，因为我们可以用对应的32bit位对应存储十进制的0-31个数，而这就是Bit-map的基本思想。Bit-map算法利用这种思想处理大量数据的排序、查询以及去重。</p>\n<h3> 补充1</h3>\n<p>在数字没有溢出的前提下，对于正数和负数，左移一位都相当于乘以2的1次方，左移n位就相当于乘以2的n次方，右移一位相当于除2，右移n位相当于除以2的n次方。</p>\n<p>&lt;&lt; 左移，相当于乘以2的n次方，例如：1&lt;&lt;6  相当于1×64=64，3&lt;&lt;4 相当于3×16=48</p>\n<p>&gt;&gt; 右移，相当于除以2的n次方，例如：64&gt;&gt;3 相当于64÷8=8</p>\n<p>^ 异或，相当于求余数，例如：48^32 相当于 48%32=16</p>\n<h3> 补充2</h3>\n<p>不使用第三方变量，交换两个变量的值</p>\n<div class=\"language-java\" data-ext=\"java\"></div><h2> 3. BitSet</h2>\n<p>BitSet实现了一个位向量，它可以根据需要增长。每一位都有一个布尔值。一个BitSet的位可以被非负整数索引（PS：意思就是每一位都可以表示一个非负整数）。可以查找、设置、清除某一位。通过逻辑运算符可以修改另一个BitSet的内容。默认情况下，所有的位都有一个默认值false。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>4. REDIS bitmap相关应用</strong></h2>\n<p>自己造轮子太累，redis提供了类似的命令，最大可以存放2的32次方，即21亿多的数字，主要有以下几个：SETBIT， GETBIT， BITCOUNT， BITOP， BITPOS，BITFIELD，</p>\n<p>主要用来做活跃用户在线状态、活跃用户统计、用户签到等场景，特别适合大量用户，几千万上亿级别，当然你用传统数据库也能做，但是redis做起来更简单，更节省空间！</p>\n<p>下面举一个用户签到的功能设计案例：</p>\n<p>很多App都有一个签到功能，比如说连续签到7天或者30天给一些奖励，需求十分简单！</p>\n<p>作为后端，我们需要提供一个签到接口，然后记录用户签到的信息，比如用户uid，签到时间！</p>\n<p>如果使用传统关系型数据库，我们可能需要建一张签到表，大概有id、uid、createdTime等几个字段，当用户签到的时候新增一条记录就行！这种做法肯定是没问题的，但是如果网站每天有千万用户签到，那么这张表每天都会有千万条记录产生，数据的存储是问题！分库分表必不可少！</p>\n<p>假如使用redis的bit操作，我们可以使用setbit，<code>SETBIT key offset value</code> 对指定的key的value的指定偏移(offset)的位置1或0, 其中key我们可以设置为当天的年月日，offset是用户uid（这里暂时只考虑uid是纯数字的情况）,value的话1表示已签到。比如说用户uid位12500的用户在20190501签到了，我们可以执行<code>SETBIT 20190501 12500 1</code>,其它用户依此论推！</p>\n<p>如果我们需要查询用户某天是否签到，只需要使用<code>GETBIT 20190501 12500</code>，返回1表示已签到，0未签到。</p>\n<p>如果需要查询某天有多少人签到，可以使用<code>BITCOUNT 20190501</code>。</p>\n<p>如果要统计连续7天签到的总人数的话可以使用bitop命令，比如<code>bitop AND 7_dasy_sign 20190501 20190502 20190503 ... 20190507</code>。</p>\n<p>理论上讲，setbit的大小在0到2的32次方（最大使用512M内存）之间，即0~4294967296之间，也就说最多可以存储42亿用户的签到情况。和数据库相比，这种方式查询的效率非常高，并不会因为数据大而变慢，而且比较节省内存，操作上也不是太复杂。</p>\n<h2> 后记</h2>\n<blockquote>\n<p>问: \"有10亿个不重复的无序的数字，如果快速排序？\"</p>\n</blockquote>\n<p>面试中经常会问到类似问题，看上去很简单，就是一个排序而已，但是你好好想想大部分排序算法都需要把数据放到内存里面操作，这10亿个数字得占用多少内存？好吧，你可以使用外部排序算法，在磁盘上完成排序！当然这些传统算法肯定是可以解决的，不过这里有一个更好的方案，采用bitmap排序。</p>\n<p>提到这个算法的好处，最大的好处就是节省内存，节省了好几十倍，适合处理大量数据，除了快速排序，还可以做快速去重，快速查询是否存在，还有一个比较好听的应用 Bloom Filter(布隆过滤器):</p>\n<blockquote>\n<p>Bloom Filter使用k个相互独立的哈希函数（Hash Function），它们分别将集合中的每个元素映射到{1,…,m}的范围中。对任意一个元素x，第i个哈希函数映射的位置hi(x)就会被置为1（1≤i≤k）。注：如果一个位置多次被置为1，那么只有第一次会起作用，后面几次将没有任何效果。 Bloom Filter 在判断y是否属于这个集合时，对y应用k次哈希函数，若所有hi(y)的位置都是1（1≤i≤k），就认为y是集合中的元素，否则就认为y不是集合中的元素。</p>\n</blockquote>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/874963-20190930154945790-1681218156.png",
      "date_published": "2021-12-04T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "动态规划简单理解",
      "url": "https://blog.yzketx.online/daily/dp.html",
      "id": "https://blog.yzketx.online/daily/dp.html",
      "summary": "动态规划简单理解 如何理解动态规划？",
      "content_html": "<h1> 动态规划简单理解</h1>\n<h2> 如何理解动态规划？</h2>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/people/niu-dai-68-44\" target=\"_blank\" rel=\"noopener noreferrer\">牛岱</a> 字节跳动 Web Infra Engineer</p>\n</blockquote>\n<p>我觉得大部分高赞答案把简单的概念搞复杂了。</p>\n<p><strong>quora</strong>上有这样一个问题:</p>\n<p><strong>How should I explain dynamic programming to a 4-year-old?</strong></p>\n<p>底下有个42K赞同的答案，是这样说的：</p>\n<p>*<strong>writes down \"1+1+1+1+1+1+1+1 =\" on a sheet of paper*</strong></p>\n<p><strong>\"What's that equal to?\"</strong></p>\n<p>*<strong>counting* \"Eight!\"</strong></p>\n<p>*<strong>writes down another \"1+\" on the left*</strong></p>\n<p><strong>\"What about that?\"</strong></p>\n<p>*<strong>quickly* \"Nine!\"</strong></p>\n<p><strong>\"How'd you know it was nine so fast?\"</strong></p>\n<p><strong>\"You just added one more\"</strong></p>\n<p><strong>\"So you didn't need to recount because you remembered there were eight!*Dynamic Programming* is just a fancy way to say 'remembering stuff to save time later'\"</strong></p>\n<p>就不翻译了，相信大家都能看懂。</p>\n<p>按照定义，动态规划是把一个大问题拆解成一堆小问题，这个本身没啥问题，但是我觉得的这个不是动态规划的核心思想，或者说，一个”大问题“之所以能用”动态规划“解决，并不是因为它能拆解成一堆小问题，事实上啥大问题都能拆解成小问题...</p>\n<p><strong>取决于该问题是否能用动态规划解决的是这些”小问题“会不会被被重复调用。</strong></p>\n<p>举个例子，有n个阶梯，一个人每一步只能跨一个台阶或是两个台阶，问这个人一共有多少种走法？</p>\n<p>首先要对这个问题进行抽象，n个阶梯，每个阶梯都代表一个”位置“， 就像是图论中的一个”点“，然后这些n个不同位置之间会有一些桥梁把它们连起来：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111230906552.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>这个图，就是该问题的抽象表达形式，那么这个问题就转化成了从 Node 0 到 Node 10 有几种不同的路可以走？</p>\n<p>其实这个就是问题的本质了。</p>\n<p>那么如果我在计算出了从 5 到 10 的路径数，这个路径数是不是可以保存下来？</p>\n<p>为什么要保存？因为这个信息一会儿还要再次被用到！</p>\n<p>因为不管我是从3走过来的，还是从4走过来的，走到5之后，存在的路径就是第一次计算出的结果，你无需重复计算！</p>\n<p>如果是暴力遍历的话，从 3 到 10 的时候， 你肯定会把 5 - 10 的可能路径数都算一遍，然后从 4 到 10 的时候，你又会把 5 - 10的路径算一遍，也就是重复计算了~</p>\n<p>那么既然这样，我们创建一个数组a[]，专门来存放位点 x 到 10 的所有可能路径数，初始值记为 0，然后每当要计算 x 到 10 的路径数时，先检测一下该路径数的值是不是大于 0 ，如果大于，就说明它之前已经被计算过，并存在了a[x]中了!</p>\n<p>那么我们马上可以得到一个递推关系:</p>\n<p>a[x] = a[x+1] + a[x+2];</p>\n<p>那么举个例子:</p>\n<p>a[6] = a[7] + a[8];</p>\n<p>a[7] = a[8] + a[9];</p>\n<p>我们发现, 在计算 a[6] 和 a[7] 的时候, 我们都用了a[8]，也就是被<strong>重复利用了结果</strong>。</p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111230906552.jpeg",
      "date_published": "2021-11-23T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "前端基础",
      "url": "https://blog.yzketx.online/daily/frontend-base.html",
      "id": "https://blog.yzketx.online/daily/frontend-base.html",
      "summary": "前端基础 JS &amp; Vue &amp; React",
      "content_html": "<h1> 前端基础</h1>\n<h2> JS &amp; Vue &amp; React</h2>\n<ol>\n<li>\n<p>== 和 ===</p>\n</li>\n<li>\n<p>null和undefined</p>\n</li>\n<li>\n<p>typeof bar === “object” 验证的风险</p>\n</li>\n<li>\n<p>NaN：，类型，验证它的函数</p>\n</li>\n<li>\n<p>get和post区别</p>\n<ol>\n<li></li>\n</ol>\n</li>\n<li>\n<p>use strict</p>\n</li>\n<li>\n<p>什么是window对象，什么是document对象</p>\n</li>\n<li>\n<p>原型链：构造函数、实例对象、原型之间关系图</p>\n</li>\n<li>\n<p>apply和call的区别</p>\n</li>\n<li>\n<p>替代图片的方法</p>\n</li>\n<li>\n<p>MVVM原理</p>\n<ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38270598\" target=\"_blank\" rel=\"noopener noreferrer\">MVVM最佳解读和实践 - 知乎 (zhihu.com)</a></li>\n</ol>\n</li>\n<li>\n<p>输入http到绚烂成网页中间发生了什么</p>\n</li>\n<li>\n<p>html是怎么渲染的</p>\n</li>\n<li>\n<p>创建对象的方法：字面量、构造方法、构造函数、工厂模式、原型模式</p>\n</li>\n<li>\n<p>new一个实例对象会发生什么</p>\n</li>\n<li>\n<p>基本数据类型和引用数据类型有什么区别</p>\n</li>\n<li>\n<p>箭头函数和普通函数区别，普通函数的this指向问题</p>\n</li>\n<li>\n<p>数组去重有哪些方法，用set的好处</p>\n</li>\n<li>\n<p>for循环可以用什么来代替：reduce</p>\n</li>\n<li>\n<p>JS中的遍历对象的方法有哪些，for in能否遍历循环出原型对象</p>\n</li>\n<li>\n<p>Vue的生命周期，created和mounted区别</p>\n<ol>\n<li></li>\n</ol>\n</li>\n<li>\n<p>v-mode的原理</p>\n</li>\n<li>\n<p>Object.defineProperty方法</p>\n</li>\n<li>\n<p>Vue3.0中的Proxy作用和使用</p>\n</li>\n<li>\n<p>v-if和v-show的computed和watch区别，应用场景</p>\n</li>\n<li>\n<p>浏览器策略</p>\n</li>\n<li>\n<p>css常用布局</p>\n</li>\n<li>\n<p>Vue中父子组件传值问题</p>\n</li>\n<li>\n<p>Vuex的使用</p>\n</li>\n<li>\n<p>vue-router原理</p>\n</li>\n<li>\n<p>iframe用于在网页中插入第三方页面，早期的页面使用iframe主要是用于导航栏这种很多页面都相同的部分，从而在切换页面的时候避免重复下载。</p>\n<ol>\n<li>优点\n方便修改，模拟分离，像一些信息管理系统会用到。\n但现在基本不推荐使用。除非特殊需要，一般不推荐使用。</li>\n<li>缺点\niframe的创作比一般的DOM元素慢了1-2个数量级\niframe标签会在页面上的加载，如果页面的onload事件无法及时触发，导致用户觉得网页加载很慢，用户体验不好，在Safari和Chrome中可以通过js动态设置iframe的src属性来避免重复。\niframe对于SEO不友好，替代方案一般就是动态语言的Incude机制和aj​​ax动态填充内容等。</li>\n</ol>\n</li>\n<li>\n<p>浏览器是怎么对HTML5的离线存储资源进行管理和加载</p>\n<ol>\n<li>在线的情况下，浏览器发现html右侧有清单属性，它会请求清单文件。</li>\n<li>如果是第一次访问app，那么浏览器就会根据清单文件的内容下载相应的资源并进行离线存储。</li>\n<li>如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，</li>\n<li>然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件更改了，那么就会重新下载文件中的资源并进行离线存储。</li>\n<li>离线的情况下，浏览器就直接使用离线存储的资源。</li>\n</ol>\n</li>\n<li>\n<p>HTML5的离线存储如何使用，工作原理能不能解释一下？</p>\n<ol>\n<li>\n<p>在用户没有与互联连接时，可以正常访问站点或应用，在用户与互联连接时，更新用户机器上的缓存文件。</p>\n</li>\n<li>\n<p>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制（不是存储技术），通过这个文件上的解析列表离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p>\n</li>\n<li>\n<p>使用方法</p>\n<p>只要在头部加一个清单属性就可以了</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>然后cache.manifest文件的书写方式如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n</li>\n<li>\n<p>AJAX = <em>A</em>synchronous <em>J</em>avaScript <em>A</em>nd <em>X</em>ML.</p>\n<p>AJAX 并非编程语言。</p>\n<p>AJAX 仅仅组合了：</p>\n<ul>\n<li>浏览器内建的 XMLHttpRequest 对象（从 web 服务器请求数据）</li>\n<li>JavaScript 和 HTML DOM（显示或使用数据）</li>\n</ul>\n<p>Ajax 是一个令人误导的名称。Ajax 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</p>\n<p>Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面。</p>\n<p>Ajax请求：</p>\n<ol>\n<li>网页中发生一个事件（页面加载、按钮点击）</li>\n<li>由 JavaScript 创建 XMLHttpRequest 对象</li>\n<li>XMLHttpRequest 对象向 web 服务器发送请求</li>\n<li>服务器处理该请求</li>\n<li>服务器将响应发送回网页</li>\n<li>由 JavaScript 读取响应</li>\n<li>由 JavaScript 执行正确的动作（比如更新页面）</li>\n</ol>\n</li>\n<li>\n<p>前端页面三层结构：</p>\n<ol>\n<li>合并：结构层，表示层，行为层。</li>\n<li>结构层（structural layer） 标签，也就是那些出现在尖括号里的单词，对网页内容的语义暗示引起了描述，但这些标签不包含任何关于如何找到有关内容的信息。例如，P标签表达了这样一种语义：“这是一个文本段。”</li>\n<li>表示层（presentation layer） 由CSS对“如何显示有关内容”的问题做出了回答。</li>\n<li>行为层（behaviorlayer） 负责回答“内容应该如何对事件引发反应”这一问题。这是Javascript语言和DOM主宰的领域。</li>\n</ol>\n</li>\n<li>\n<p>HTML DOM（文档对象模型）</p>\n<p>当网页被加载时，浏览器会创建页面的文档对象模型（<em>D</em>ocument <em>O</em>bject <em>M</em>odel）。</p>\n<p><em>HTML DOM</em> 模型被结构化为<em>对象树</em>：</p>\n<p><code>对象的 HTML DOM 树</code></p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111292257614.gif\" alt=\"DOM HTML 树\" tabindex=\"0\"><figcaption>DOM HTML 树</figcaption></figure>\n<p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p>\n<ul>\n<li>JavaScript 能改变页面中的所有 HTML 元素</li>\n<li>JavaScript 能改变页面中的所有 HTML 属性</li>\n<li>JavaScript 能改变页面中的所有 CSS 样式</li>\n<li>JavaScript 能删除已有的 HTML 元素和属性</li>\n<li>JavaScript 能添加新的 HTML 元素和属性</li>\n<li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li>\n<li>JavaScript 能在页面中创建新的 HTML 事件</li>\n</ul>\n</li>\n</ol>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111292257614.gif",
      "date_published": "2021-11-29T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Hook",
      "url": "https://blog.yzketx.online/daily/hook.html",
      "id": "https://blog.yzketx.online/daily/hook.html",
      "summary": "Hook Hook，英文直译是”钩子“的意思。在程序中将其理解为”劫持“可能会更好理解，我们可以通过hook技术来劫持某个对象，从而控制它与其他对象的交互。",
      "content_html": "<h1> Hook</h1>\n<blockquote>\n<p>Hook，英文直译是”钩子“的意思。在程序中将其理解为”劫持“可能会更好理解，我们可以通过hook技术来劫持某个对象，从而控制它与其他对象的交互。</p>\n</blockquote>\n<p>导读：<a href=\"https://www.jianshu.com/p/3382cc765b39\" target=\"_blank\" rel=\"noopener noreferrer\">Hook 技术（一） - 简书 (jianshu.com)</a></p>\n<h2> Hook技术分类</h2>\n<ol>\n<li>\n<p><strong>根据Hook的API语言划分，分为Hook Java和Hook Native。</strong></p>\n<ul>\n<li>\n<p>Hook Java主要通过反射和代理来实现，用于在SDK开发环境中修改Java代码。</p>\n</li>\n<li>\n<p>Hook Native则应用于在NDK开发环境和系统开发中修改Native代码。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>根据Hook的进程划分，分为<a href=\"https://www.zhihu.com/search?q=%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%BF%9B%E7%A8%8BHoo&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A55276265%7D\" target=\"_blank\" rel=\"noopener noreferrer\">应用程序进程Hook</a>和全局Hook。</strong></p>\n<ul>\n<li>\n<p>应用程序进程Hook只能Hook当前所在的应用程序进程。</p>\n</li>\n<li>\n<p>应用程序进程是Zygote进程fork出来的，如果对Zygote进行Hook，就可以实现Hook系统所有的应用程序进程，这就是<a href=\"https://www.zhihu.com/search?q=%E5%85%A8%E5%B1%80Hoo&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A55276265%7D\" target=\"_blank\" rel=\"noopener noreferrer\">全局Hoo</a>k。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>根据Hook的实现方式划分，分为如下两种：</strong></p>\n<ul>\n<li>\n<p>通过反射和代理实现，只能Hook当前的应用程序进程。</p>\n</li>\n<li>\n<p>通过Hook框架实现，比如Xposed，可以实现全局Hook，但是需要root。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2> Hook原理</h2>\n<blockquote>\n<p>创建一个代理对象，然后把原始对象替换为我们的代理对象，这样就可以在这个代理对象为所欲为，修改参数或替换<a href=\"https://www.zhihu.com/search?q=%E8%BF%94%E5%9B%9E%E5%80%BC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A55276265%7D\" target=\"_blank\" rel=\"noopener noreferrer\">返回值</a>。</p>\n</blockquote>\n<p>正常的调用和返回：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202112021954211.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>Hook的调用和返回：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202112021954154.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<h2> Hook的过程</h2>\n<blockquote>\n<p>Step1. 寻找Hook点，原则是<code>静态变量</code>或者<code>单例对象</code>，尽量Hook <code>public</code>的对象和方法，非public不保证每个版本都一样，需要适配。</p>\n<p>Step2. 选择合适的代理方式，如果是<code>接口</code>可以用<code>动态代理</code>；如果是类可以用<code>静态代理</code>。\nStep3. 偷梁换柱——用代理对象替换原始对象。</p>\n</blockquote>\n<h2> Hook Activity的startActivity</h2>\n<p><strong>寻找Hook点</strong>：</p>\n<p>Activity的 startActivity 方法的调用链：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>Hook点分析</strong>：</p>\n<p>当调用Activity的startActivity方法时，最后会调用<code>mInstrumentation</code>的execStartActivity方法来完成Activity的开启，而<code>mInstrumentation</code>是Activity的<a href=\"https://www.zhihu.com/search?q=%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A55276265%7D\" target=\"_blank\" rel=\"noopener noreferrer\">成员变量</a>，所以是一个很好的Hook点，用代理Instrumentation来替代原始的Instrumentation完成Hook。</p>\n<p><strong>Hook代码</strong>：</p>\n<p>代理类：InstrumentationProxy.java</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>用InstrumentationProxy来替换Instrumentation：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>执行Hook</strong>:</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>运行结果：</p>\n<div class=\"language-java\" data-ext=\"java\"></div><h2> Hook Context的startActivity</h2>\n<blockquote>\n<p>Context的实现类为ContextImpl。</p>\n</blockquote>\n<p><strong>寻找Hook点</strong>：</p>\n<p>ContextImpl中startActivity的调用链：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>Hook点分析</strong>:</p>\n<ul>\n<li>调用ActivityThread的getInstrumentation方法获取Instrumentation。</li>\n<li>ActivityThread是主线程的管理类，Instrumentation是ActivityThread的成员变量，一个进程只有一个ActivityThread。</li>\n<li>选择Instrumentation作为Hook点，通过代理类进行替换。</li>\n</ul>\n<p><strong>Hook代码</strong>：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>执行Hook</strong>：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>运行结果：</p>\n<div class=\"language-java\" data-ext=\"java\"></div><h2> 参考链接</h2>\n<ol>\n<li><a href=\"http://weishu.me/2016/01/28/understand-plugin-framework-proxy-hook/\" target=\"_blank\" rel=\"noopener noreferrer\">Android插件化原理解析——Hook机制之动态代理</a></li>\n<li><a href=\"https://blog.csdn.net/gdutxiaoxu/article/details/81459830\" target=\"_blank\" rel=\"noopener noreferrer\">Android Hook 机制之简单实战</a></li>\n<li><a href=\"https://blog.csdn.net/gdutxiaoxu/article/details/81459910\" target=\"_blank\" rel=\"noopener noreferrer\">Android Hook Activity 的几种姿势</a></li>\n<li><a href=\"https://www.jianshu.com/p/4f6d20076922\" target=\"_blank\" rel=\"noopener noreferrer\">理解 Android Hook 技术以及简单实战</a></li>\n<li>《Android进阶解密》</li>\n</ol>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202112021954211.jpeg",
      "date_published": "2021-12-02T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Java Bean",
      "url": "https://blog.yzketx.online/daily/javabean.html",
      "id": "https://blog.yzketx.online/daily/javabean.html",
      "summary": "Java Bean Java bean 是个什么概念",
      "content_html": "<h1> Java Bean</h1>\n<h2> Java bean 是个什么概念</h2>\n<blockquote>\n<p>符合一定规范编写的Java类，不是一种技术，而是一种规范。大家针对这种规范，总结了很多开发技巧、工具函数。符合这种规范的类，可以被其它的程序员或者框架使用。</p>\n</blockquote>\n<p><strong>规范</strong></p>\n<p>JavaBean是一个遵循特定写法的Java类，是一种Java语言编写的可重用组件，它的方法命名，构造及行为必须符合特定的约定：</p>\n<p>1、这个类必须具有一个公共的(public)无参构造函数；</p>\n<p>2、所有属性私有化（private）；</p>\n<p>3、私有化的属性必须通过public类型的方法（getter和setter）暴露给其他程序，并且方法的命名也必须遵循一定的命名规范。</p>\n<p>4、这个类应是可序列化的。（比如可以实现Serializable 接口，用于实现bean的持久性）</p>\n<p><strong>向后兼容性</strong></p>\n<p>Java语言欠缺属性、事件、多重继承功能。所以，如果要在Java程序中实现一些面向对象编程的常见需求，只能手写大量胶水代码。Java Bean正是编写这套胶水代码的惯用模式或约定。这些约定包括getXxx、setXxx、isXxx、addXxxListener、XxxEvent等。遵守上述约定的类可以用于若干工具或库。</p>\n<p>举个例子，假如有人要用Java实现一个单向链表类，可能会这样写：</p>\n<div class=\"language-java\" data-ext=\"java\"></div><p>上述实现为了能够快速获取链表的大小，把链表大小缓存在size变量中。用法如下：</p>\n<div class=\"language-java\" data-ext=\"java\"></div><p>JavaIntList的作者很满意，于是开源了java-int-list库的1.0版。文件名是java-int-list_1.0.jar。发布后，吸引了许多用户来使用java-int-list_1.0.jar。\n有一天，作者决定要节省内存，不要缓存size变量了，把代码改成这样：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后发布了2.0版：java-int-list_2.0.jar。发布后，原有java-int-list_1.0.jar的用户纷纷升级版本到2.0。这些用户一升级，就发现自己的程序全部坏掉了，说是找不到什么size变量。于是这些用户就把作者暴打一顿，再也不敢用java-int-list库了。</p>\n<p>这个故事告诉我们，如果不想被暴打致死，你就必须保持向后兼容性。太阳公司在设计Java语言时，也懂得这个道理。所以Java标准库中，绝对不会出现public int size这样的代码，而一定会一开始就写成：</p>\n<div class=\"language-java\" data-ext=\"java\"></div><p>让用户一开始就使用<code>getSize</code>，以便有朝一日修改<code>getSize</code>实现时，不破坏向后兼容性。这种<code>public int getSize() { return size; }</code>的惯用手法，就是 <strong>Java Bean</strong>。</p>\n<p>现在是2014年，C#、Scala等比Java新的面向对象语言自身就提供了语言特性来实现这些常用需求，所以根本不需要Java Bean这样繁琐的约定。</p>\n<p>比如，假如有个Scala版的<code>ScalaIntList</code>：</p>\n<div class=\"language-scala\" data-ext=\"scala\"></div><p>用户这样用：</p>\n<div class=\"language-scala\" data-ext=\"scala\"></div><p>有一天你心血来潮改成这样：</p>\n<div class=\"language-scala line-numbers-mode\" data-ext=\"scala\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>用户还是照样能用，根本不破坏向后兼容性。所以Scala程序只要不考虑和Java交互，一般就不需要类似Java Bean这样的约定。</p>\n<p>顺便说一句，向后兼容性分为源代码级和二进制级，Scala的var或val改为final def的话，无论源代码级的向后兼容性，还是二进制级的向后兼容性，都不遭受破坏。但C#的字段改为属性的话，虽然不破坏源代码级的向后兼容性，但是会破坏二进制级的向后兼容性。这是C#的设计缺陷，导致微软的编码规范不得不禁止使用公有字段。</p>\n",
      "date_published": "2021-11-14T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "Python 生成器",
      "url": "https://blog.yzketx.online/daily/pythonGenerator.html",
      "id": "https://blog.yzketx.online/daily/pythonGenerator.html",
      "summary": "Python 生成器 这一记录源于Leetcode排列的数组，在解题时使用了（x xxx）的生成器，反复思考确认在逻辑上无误，调试时才发现，用到的生成器在一次调用循环后便无法再次执行。",
      "content_html": "<h1> Python 生成器</h1>\n<blockquote>\n<p>这一记录源于Leetcode排列的数组，在解题时使用了（x xxx）的生成器，反复思考确认在逻辑上无误，调试时才发现，用到的生成器在一次调用循环后便无法再次执行。</p>\n</blockquote>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 1. 生成器定义</h3>\n<p>在Python中，一边循环一边计算的机制，称为生成器：generator。</p>\n<h3> 2. 为什么要有生成器</h3>\n<p>列表所有数据都在内存中，如果有海量数据的话将会非常耗内存。</p>\n<p>如：仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\n<p>如果列表元素按照某种算法推算出来，那我们就可以在循环的过程中不断推算出后续的元素，这样就不必创建完整的list，从而节省大量的空间。</p>\n<p>简单一句话：我又想要得到庞大的数据，又想让它占用空间少，那就用生成器！</p>\n<h3> 3.如何创建生成器</h3>\n<p>第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>创建<code>L</code>和<code>g</code>的区别仅在于最外层的<code>[]</code>和<code>()</code>，<code>L</code>是一个list，而<code>g</code>是一个generator。</p>\n<p>方法二， 如果一个函数中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator。调用函数就是创建了一个生成器（generator）对象。</p>\n<h3> 4. 生成器的工作原理</h3>\n<p>（1）生成器(generator)能够迭代的关键是它有一个next()方法，</p>\n<p>工作原理就是通过重复调用next()方法，直到捕获一个异常。</p>\n<p>（2）带有 yield 的函数不再是一个普通函数，而是一个生成器generator。</p>\n<p>可用next()调用生成器对象来取值。next 两种方式 t.<strong>next</strong>() | next(t)。</p>\n<p>可用for 循环获取返回值（每执行一次，取生成器里面一个值）</p>\n<p>（基本上不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代）。</p>\n<p>（3）yield相当于 return 返回一个值，并且记住这个返回的位置，下次迭代时，代码从yield的下一条语句开始执行。</p>\n<p>（4）.send() 和next()一样，都能让生成器继续往下走一步（下次遇到yield停），但send()能传一个值，这个值作为yield表达式整体的结果</p>\n<p>——换句话说，就是send可以强行修改上一个yield表达式值。比如函数中有一个yield赋值，a = yield 5，第一次迭代到这里会返回5，a还没有赋值。第二次迭代时，使用.send(10)，那么，就是强行修改yield 5表达式的值为10，本来是5的，那么a=10</p>\n<p>感受下yield返回值的过程（<em>关注点：每次停在哪，下次又开始在哪</em>）及send()传参的通讯过程，</p>\n<p>思考None是如何产生的（第一次取值：yield 返回了 i 值 0，停在yield i，temp没赋到值。第二次取值，开始在print，temp没被赋值，故打印None，i加1，继续while判断，yield 返回了 i 值 1，停在yield i）：</p>\n<div class=\"language-python\" data-ext=\"py\"></div><figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111201959152.png\" alt=\"image-20211120195923071\" tabindex=\"0\"><figcaption>image-20211120195923071</figcaption></figure>\n<p>示例：</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>结果：</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>理解的关键在于：下次迭代时，代码从yield的下一条语句开始执行。</p>\n<h3> 总结：</h3>\n<p>什么是生成器？</p>\n<p>生成器仅仅保存了一套生成数值的算法，并且没有让这个算法现在就开始执行，而是我什么时候调它，它什么时候开始计算一个新的值，并给你返回。</p>\n<p><strong>练习题</strong>：</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111202020607.png\" alt=\"image-20211120202013539\" tabindex=\"0\"><figcaption>image-20211120202013539</figcaption></figure>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111201959152.png",
      "date_published": "2021-11-19T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "天天笔记",
      "url": "https://blog.yzketx.online/daily/",
      "id": "https://blog.yzketx.online/daily/",
      "summary": "::: details deprecated 目录 Ubuntu (Ubuntu.md) 2020.01.15 - … Python 中循环代码优化 (Python-loop.md) 2021.10.14 微信小程序后端开发环境部署 (wechat-deploy.md) 2021.10.14 - ... 待完善… Listary & Everythin...",
      "content_html": "",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "__str__和__repr__的异同",
      "url": "https://blog.yzketx.online/daily/str-repr.html",
      "id": "https://blog.yzketx.online/daily/str-repr.html",
      "summary": "__str__和__repr__的异同",
      "content_html": "<h1> <code>__str__</code>和<code>__repr__</code>的异同</h1>\n<h2> 字符串的表示形式</h2>\n<p>我们都知道，Python的内置函数<code>repr()</code>能够把对象用字符串的形式表达出来，方便我们辨认。这就是“字符串表示形式”。<code>repr()</code>就是通过<code>__repr__</code>这个特殊方法来得到一个对象的字符串表示形式的。如果没有实现<code>__repr__</code>，当我们在控制台里打印一个向量的实例时，得到的字符串可能会是 &lt;Vector object at 0x10a514f98&gt;。</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong><code>__str__ </code>vs.<code> __repr__</code></strong></h2>\n<p>接下来我们看一看**<code>__str__ </code>和<code> __repr__</code>**有哪些异同。根据<a href=\"https://link.segmentfault.com/?enc=pEhyJythcllHjZjcCjBvuQ%3D%3D.BRKrQmzNQqa9y31ggG7rUseAE68AFJ%2FXQJe2i2RVTbzjSQH6X1JKYvw8BfIpO6WYcEzoU5WW0WTg4zpBztGSVqjrlJWuwhC8LHiQZbE0pdzqqi5dj1moalNH%2FfM%2Bh9Ej\" target=\"_blank\" rel=\"noopener noreferrer\">Python官方文档定义</a>：</p>\n<ul>\n<li><code>__str__</code>：通过<code>str(object)</code>以及内置函数<code>format()</code>和<code>print()</code>调用以生成一个对象的“非正式”或格式良好的字符串表示。返回值必须是<strong>字符串对象</strong>。</li>\n<li><code>__repr__</code>：是由<code>repr()</code>内置函数调用，用来输出一个对象的“官方”字符串表示。返回值必须是<strong>字符串对象</strong>，此方法通常被用于调试。内置类型 <a href=\"https://link.segmentfault.com/?enc=X2cz0PpeTHNUqp84stuyqg%3D%3D.9dl7J2LQKUHQJ1icEPFljJ%2BOXoJYW5HE6InZ4mmN8ljkUUwxjkTuOGySYgIyXl1Y911KmiUysvkmmFeO2y5%2F1A%3D%3D\" target=\"_blank\" rel=\"noopener noreferrer\"><code>object</code></a> 所定义的默认实现会调用 <code>object.__repr__()</code>。</li>\n</ul>\n<p>什么正式与非正式格式，你已经搞懵了是吗？没事，我们接着看：</p>\n<h3> 1. 两者都能输出对象</h3>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当x=4，当x为整数类型时，调用<code>str()</code>和<code>repr()</code>的返回结果是一样，</p>\n<p>而当y为字符串类型时，<code>repr(y)</code>的结果就是“正式”的字符串表示，而<code>str(y)</code>的结果则是“非正式”的。<code>str()</code>能够让我们最快速了解到对象的内容，可读性较高。</p>\n<h3> 2 .<code>__str__</code>是可读的，<code>__repr__</code>的目标是明确的</h3>\n<div class=\"language-python\" data-ext=\"py\"></div><p>可以看出<code>repr()</code>更能显示出对象的类型、值等信息，对象描述清晰的。</p>\n<p>在 <code>str()</code> 函数被使用，或是在用 <code>print</code> 函数打印一个对象的时候才被调用的，并且它返回的字符串对终端用户更友好。</p>\n<h3> 3. 重写<code>__repr__</code>，那也会使用<code>__str_</code></h3>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出结果：</p>\n<div class=\"language-text\" data-ext=\"text\"></div><h1> 总结</h1>\n<p><strong>共同点：</strong> 都是用来输出一个对象</p>\n<p><strong>区别：</strong></p>\n<ol>\n<li><code>__str__</code> 的目标是可读的，<code>__str__()</code>并不预期返回一个有效的 Python 表达式，但可以使用更方便或更准确的描述信息。</li>\n<li><code>__repr__</code> 的目标是明确的，所返回的字符串应该准确、无歧义，并且尽可能表达出如何 用代码创建出这个被打印的对象。</li>\n<li>容器的 <code>__str__</code> 方法的使用包含对象的 <code>__repr__</code></li>\n</ol>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000022266368#\" target=\"_blank\" rel=\"noopener noreferrer\">“Difference between <code>__str__</code> and <code>__repr__</code> in Python”</a></li>\n<li><a href=\"https://link.segmentfault.com/?enc=P12%2FFueOa0lJy6s8WBbR5g%3D%3D.y4Ujz%2BLJq89VZlfYIYQ%2F4m%2FgXtwry88Sh%2BKAzfb5VakEiLjf6MVQB7qXV%2BGQVNsS\" target=\"_blank\" rel=\"noopener noreferrer\">Fluent Python</a></li>\n</ul>\n",
      "date_published": "2021-11-01T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "微信小程序后端开发环境部署",
      "url": "https://blog.yzketx.online/daily/wechat-deploy.html",
      "id": "https://blog.yzketx.online/daily/wechat-deploy.html",
      "summary": "微信小程序后端开发环境部署",
      "content_html": "<h1> 微信小程序后端开发环境部署</h1>\n<h2> 环境开发类型</h2>\n<ul>\n<li>云开发</li>\n<li>云托管\n<ul>\n<li>持续集成</li>\n<li>Dockerfile</li>\n</ul>\n</li>\n<li>个人服务器 + 备案的 https 域名</li>\n</ul>\n<h3> 云开发</h3>\n<h3> 云托管</h3>\n<h3> 个人服务器</h3>\n<h2> 小程序登陆3端逻辑</h2>\n",
      "date_published": "2021-10-14T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "天天笔记"
      ]
    },
    {
      "title": "",
      "url": "https://blog.yzketx.online/interview/aq.html",
      "id": "https://blog.yzketx.online/interview/aq.html",
      "summary": "1. 你对于“需要了解代码底层才能写好程序”持何观点？",
      "content_html": "<p><strong>1. 你对于“需要了解代码底层才能写好程序”持何观点？</strong></p>\n<p>不一定，GIL</p>\n<p><strong>2. 系统提高并发性的问题</strong></p>\n<p>从面试的角度来看，做出了如下总结：</p>\n<ol>\n<li>物理层：很多博客里面提到服务器本身的性能，比如提高机器的CPU，增加硬盘，增加内存，升级网卡。还有提到的就是服务器的网络带宽；</li>\n<li>系统操作层\n（1）多线程多核编程，消除CPU瓶颈\n（2）采用epoll，利用状态检测和通知方式，消除网络I/O阻塞瓶颈\n（3）采用事件驱动或者时异步消息机制，可以消除不必要的等待操作\n（4）部分采用共享内存的方式进行IPC通信，可以大大提高性能\n（5）系统分层</li>\n<li>业务处理\n（1）优化数据库性能\n（2）采用缓存redis或者memcached</li>\n<li>k8s集群，Nginx，Tengine</li>\n</ol>\n<p><strong>3. 使用过 Redis 实现过异步队列嘛，如何实现</strong></p>\n<p>一般使用 list 结构作为队列，rpush 生产消息，lpop 消费消息。当 lpop 没有消息的时候，要适当 sleep 一会再重试。</p>\n<p><em>如果对方追问可不可以不用 sleep 呢？</em></p>\n<p>list 还有个指令叫 blpop，在没有消息的时候，它会阻塞住直到消息到来。如果对方追问能不能生产一次消费多次呢？使用 pub/sub 主题订阅者模式，可以实现1:N 的消息队列。</p>\n<p><em>如果对方追问 pub/sub 有什么缺点？</em></p>\n<p>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如 RabbitMQ 等。（这个我觉得就和嵌入式或者是物联网中的 broke 订阅模式（N : N）相似，就比如我有一个远程 broke 服务器，有多个传感器检测信息回传给 broke，broke 收到这个 message，就会进行一次对应频道的广播，只要订阅该频道的接收者都可以收到。但对于我们这里通过 redis 实现的订阅发布模式来说，这里会有一个问题，假如订阅者意外下线了，这个 message 可能就会直接丢失了，对于该问题，我们或许可以设计一个应答机制，要求对发布者作出应答，但这个就要根据实际场景来选择了，避免得不偿失）</p>\n<p><em>如果对方追问 redis 如何实现延时队列？</em></p>\n<p>我估计现在你很想把面试官一棒打死如果你手上有一根棒球棍的话，怎么问的这么详细。但是你很克制，然后神态自若的回答道：使用 sortedset，拿时间戳作为 score，消息内容作为 key 调用 zadd 来生产消息，消费者用 zrangebyscore 指令获取 N 秒之前的数据轮询进行处理。到这里，面试官暗地里已经对你竖起了大拇指。但是他不知道的是此刻你却竖起了中指，在椅子背后。</p>\n",
      "date_published": "2022-01-13T00:00:00.000Z",
      "date_modified": "2023-11-07T13:59:28.000Z",
      "authors": [],
      "tags": [
        "面试瞎想"
      ]
    },
    {
      "title": "面试瞎想",
      "url": "https://blog.yzketx.online/interview/",
      "id": "https://blog.yzketx.online/interview/",
      "summary": "::: details deprecated 目录 A&Q (aq.md) 2022.01.13 :::",
      "content_html": "",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "面试瞎想"
      ]
    },
    {
      "title": "LeetCode 笔记",
      "url": "https://blog.yzketx.online/leetcode/leetcode.html",
      "id": "https://blog.yzketx.online/leetcode/leetcode.html",
      "summary": "LeetCode 笔记 [TOC]",
      "content_html": "<h1> LeetCode 笔记</h1>\n<p>[TOC]</p>\n<h2> 动态规划</h2>\n<div class=\"language-python\" data-ext=\"py\"></div><h2> 搜索</h2>\n<ol start=\"3\">\n<li>无重复字符的最长子串</li>\n</ol>\n<p>class Solution:\ndef lengthOfLongestSubstring(self, s):\n\"\"\"\n:type s: str\n:rtype: int\n\"\"\"\nfrom collections import defaultdict\nlookup = defaultdict(int)\nstart = 0\nend = 0\nmax_len = 0\ncounter = 0\nwhile end &lt; len(s):\nif lookup[s[end]] &gt; 0:\ncounter += 1\nlookup[s[end]] += 1\nend += 1\nwhile counter &gt; 0:\nif lookup[s[start]] &gt; 1:\ncounter -= 1\nlookup[s[start]] -= 1\nstart += 1\nmax_len = max(max_len, end - start)\nreturn max_len</p>\n<ol start=\"76\">\n<li>最小覆盖子串</li>\n</ol>\n<p>class Solution:\ndef minWindow(self, s: 'str', t: 'str') -&gt; 'str':\nfrom collections import defaultdict\nlookup = defaultdict(int)\nfor c in t:\nlookup[c] += 1\nstart = 0\nend = 0\nmin_len = float(\"inf\")\ncounter = len(t)\nres = \"\"\nwhile end &lt; len(s):\nif lookup[s[end]] &gt; 0:\ncounter -= 1\nlookup[s[end]] -= 1\nend += 1\nwhile counter == 0:\nif min_len &gt; end - start:\nmin_len = end - start\nres = s[start:end]\nif lookup[s[start]] == 0:\ncounter += 1\nlookup[s[start]] += 1\nstart += 1\nreturn res\n159. 至多包含两个不同字符的最长子串</p>\n<p>class Solution:\ndef lengthOfLongestSubstringTwoDistinct(self, s: str) -&gt; int:\nfrom collections import defaultdict\nlookup = defaultdict(int)\nstart = 0\nend = 0\nmax_len = 0\ncounter = 0\nwhile end &lt; len(s):\nif lookup[s[end]] == 0:\ncounter += 1\nlookup[s[end]] += 1\nend +=1\nwhile counter &gt; 2:\nif lookup[s[start]] == 1:\ncounter -= 1\nlookup[s[start]] -= 1\nstart += 1\nmax_len = max(max_len, end - start)\nreturn max_len\n340. 至多包含 K 个不同字符的最长子串</p>\n<p>class Solution:\ndef lengthOfLongestSubstringKDistinct(self, s: str, k: int) -&gt; int:\nfrom collections import defaultdict\nlookup = defaultdict(int)\nstart = 0\nend = 0\nmax_len = 0\ncounter = 0\nwhile end &lt; len(s):\nif lookup[s[end]] == 0:\ncounter += 1\nlookup[s[end]] += 1\nend += 1\nwhile counter &gt; k:\nif lookup[s[start]] == 1:\ncounter -= 1\nlookup[s[start]] -= 1\nstart += 1\nmax_len = max(max_len, end - start)\nreturn max_len\n滑动窗口题目:</p>\n<ol start=\"3\">\n<li>无重复字符的最长子串</li>\n<li>串联所有单词的子串</li>\n<li>最小覆盖子串</li>\n<li>至多包含两个不同字符的最长子串</li>\n<li>长度最小的子数组</li>\n<li>滑动窗口最大值</li>\n<li>字符串的排列</li>\n<li>最小区间</li>\n<li>最小窗口子序列</li>\n<li></li>\n</ol>\n",
      "date_published": "2022-01-01T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "算法"
      ]
    },
    {
      "title": "算法",
      "url": "https://blog.yzketx.online/leetcode/",
      "id": "https://blog.yzketx.online/leetcode/",
      "summary": "::: details deprecated 目录 Coming soon… leetcode 160 :::",
      "content_html": "",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "算法"
      ]
    },
    {
      "title": "阿里云轻量服务器自定义服务",
      "url": "https://blog.yzketx.online/other/aliyun-server.html",
      "id": "https://blog.yzketx.online/other/aliyun-server.html",
      "summary": "阿里云轻量服务器自定义服务",
      "content_html": "<h1> 阿里云轻量服务器自定义服务</h1>\n<h2> 关闭原有服务</h2>\n<p>应用程序安装信息：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110142121753.png\" alt=\"image-20211014212132625\" tabindex=\"0\"><figcaption>image-20211014212132625</figcaption></figure>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>关闭以上服务后，服务器80端口将被空出，可用于个人服务。</p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110142121753.png",
      "date_published": "2021-10-04T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "未知分类"
      ]
    },
    {
      "title": "",
      "url": "https://blog.yzketx.online/other/github-page.html",
      "id": "https://blog.yzketx.online/other/github-page.html",
      "summary": "Welcome to GitHub Pages",
      "content_html": "<h2> Welcome to GitHub Pages</h2>\n<p>You can use the <a href=\"https://github.com/ET-yzk/ET-yzk.github.io/edit/main/index.md\" target=\"_blank\" rel=\"noopener noreferrer\">editor on GitHub</a> to maintain and preview the content for your website in Markdown files.</p>\n<p>Whenever you commit to this repository, GitHub Pages will run <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Jekyll</a> to rebuild the pages in your site, from the content in your Markdown files.</p>\n<h3> Markdown</h3>\n<p>Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for</p>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>For more details see <a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Flavored Markdown</a>.</p>\n<h3> Jekyll Themes</h3>\n<p>Your Pages site will use the layout and styles from the Jekyll theme you have selected in your <a href=\"https://github.com/ET-yzk/ET-yzk.github.io/settings/pages\" target=\"_blank\" rel=\"noopener noreferrer\">repository settings</a>. The name of this theme is saved in the Jekyll <code>_config.yml</code> configuration file.</p>\n<h3> Support or Contact</h3>\n<p>Having trouble with Pages? Check out our <a href=\"https://docs.github.com/categories/github-pages-basics/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a> or <a href=\"https://support.github.com/contact\" target=\"_blank\" rel=\"noopener noreferrer\">contact support</a> and we’ll help you sort it out.</p>\n",
      "date_published": "2021-10-01T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "未知分类"
      ]
    },
    {
      "title": "Other API",
      "url": "https://blog.yzketx.online/other/otherAPI.html",
      "id": "https://blog.yzketx.online/other/otherAPI.html",
      "summary": "Other API 一言",
      "content_html": "<h1> Other API</h1>\n<h2> 一言</h2>\n<p><a helf=\"https://v1.hitokoto.cn/?encode=text\">一言</a></p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-html\" data-ext=\"html\"></div><p class=\"heti\" id=\"hitokoto\"><a href=\"#\" id=\"hitokoto_text\">: )  Loading...</a></p>\n<h2> IP</h2>\n<figure><img src=\"https://tool.lu/netcard/\" alt=\"IP签名\" tabindex=\"0\"><figcaption>IP签名</figcaption></figure>\n",
      "image": "https://tool.lu/netcard/",
      "date_published": "2022-01-13T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "未知分类"
      ]
    },
    {
      "title": "未知分类",
      "url": "https://blog.yzketx.online/other/",
      "id": "https://blog.yzketx.online/other/",
      "summary": "::: details deprecated 目录 GithubPage Init (github-page.md) GithubPage 初始化页 阿里云轻量服务器自定义服务 (aliyun-server.md) 2021.10.04 otherAPI (otherAPI.md) 2022.01.13 :::",
      "content_html": "",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "未知分类"
      ]
    },
    {
      "title": "Android Studio 😃",
      "url": "https://blog.yzketx.online/problem/Android%20Studio.html",
      "id": "https://blog.yzketx.online/problem/Android%20Studio.html",
      "summary": "Android Studio 😃",
      "content_html": "<h1> Android Studio 😃</h1>\n<h2> Could not install Gradle distribution</h2>\n<blockquote>\n<p>Could not install Gradle distribution from 'https://services.gradle.org/distributions/gradle-x.x.x-all.zip'.</p>\n</blockquote>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111121001862.png\" alt=\"image-20211112094956838\" tabindex=\"0\"><figcaption>image-20211112094956838</figcaption></figure>\n<h3> 解决</h3>\n<p>通过链接下载文件，直接将压缩包移至本地 <code>.gradle\\wrapper\\dists\\gradle-x.x-bin/all\\随机码</code> 目录。</p>\n<p>示例目录: <code>C:\\Users\\15817\\.gradle\\wrapper\\dists\\gradle-5.6.4-all\\ankdp27end7byghfw1q2sw75f</code></p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111121001862.png",
      "date_published": "2021-11-12T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "踩坑指南"
      ]
    },
    {
      "title": "Conda - Downloaded bytes did not match Content-Length",
      "url": "https://blog.yzketx.online/problem/Conda-Downloaded-bytes-did-not-match-Content-Length.html",
      "id": "https://blog.yzketx.online/problem/Conda-Downloaded-bytes-did-not-match-Content-Length.html",
      "summary": "Conda - Downloaded bytes did not match Content-Length",
      "content_html": "<h1> Conda - Downloaded bytes did not match Content-Length</h1>\n<h2> 问题描述</h2>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>如上所示，在用conda安装包的时候下载包的长度不够导致安装包不成功。原因一般是在下载的时候速度较慢，导致下载timeout而终止。解决办法如下。</p>\n<hr>\n<h2> 解决方案一 【推荐】</h2>\n<p>设置额外的源，直接从速度快的源进行下载。详见<a href=\"https://blog.csdn.net/feifei3211/article/details/90045560\" target=\"_blank\" rel=\"noopener noreferrer\">conda源的使用</a>和<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/anaconda/\" target=\"_blank\" rel=\"noopener noreferrer\">清华源的添加方式</a>。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>[ ! ] 注意，若报 “conda.core.subdir_data.Response304ContentUnchanged”</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>详见 https://github.com/conda/conda/issues/8051</p>\n<hr>\n<h2> 解决方案二</h2>\n<p>设置conda下载的 timeout，然后再进行尝试，如果时长不够可以再设置大一点。</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><hr>\n<h2> 解决方案三</h2>\n<p>从conda的源下载好要安装的包，直接采用本地安装的方式。下载的url再出错的地方有提示：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><hr>\n<h2> 参考</h2>\n<p><a href=\"https://stackoverflow.com/questions/42797957/changing-timeout-limit-when-using-conda-install\" target=\"_blank\" rel=\"noopener noreferrer\">stackoverflow 1</a></p>\n<p><a href=\"https://stackoverflow.com/questions/34316951/install-anaconda-library-from-a-local-source\" target=\"_blank\" rel=\"noopener noreferrer\">stackoverflow 2</a></p>\n",
      "date_published": "2021-10-13T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "踩坑指南"
      ]
    },
    {
      "title": "Microsoft拼音卡顿问题",
      "url": "https://blog.yzketx.online/problem/Microsoft-typewriting.html",
      "id": "https://blog.yzketx.online/problem/Microsoft-typewriting.html",
      "summary": "Microsoft拼音卡顿问题",
      "content_html": "<h1> Microsoft拼音卡顿问题</h1>\n<p><strong>PS：</strong><code>在Microsoft拼音卡到无法使用后，使用了一段时间的搜狗输入法，还是怀念Microsoft拼音的设计，于是决定解决其卡顿问题。以下解决方案来自 知乎用户</code></p>\n<hr>\n<h3> 会导致个人输入习惯丢失，不介意推荐使用该方法</h3>\n<blockquote>\n<p>by <a href=\"https://www.zhihu.com/people/wang-wen-long-18-61\" target=\"_blank\" rel=\"noopener noreferrer\">Liekong</a> 浑浑噩噩、东跑西奔</p>\n</blockquote>\n<p>找到自己的输入法的本地词库及配置文件目录，</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>将整个Chs文件夹删除重启即可。如果遇到文件占用等问题可以使用专门的工具或者用U盘启动到WinPE下删除。</p>\n<p>个人估计是用户的输入法配置文件由于各种原因出现了错误或损坏导致的，只好直接删除让输入法重新建一个了。另外删除后应该会删掉用户个人的词频调整配置。</p>\n<hr>\n<blockquote>\n<p>by <a href=\"https://www.zhihu.com/people/ricky_wong\" target=\"_blank\" rel=\"noopener noreferrer\">RickyWong</a> 鹅厂码农，搬砖大师，不务正业程序员</p>\n</blockquote>\n<p>微软拼音卡顿的原因主要有以下四个</p>\n<ol>\n<li>\n<p><strong>后台云计算</strong>；云计算需要联微软的服务器，会有几十上百ping的延迟，快速输入时感觉很明显。</p>\n</li>\n<li>\n<p><strong>自定义词库</strong>；微软的优化不太好，字库越多查询速度越慢</p>\n</li>\n<li>\n<p><strong>多核调度</strong>；输入法进程频繁在不同CPU之间切换，导致进程响应慢</p>\n</li>\n<li>\n<p><strong>进程优先级低</strong>；这一点其实也可以归纳在3中。</p>\n</li>\n</ol>\n<p>下面介绍解决方案，按照下图设置后就基本不会出现卡顿的情况了</p>\n<p>1、<strong>关闭后台云计算</strong></p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110131646805.png\" alt=\"image-20211013164604373\" style=\"zoom:80%;\">\n<p>2、<strong>减少专业词典个数</strong></p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110131650557.png\" alt=\"image-20211013165009324\" style=\"zoom:80%;\">\n<p>3、<strong>设置进程亲和性</strong>，绑定ChsIME.exe 至固定cpu，避免在内核之间频繁切换</p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110112036087.jpeg\" alt=\"img\" style=\"zoom: 67%;\">\n<p>4、<strong>设置进程优先级</strong></p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110112035720.jpeg\" alt=\"img\" style=\"zoom:67%;\">\n",
      "date_published": "2021-10-11T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "踩坑指南"
      ]
    },
    {
      "title": "Python: cls 与 self，@classmethod 与 @staticmethod",
      "url": "https://blog.yzketx.online/problem/Python-cls-self-classmethod-staticmethod.html",
      "id": "https://blog.yzketx.online/problem/Python-cls-self-classmethod-staticmethod.html",
      "summary": "Python: cls 与 self，@classmethod 与 @staticmethod",
      "content_html": "<h1> Python: cls 与 self，@classmethod 与 @staticmethod</h1>\n<blockquote>\n<p>作者：<a href=\"https://www.zhihu.com/people/mamingqing\" target=\"_blank\" rel=\"noopener noreferrer\">秦风</a>，每个人对他所属的社会都有责任，那个社会的弊病也有他一份。</p>\n</blockquote>\n<p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。</p>\n<p>而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。</p>\n<p>这有利于组织代码，把某些应该属于某个类的函数给放到那个类里去，同时有利于命名空间的整洁。</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>首先定义一个类A，类A中有三个函数，foo1为静态函数，用@staticmethod装饰器装饰，这种方法与类有某种关系但不需要使用到实例或者类来参与。如下两种方法都可以正常输出，也就是说既可以作为类的方法使用，也可以作为类的实例的方法使用。</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>foo2为正常的函数，是类的实例的函数，只能通过a调用。</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>foo3为类函数，cls作为第一个参数用来表示类本身. 在类方法中用到，类方法是只与类本身有关而与实例无关的方法。如下两种方法都可以正常输出。</p>\n<div class=\"language-python\" data-ext=\"py\"></div><p>但是通过例子发现staticmethod与classmethod的使用方法和输出结果相同，再看看这两种方法的区别。</p>\n<blockquote>\n<p>既然@staticmethod和@classmethod都可以直接类名.方法名()来调用，那他们有什么区别呢\n从它们的使用上来看,\n@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。\n@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。\n如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。\n而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。</p>\n</blockquote>\n<p>也就是说在classmethod中可以调用类中定义的其他方法、类的属性，但staticmethod只能通过A.a调用类的属性，但无法通过在该函数内部调用A.foo2()。修改上面的代码加以说明：</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>参考资料：</p>\n<p><a href=\"https://blog.csdn.net/handsomekang/article/details/9615239\" target=\"_blank\" rel=\"noopener noreferrer\">飘逸的python - @staticmethod和@classmethod的作用与区别</a></p>\n<p><a href=\"https://www.cnblogs.com/chllovegeyuting/archive/2013/03/14/2960532.html\" target=\"_blank\" rel=\"noopener noreferrer\">python中self，cls - SA高处不胜寒 - 博客园</a></p>\n<p><a href=\"https://blog.csdn.net/qq_22941191/article/details/50732442\" target=\"_blank\" rel=\"noopener noreferrer\">python cls 和 self</a></p>\n",
      "date_published": "2021-10-14T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "踩坑指南"
      ]
    },
    {
      "title": "Jupyter Lab",
      "url": "https://blog.yzketx.online/problem/jupyterlab.html",
      "id": "https://blog.yzketx.online/problem/jupyterlab.html",
      "summary": "Jupyter Lab Extension 报 Error 500 的问题",
      "content_html": "<h1> Jupyter Lab</h1>\n<h2> Extension 报 Error 500 的问题</h2>\n<p>应该是https的SSL网络问题，<code>与VPN有关?</code> 通过以下设置即可：</p>\n<blockquote>\n<p>A quick solution from the internet search was <code>npm config set strict-ssl false</code>, luckily it worked. But as a part of my work environment, I am restricted to set the strict-ssl flag to false.</p>\n<p>Later I found a safe and working solution,</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div></blockquote>\n<p>参考: <a href=\"https://stackoverflow.com/questions/45884752/npm-err-code-unable-to-get-issuer-cert-locally/45884819#45884819\" target=\"_blank\" rel=\"noopener noreferrer\">node.js - npm ERR! code UNABLE_TO_GET_ISSUER_CERT_LOCALLY - Stack Overflow</a></p>\n<h4> 第一次安装此软件</h4>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h4> 更新jupyterlab</h4>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h2> conda虚拟环境下JupyterLab关联Pytorch</h2>\n<div class=\"language-bash\" data-ext=\"sh\"></div>",
      "date_published": "2021-10-28T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "踩坑指南"
      ]
    },
    {
      "title": "踩坑指南",
      "url": "https://blog.yzketx.online/problem/",
      "id": "https://blog.yzketx.online/problem/",
      "summary": "::: details deprecated 目录 Conda - Downloaded bytes did not match Content-Length (Conda-Downloaded-bytes-did-not-match-Content-Length.md) 2021.10.13 Microsoft 拼音卡顿问题 (Microsoft-t...",
      "content_html": "",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "踩坑指南"
      ]
    },
    {
      "title": "vim 常见问题",
      "url": "https://blog.yzketx.online/problem/vim.html",
      "id": "https://blog.yzketx.online/problem/vim.html",
      "summary": "vim 常见问题 问题 1",
      "content_html": "<h1> vim 常见问题</h1>\n<h2> 问题 1</h2>\n<p>在 Windows Powershell 中通过 vim 编辑并保存文件，会多出 <code>.filename.un~</code> &amp; <code>.filename~</code> 文件</p>\n<blockquote>\n<p>此分别为 vim 的 undo 备份文件 及 内容备份文件，</p>\n<p>不需要 可删去 并 关闭功能</p>\n</blockquote>\n<h3> 解决 1</h3>\n<ol>\n<li>\n<p>找到安装目录下的 _vimrc ( Linux 为 ~/.vimrc )，在文件末尾插入:</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div></li>\n</ol>\n<hr>\n<h2> 问题 2</h2>\n<p>在 Windows Powershell 中通过 vim 编辑文件，输入中文后保存，再 cat 输出时乱码，如下：</p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110301629336.png\" alt=\"image-20211030162917305\" style=\"zoom: 67%;\">\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110301629779.png\" alt=\"image-20211030162933751\" style=\"zoom:67%;\">\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110301628299.png\" alt=\"image-20211030162837202\" style=\"zoom:67%;\">\n<h3> 解决 2</h3>\n<ol>\n<li>\n<p>找到安装目录下的 _vimrc ( Linux 为 ~/.vimrc )，在文件末尾插入:</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div></li>\n<li>\n<p>然后打开文件，将内容拷贝到新文件后重新保存即可。</p>\n<blockquote>\n<p>或者使用 Sublime Text 等工具将旧文件重新编码为 utf-8 格式</p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202110301650337.png\" alt=\"image-20211030165034250\" style=\"zoom: 25%;\">\n</blockquote>\n</li>\n</ol>\n",
      "date_published": "2021-10-30T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "踩坑指南"
      ]
    },
    {
      "title": "微信小程序后端开发踩坑之Django",
      "url": "https://blog.yzketx.online/problem/wechat-backend-Django.html",
      "id": "https://blog.yzketx.online/problem/wechat-backend-Django.html",
      "summary": "微信小程序后端开发踩坑之Django",
      "content_html": "<h1> 微信小程序后端开发踩坑之Django</h1>\n<h3> 1. Virtualenv虚拟环境的创建、激活、及退出</h3>\n<blockquote>\n<p>virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响。</p>\n</blockquote>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>默认情况下，虚拟环境会依赖系统环境中的site packages，如果不想依赖这些package，那么可以加上参数 --no-site-packages建立虚拟环境：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>如果本地存在多 Python 版本，可在创建时指定，如：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>如果没有启动虚拟环境，系统也安装了pip工具，那么套件将被安装在系统环境中，为了避免发生此事，可以在~/.bashrc文件中加上：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>或者让在执行pip的时候让系统自动开启虚拟环境：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><h4> Virtualenvwrapper</h4>\n<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p>\n<ul>\n<li>\n<p>将所有虚拟环境整合在一个目录下</p>\n</li>\n<li>\n<p>管理（新增，删除，复制）虚拟环境</p>\n</li>\n<li>\n<p>快速切换虚拟环境</p>\n</li>\n</ul>\n<p>安装方法</p>\n<p>1、运行</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>2、创建目录用来存放虚拟环境</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>3、在.bashrc中添加</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>4、运行：</p>\n<div class=\"language-bash\" data-ext=\"sh\"></div><p>此时 virtualenvwrapper 就可以使用了。</p>\n<p>命令列表</p>\n<ul>\n<li>\n<p>workon: 列出虚拟环境列表</p>\n</li>\n<li>\n<p>lsvirtualenv: 同上</p>\n</li>\n<li>\n<p>mkvirtualenv: 新建虚拟环境</p>\n</li>\n<li>\n<p>workon [虚拟环境名称]: 切换虚拟环境</p>\n</li>\n<li>\n<p>rmvirtualenv: 删除虚拟环境</p>\n</li>\n<li>\n<p>deactivate: 离开虚拟环境</p>\n</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"sh\"></div>",
      "date_published": "2021-10-20T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "踩坑指南"
      ]
    },
    {
      "title": "Vue 跨平台性能优化十法",
      "url": "https://blog.yzketx.online/reprint/Vue-improve10.html",
      "id": "https://blog.yzketx.online/reprint/Vue-improve10.html",
      "summary": "Vue 跨平台性能优化十法",
      "content_html": "<h1> Vue 跨平台性能优化十法</h1>\n<blockquote>\n<p>作者：bartonwang，腾讯 IEG 客户端开发工程师</p>\n</blockquote>\n<p>Vue 是一套用于构建用户界面的渐进式的 JavaScript 框架。具有体积小，更高的运行效率，双向数据绑定，生态丰富、学习成本低等优点，所以 Vue 也被广泛用在移动端跨平台框架上。Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分， 我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM，但是我们仍然需要去关注 Vue 在跨平台项目性能方面的优化，使项目具有更高效的性能、更好的用户体验。</p>\n<h3> 1. v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</h3>\n<p>在列表数据进行遍历渲染时，需要为每一项 item 设置唯一 key 值，方便 Vue.js 内部机制精准找到该条列表数据。当 state 更新时，新的状态值和旧的状态值对比，较快地定位到 diff 。我们在使用的使用经常会使用 index(即数组的下标)来作为 key,但其实这是不推荐的一种使用方法;</p>\n<p>举个例子：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在最后一条数据后再加一条数据：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此时前三条数据直接复用之前的，新渲染最后一条数据，此时用 index 作为 key，没有任何问题，在中间插入一条数据：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此时更新渲染数据,通过 index 定义的 key 去进行前后数据的对比，发现：</p>\n<div class=\"language-sql\" data-ext=\"sql\"></div><p>通过上面清晰的对比，发现除了第一个数据可以复用之前的之外,另外三条数据都需要重新渲染。是不是很惊奇，我明明只是插入了一条数据，怎么三条数据都要重新渲染？而我想要的只是新增的那一条数据新渲染出来就行了。最好的办法是使用数组中不会变化的那一项作为 key 值，对应到项目中，即每条数据都有一个唯一的 id，来标识这条数据的唯一性;</p>\n<p>使用 id 作为 key 值，我们再来对比一下向中间插入一条数据，此时会怎么去渲染：</p>\n<div class=\"language-sql\" data-ext=\"sql\"></div><p>现在对比发现只有一条数据变化了，就是 id 为 4 的那条数据，因此只要新渲染这一条数据就可以了,其他都是就复用之前的。</p>\n<p>总结：所以一句话，key 的作用主要是为了高效的更新虚拟 DOM。另外 vue 中在使用相同标签名元素的过渡切换时，也会使用到 key 属性，其目的也是为了让 vue 可以区分它们，否则 vue 只会替换其内部属性而不会触发过渡效果。</p>\n<p>v-for 遍历避免同时使用 v-if，v-for 比 v-if 优先级高，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候，必要情况下应该替换成 computed 属性。</p>\n<h3> 2. 长列表性能优化</h3>\n<p>Vue 会通过 Object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 Vue 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 Vue 劫持我们的数据呢？可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3. vue 组件中的 data 是函数而不是对象</h3>\n<div class=\"language-javascript\" data-ext=\"js\"></div><p>而非如下所示：</p>\n<div class=\"language-javascript\" data-ext=\"js\"></div><p>当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例，复用在多个页面。</p>\n<p>如果 data 是一个纯碎的对象，则所有的实例将共享引用同一份 data 数据对象，无论在哪个组件实例中修改 data，都会影响到所有的组件实例。如果 data 是函数，每次创建一个新实例后，调用 data 函数，从而返回初始数据的一个全新副本数据对象。这样每复用一次组件，会返回一份新的 data 数据，类似于给每个组件实例创建一个私有的数据空间，让各个组件的实例各自独立，互不影响保持低耦合。</p>\n<h3> 4. Vue 钩子函数之钩子事件 hookEvent,监听组件简化代码</h3>\n<p>用法：</p>\n<ol>\n<li>通过 $on(eventName, eventHandler) 侦听一个事件；</li>\n<li>通过 $once(eventName,eventHandler) 一次性侦听一个事件；</li>\n<li>通过 $off(eventName, eventHandler) 停止侦听一个事件；</li>\n</ol>\n<p>通常实现一个定时器的调用与销毁我可能会以以下方式实现：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这种方法存在的问题是：</p>\n<p>vue 实例中需要有这个定时器的实例，感觉有点多余。创建的定时器代码和销毁定时器的代码没有放在一起，不容易维护，通常很容易忘记去清理这个定时器。</p>\n<p>使用 监听beforeDestory生命周期可以避免该问题，并且因为只需要监听一次，所以使用 $once 进行注册监听。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 5. 组件懒加载</h3>\n<p>在单页应用中，如果没有应用懒加载，运用 webpack 打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，延时过长，不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时。</p>\n<blockquote>\n<p>Vue.js 2.0 组件级懒加载方案</p>\n</blockquote>\n<ul>\n<li>支持 组件可见或即将可见时懒加载</li>\n<li>支持 组件延时加载</li>\n<li>支持 加载真实组件前展示骨架组件，提高用户体验</li>\n<li>支持 真实组件代码分包异步加载</li>\n</ul>\n<p>安装</p>\n<p>npm install @xunlei/vue-lazy-component</p>\n<p>在组件中实现局部注册组件：</p>\n<div class=\"language-javascript\" data-ext=\"js\"></div><p>需要懒加载的组件将其包裹在 vue-lazy-component 中，slot 值为 skeleton 指的是在懒加载过程中显示的加载状态组件：</p>\n<div class=\"language-html\" data-ext=\"html\"></div><h3> 6. 非响应式数据</h3>\n<p>初始化时，vue 会对 data 做 getter、setter 改造。在 Vue 的文档中介绍数据绑定和响应时，特意标注了对于经过 Object.freeze() 方法的对象无法进行更新响应。</p>\n<p><strong>性能提升对比</strong></p>\n<p>在基于 Vue 的一个 big table benchmark 里，可以看到在渲染一个一个 1000 x 10 的表格的时候，开启 Object.freeze()前后重新渲染的对比。</p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-1.png\" alt=\"image\" style=\"zoom: 67%;\">\n<p><strong>开启优化之前：</strong></p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-2.png\" alt=\"image\" style=\"zoom: 50%;\">\n<p><strong>开启优化之后：</strong></p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-3.png\" alt=\"image\" style=\"zoom: 50%;\">\n<p>在这个例子里,使用了 Object.freeze()比不使用快了 4 倍，为什么 Object.freeze()的性能会更好？</p>\n<p><strong>不使用 Object.freeze()的 CPU 开销</strong></p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-4.png\" alt=\"image\" style=\"zoom:67%;\">\n<p><strong>使用 Object.freeze()的 CPU 开销</strong></p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-5.png\" alt=\"image\" style=\"zoom:67%;\">\n<p>对比可以看出，使用了 Object.freeze()之后，减少了 observer 的开销。</p>\n<h3> 7. 不要将所有的数据都放到 data 中</h3>\n<p>data 中的数据都会增加 getter 和 setter，又会收集 watcher，这样还占内存。不需要响应式的数据我们可以定义在实例上。</p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-6.png\" alt=\"image\" style=\"zoom:67%;\">\n<h3> 8. v-for元素绑定事件代理</h3>\n<p>事件代理作用主要是 2 个：</p>\n<ol>\n<li>将事件处理程序代理到父节点，减少内存占用率</li>\n<li>动态生成子节点时能自动绑定事件处理程序到父节点</li>\n</ol>\n<p>1、不使用事件代理，每个 span 节点绑定一个 click 事件，并指向同一个事件处理程序</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>2、不使用事件代理，每个 span 节点绑定一个 click 事件，并指向不同的事件处理程序</p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>3、使用事件代理</p>\n<div class=\"language-html\" data-ext=\"html\"></div><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-7.png\" alt=\"image\" style=\"zoom:67%;\">\n<p>可以看到使用事件代理无论是监听器数量和内存占用率都比前两者要少，同时对比 3 个图中监听器的数量并没有发现 vue 会自动做事件代理，但是一般给 v-for 绑定事件时，都会让节点指向同一个事件处理程序（第二种情况可以运行，但是 eslint 会警告），一定程度上比每生成一个节点都绑定一个不同的事件处理程序性能好，但是监听器的数量仍不会变，所以使用事件代理会更好一点。</p>\n<p>代码使用：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 9. 函数式组件</h3>\n<p>函数式组件是无状态，它无法实例化，没有任何的生命周期和方法。创建函数式组件也很简单，只需要在模板添加 functional 声明即可。一般适合只依赖于外部数据的变化而变化的组件，因其轻量，渲染性能也会有所提高。</p>\n<p>组件需要的一切都是通过 context 参数传递。它是一个上下文对象，具体属性查看文档。这里 props 是一个包含所有绑定属性的对象。</p>\n<p>函数式组件：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-8.png\" alt=\"图片\" tabindex=\"0\"><figcaption>图片</figcaption></figure>\n<h3> 10. provide 和 inject 组件通信</h3>\n<p>痛点：常用的父子组件通信方式都是父组件绑定要传递给子组件的数据，子组件通过 props 属性接收，一旦组件层级变多时，采用这种方式一级一级传递值非常麻烦，而且代码可读性不高，不便后期维护。</p>\n<p>vue 提供了 provide 和 inject 帮助我们解决多层次嵌套嵌套通信问题。在 provide 中指定要传递给子孙组件的数据，子孙组件通过 inject 注入祖父组件传递过来的数据，可以轻松实现跨级访问父组件的数据。</p>\n<p>provide：是一个对象，或者是一个返回对象的函数。里面呢就包含要给子孙后代的东西，也就是属性和属性值。注意：子孙层的 provide 会掩盖祖父层 provide 中相同 key 的属性值。</p>\n<p>inject：一个字符串数组，或者是一个对象。属性值可以是一个对象，包含 from 和 default 默认值，from 是在可用的注入内容中搜索用的 key (字符串或 Symbol)，意思就是祖父多层 <strong>provide</strong> 提供了很多数据， <strong>from</strong> 属性指定取哪一个 <strong>key</strong> default 指定默认值。</p>\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-9.png\" alt=\"image\" style=\"zoom: 80%;\">\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-10.png\" alt=\"image\" style=\"zoom:67%;\">\n<img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-11.png\" alt=\"image\" style=\"zoom: 80%;\">\n<p>从上面这个例子可以看出，只要在父组件中调用了，那么在这个父组件生效的生命周期内，所有的子组件都可以调用 inject 来注入父组件中的值。</p>\n<p>在使用场景中，肯定是希望父组件的数据一旦发生改变，子孙组件获取到的也是父组件更新后的数据。那么，怎么实现父组件与子孙组件所绑定的数据动态响应呢？</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最近其他文章</p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;mid=2649764790&amp;idx=1&amp;sn=fc63b1cf5071aa0324987d1e5b3cab71&amp;chksm=becca0cd89bb29db9ecd2292ba8a7b9611e307117fcf988ad3a4955d744bab2bd13b054a6583&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">一套优雅的 Go 错误问题解决方案</a></p>\n<p><strong>腾讯技术工程</strong></p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/2021-10-08-8.png",
      "date_published": "2021-10-08T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "转载整理"
      ]
    },
    {
      "title": "Python 多线程",
      "url": "https://blog.yzketx.online/reprint/pythonMultithreading.html",
      "id": "https://blog.yzketx.online/reprint/pythonMultithreading.html",
      "summary": "Python 多线程 DarrenChan陈驰 国防科技大学 计算机技术硕士",
      "content_html": "<h1> Python 多线程</h1>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/people/chen-chi-40-92\" target=\"_blank\" rel=\"noopener noreferrer\">DarrenChan陈驰</a> 国防科技大学 计算机技术硕士</p>\n</blockquote>\n<p>在介绍Python中的线程之前，先明确一个问题，Python中的<a href=\"https://www.zhihu.com/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A269526476%7D\" target=\"_blank\" rel=\"noopener noreferrer\">多线程</a>是<strong>假的多线程</strong>！ 为什么这么说，我们先明确一个概念，全局解释器锁（GIL）。</p>\n<p>Python代码的执行由Python虚拟机（解释器）来控制。Python在设计之初就考虑要在主循环中，同时只有一个线程在执行，就像单CPU的系统中运行多个进程那样，内存中可以存放多个程序，但任意时刻，只有一个程序在CPU中运行。同样地，虽然Python解释器可以运行多个线程，只有一个线程在解释器中运行。</p>\n<p>对Python虚拟机的访问由全局解释器锁（GIL）来控制，正是这个锁能保证同时只有一个线程在运行。在多线程环境中，Python虚拟机按照以下方式执行。</p>\n<p>1.设置GIL。</p>\n<p>2.切换到一个线程去执行。</p>\n<p>3.运行。</p>\n<p>4.把线程设置为睡眠状态。</p>\n<p>5.解锁GIL。</p>\n<p>6.再次重复以上步骤。</p>\n<p>对所有面向I/O的（会调用内建的操作系统C代码的）程序来说，GIL会在这个I/O调用之前被释放，以允许其他线程在这个线程等待I/O的时候运行。如果某线程并未使用很多I/O操作，它会在自己的时间片内一直占用处理器和GIL。也就是说，I/O密集型的Python程序比计算密集型的Python程序更能充分利用多线程的好处。</p>\n<p>我们都知道，比方我有一个4核的CPU，那么这样一来，在单位时间内每个核只能跑一个线程，然后时间片轮转切换。但是Python不一样，它不管你有几个核，单位时间多个核只能跑一个线程，然后时间片轮转。看起来很不可思议？但是这就是GIL搞的鬼。任何<a href=\"https://www.zhihu.com/search?q=Python%E7%BA%BF%E7%A8%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A269526476%7D\" target=\"_blank\" rel=\"noopener noreferrer\">Python线程</a>执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。</p>\n<p>我们不妨做个试验：</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我的电脑是4核，所以我开了4个线程，看一下CPU资源占有率：</p>\n<figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111302220235.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>我们发现CPU利用率并没有占满，大致相当于单核水平。</p>\n<p>而如果我们变成进程呢？</p>\n<p>我们改一下代码：</p>\n<div class=\"language-python line-numbers-mode\" data-ext=\"py\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111302220169.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>结果直接飙到了100%，说明进程是可以利用多核的！</p>\n<p>为了验证这是Python中的GIL搞得鬼，我试着用Java写相同的代码，开启线程，我们观察一下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><img src=\"https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111302220346.jpeg\" alt=\"img\" tabindex=\"0\"><figcaption>img</figcaption></figure>\n<p>由此可见，Java中的多线程是可以利用多核的，这是真正的多线程！而Python中的多线程只能利用单核，这是假的多线程！</p>\n<p>难道就如此？我们没有办法在Python中利用多核？当然可以！刚才的<a href=\"https://www.zhihu.com/search?q=%E5%A4%9A%E8%BF%9B%E7%A8%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A269526476%7D\" target=\"_blank\" rel=\"noopener noreferrer\">多进程</a>算是一种解决方案，还有一种就是调用C语言的链接库。对所有面向I/O的（会调用内建的操作系统C代码的）程序来说，GIL会在这个I/O调用之前被释放，以允许其他线程在这个线程等待I/O的时候运行。我们可以把一些 计算密集型任务用C语言编写，然后把.so链接库内容加载到Python中，因为执行C代码，GIL锁会释放，这样一来，就可以做到每个核都跑一个线程的目的！</p>\n<p>可能有的小伙伴不太理解什么是<a href=\"https://www.zhihu.com/search?q=%E8%AE%A1%E7%AE%97%E5%AF%86%E9%9B%86%E5%9E%8B%E4%BB%BB%E5%8A%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A269526476%7D\" target=\"_blank\" rel=\"noopener noreferrer\">计算密集型任务</a>，什么是I/O密集型任务？</p>\n<p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算<a href=\"https://www.zhihu.com/search?q=%E5%9C%86%E5%91%A8%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A269526476%7D\" target=\"_blank\" rel=\"noopener noreferrer\">圆周率</a>、对视频进行高清解码等等，全靠CPU的运算能力。这种计算<a href=\"https://www.zhihu.com/search?q=%E5%AF%86%E9%9B%86%E5%9E%8B%E4%BB%BB%E5%8A%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A269526476%7D\" target=\"_blank\" rel=\"noopener noreferrer\">密集型任务</a>虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，<code>计算密集型任务同时进行的数量应当等于CPU的核心数</code>。</p>\n<p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p>\n<p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p>\n<p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p>\n<p>综上，Python多线程相当于<a href=\"https://www.zhihu.com/search?q=%E5%8D%95%E6%A0%B8%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A269526476%7D\" target=\"_blank\" rel=\"noopener noreferrer\">单核多线程</a>，多线程有两个好处：CPU并行，IO并行，单核多线程相当于自断一臂。所以，在Python中，可以使用多线程，但不要指望能有效利用多核。如果一定要通过多线程利用多核，那只能通过C扩展来实现，不过这样就失去了Python简单易用的特点。不过，也不用过于担心，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p>\n<p>分享廖雪峰的博客：<a href=\"https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832360548a6491f20c62d427287739fcfa5d5be1f000\" target=\"_blank\" rel=\"noopener noreferrer\">廖雪峰博客</a></p>\n",
      "image": "https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111302220235.jpeg",
      "date_published": "2021-12-10T00:00:00.000Z",
      "date_modified": "2023-03-07T04:01:21.000Z",
      "authors": [],
      "tags": [
        "转载整理"
      ]
    },
    {
      "title": "转载整理",
      "url": "https://blog.yzketx.online/reprint/",
      "id": "https://blog.yzketx.online/reprint/",
      "summary": "::: details deprecated 目录 Vue 跨平台性能优化十法 (Vue-improve10.md) From 腾讯技术工程 2021.10.08 Python多线程 (pythonMultithreading.md) 2021.12.10 如何使用RedisTemplate访问Redis数据结构 (redis-template.md)...",
      "content_html": "",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "转载整理"
      ]
    },
    {
      "title": "如何使用RedisTemplate访问Redis数据结构",
      "url": "https://blog.yzketx.online/reprint/redis-template.html",
      "id": "https://blog.yzketx.online/reprint/redis-template.html",
      "summary": "如何使用RedisTemplate访问Redis数据结构",
      "content_html": "<h1> 如何使用RedisTemplate访问Redis数据结构</h1>\n<blockquote>\n<p>整理自 <a href=\"https://www.jianshu.com/p/7bf5dc61ca06/\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用RedisTemplate访问Redis数据结构 - 简书 (jianshu.com)</a></p>\n</blockquote>\n<p>[TOC]</p>\n<h2> Redis 数据结构简介</h2>\n<p>Redis 可以存储键与5种不同数据结构类型之间的映射，这5种数据结构类型分别为String（字符串）、List（列表）、Set（集合）、Hash（散列）和 Zset（有序集合）。</p>\n<p>下面来对这5种数据结构类型作简单的介绍：</p>\n<table>\n<thead>\n<tr>\n<th>结构类型</th>\n<th style=\"text-align:center\">结构存储的值</th>\n<th style=\"text-align:right\">结构的读写能力</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td style=\"text-align:center\">可以是字符串、整数或者浮点数</td>\n<td style=\"text-align:right\">对整个字符串或者字符串的其中一部分执行操作；对象和浮点数执行自增(increment)或者自减(decrement)</td>\n</tr>\n<tr>\n<td>List</td>\n<td style=\"text-align:center\">一个链表，链表上的每个节点都包含了一个字符串</td>\n<td style=\"text-align:right\">从链表的两端推入或者弹出元素；根据偏移量对链表进行修剪(trim)；读取单个或者多个元素；根据值来查找或者移除元素</td>\n</tr>\n<tr>\n<td>Set</td>\n<td style=\"text-align:center\">包含字符串的无序收集器(unorderedcollection)，并且被包含的每个字符串都是独一无二的、各不相同</td>\n<td style=\"text-align:right\">添加、获取、移除单个元素；检查一个元素是否存在于某个集合中；计算交集、并集、差集；从集合里卖弄随机获取元素</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td style=\"text-align:center\">包含键值对的无序散列表</td>\n<td style=\"text-align:right\">添加、获取、移除单个键值对；获取所有键值对</td>\n</tr>\n<tr>\n<td>Zset</td>\n<td style=\"text-align:center\">字符串成员(member)与浮点数分值(score)之间的有序映射，元素的排列顺序由分值的大小决定</td>\n<td style=\"text-align:right\">添加、获取、删除单个元素；根据分值范围(range)或者成员来获取元素</td>\n</tr>\n</tbody>\n</table>\n<p>Redis 5种数据结构的概念大致介绍到这边，下面将结合Spring封装的RedisTemplate来对这5种数据结构的运用进行演示</p>\n<h2> RedisTemplate介绍</h2>\n<p>spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api。</p>\n<p><strong>RedisTemplate在spring代码中的结构如下：</strong></p>\n<div class=\"language-java\" data-ext=\"java\"></div><p>Type Parameters:</p>\n<ul>\n<li>\n<p><strong>K</strong></p>\n<p>the Redis key type against which the template works (usually a String)\n模板中的Redis key的类型（通常为String）如：RedisTemplate&lt;String, Object&gt;\n注意：<strong>如果没特殊情况，切勿定义成RedisTemplate&lt;Object, Object&gt;</strong>，否则根据里氏替换原则，使用的时候会造成类型错误 。</p>\n</li>\n<li>\n<p><strong>V</strong></p>\n<p>the Redis value type against which the template works\n模板中的Redis value的类型</p>\n</li>\n</ul>\n<h3> RedisTemplate中定义了对5种数据结构操作</h3>\n<div class=\"language-java\" data-ext=\"java\"></div><h2> StringRedisTemplate与RedisTemplate</h2>\n<ul>\n<li>\n<p>两者的关系是StringRedisTemplate继承RedisTemplate。</p>\n</li>\n<li>\n<p>两者的数据是不共通的；也就是说StringRedisTemplate只能管理StringRedisTemplate里面的数据，RedisTemplate只能管理RedisTemplate中的数据。</p>\n</li>\n<li>\n<p>SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。</p>\n<p>StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。</p>\n<p>RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</p>\n</li>\n</ul>\n<p><strong>RedisTemplate配置如下：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Redis的String数据结构 （推荐使用StringRedisTemplate）</h2>\n<p><strong>注意：如果使用RedisTemplate需要更改序列化方式</strong></p>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>set void set(K key, V value);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>set void set(K key, V value, long timeout, TimeUnit unit);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>set void set(K key, V value, long offset);\n该方法是用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>setIfAbsent Boolean setIfAbsent(K key, V value);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>multiSet void multiSet(Map&lt;? extends K, ? extends V&gt; m);\n为多个键分别设置它们的值</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>multiSetIfAbsent Boolean multiSetIfAbsent(Map&lt;? extends K, ? extends V&gt; m);\n为多个键分别设置它们的值，如果存在则返回false，不存在返回true</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>get V get(Object key);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>getAndSet V getAndSet(K key, V value);\n设置键的字符串值并返回其旧值</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>multiGet List&lt;V&gt; multiGet(Collection&lt;K&gt; keys);\n为多个键分别取出它们的值</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>increment Long increment(K key, long delta);\n支持整数</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>increment Double increment(K key, double delta);\n也支持浮点数</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>append Integer append(K key, String value);\n如果key已经存在并且是一个字符串，则该命令将该值追加到字符串的末尾。如果键不存在，则它被创建并设置为空字符串，因此APPEND在这种特殊情况下将类似于SET。</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>get String get(K key, long start, long end);\n截取key所对应的value字符串</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>size Long size(K key);\n返回key所对应的value值得长度</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>setBit Boolean setBit(K key, long offset, boolean value);\n对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)\nkey键对应的值value对应的ascii码,在offset的位置(从左向右数)变为value</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>getBit Boolean getBit(K key, long offset);\n获取键对应值的ascii码的在offset处位值</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><h2> Redis的List数据结构</h2>\n<p><strong>这边我们把RedisTemplate序列化方式改回之前的</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>public interface ListOperations&lt;K,V&gt;</strong></p>\n<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）</p>\n<p>ListOperations专门操作list列表：</p>\n<ul>\n<li>List&lt;V&gt; range(K key, long start, long end);\n返回存储在键中的列表的指定元素。偏移开始和停止是基于零的索引，其中0是列表的第一个元素（列表的头部），1是下一个元素</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>void trim(K key, long start, long end);\n修剪现有列表，使其只包含指定的指定范围的元素，起始和停止都是基于0的索引</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long size(K key);\n返回存储在键中的列表的长度。如果键不存在，则将其解释为空列表，并返回0。当key存储的值不是列表时返回错误。</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long leftPush(K key, V value);\n将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从左边插入）</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long leftPushAll(K key, V... values);\n批量把一个数组插入到列表中</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long leftPushAll(K key, Collection&lt;V&gt; values);\n批量把一个集合插入到列表中</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long leftPushIfPresent(K key, V value);\n只有存在key对应的列表才能将这个value值插入到key所对应的列表中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long leftPush(K key, V pivot, V value);\n把value值放到key对应列表中pivot值的左面，如果pivot值存在的话</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long rightPush(K key, V value);\n将所有指定的值插入存储在键的列表的头部。如果键不存在，则在执行推送操作之前将其创建为空列表。（从右边插入）</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long rightPushAll(K key, V... values);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long rightPushAll(K key, Collection&lt;V&gt; values);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long rightPushIfPresent(K key, V value);\n只有存在key对应的列表才能将这个value值插入到key所对应的列表中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long rightPush(K key, V pivot, V value);\n把value值放到key对应列表中pivot值的右面，如果pivot值存在的话</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>void set(K key, long index, V value);\n在列表中index的位置设置value值</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long remove(K key, long count, Object value);\n从存储在键中的列表中删除等于值的元素的第一个计数事件。\n计数参数以下列方式影响操作：\ncount&gt; 0：删除等于从头到尾移动的值的元素。\ncount &lt;0：删除等于从尾到头移动的值的元素。\ncount = 0：删除等于value的所有元素。</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V index(K key, long index);\n根据下表获取列表中的值，下标是从0开始的</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V leftPop(K key);\n弹出最左边的元素，弹出之后该值在列表中将不复存在</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V leftPop(K key, long timeout, TimeUnit unit);\n移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V rightPop(K key);\n弹出最右边的元素，弹出之后该值在列表中将不复存在</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V rightPop(K key, long timeout, TimeUnit unit);\n移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V rightPopAndLeftPush(K sourceKey, K destinationKey);\n用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V rightPopAndLeftPush(K sourceKey, K destinationKey, long timeout, TimeUnit unit);\n用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><h2> Redis的Hash数据机构</h2>\n<p>Redis的散列可以让用户将多个键值对存储到一个Redis键里面。</p>\n<p><strong>public interface HashOperations&lt;H,HK,HV&gt;</strong></p>\n<p>HashOperations提供一系列方法操作hash：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long delete(H key, Object... hashKeys);\n删除给定的哈希hashKeys</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Boolean hasKey(H key, Object hashKey);\n确定哈希hashKey是否存在</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>HV get(H key, Object hashKey);\n从键中的哈希获取给定hashKey的值</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>List&lt;HV&gt; multiGet(H key, Collection&lt;HK&gt; hashKeys);\n从哈希中获取给定hashKey的值</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long increment(H key, HK hashKey, long delta);\n通过给定的delta增加散列hashKey的值（整型）</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Double increment(H key, HK hashKey, double delta);\n通过给定的delta增加散列hashKey的值（浮点数）</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;HK&gt; keys(H key);\n获取key所对应的散列表的key</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long size(H key);\n获取key所对应的散列表的大小个数</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>void putAll(H key, Map&lt;? extends HK, ? extends HV&gt; m);\n使用m中提供的多个散列字段设置到key对应的散列表中</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>void put(H key, HK hashKey, HV value);\n设置散列hashKey的值</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Boolean putIfAbsent(H key, HK hashKey, HV value);\n仅当hashKey不存在时才设置散列hashKey的值。</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>List&lt;HV&gt; values(H key);\n获取整个哈希存储的值根据密钥</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Map&lt;HK, HV&gt; entries(H key);\n获取整个哈希存储根据密钥</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Cursor&lt;Map.Entry&lt;HK, HV&gt;&gt; scan(H key, ScanOptions options);\n使用Cursor在key的hash中迭代，相当于迭代器。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Redis的Set数据结构</h2>\n<p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>\n<p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>\n<p><strong>public interface SetOperations&lt;K,V&gt;</strong></p>\n<p>SetOperations提供了对无序集合的一系列操作：</p>\n<ul>\n<li>Long add(K key, V... values);\n无序集合中添加元素，返回添加个数\n也可以直接在add里面添加多个值 如：template.opsForSet().add(\"setTest\",\"aaa\",\"bbb\")</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long remove(K key, Object... values);\n移除集合中一个或多个成员</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V pop(K key);\n移除并返回集合中的一个随机元素</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Boolean move(K key, V value, K destKey);\n将 member 元素从 source 集合移动到 destination 集合</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long size(K key);\n无序集合的大小长度</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Boolean isMember(K key, Object o);\n判断 member 元素是否是集合 key 的成员</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;V&gt; intersect(K key, K otherKey);\nkey对应的无序集合与otherKey对应的无序集合求交集</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;V&gt; intersect(K key, Collection&lt;K&gt; otherKeys);\nkey对应的无序集合与多个otherKey对应的无序集合求交集</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long intersectAndStore(K key, K otherKey, K destKey);\nkey无序集合与otherkey无序集合的交集存储到destKey无序集合中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long intersectAndStore(K key, Collection&lt;K&gt; otherKeys, K destKey);\nkey对应的无序集合与多个otherKey对应的无序集合求交集存储到destKey无序集合中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Set&lt;V&gt; union(K key, K otherKey);\nkey无序集合与otherKey无序集合的并集</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;V&gt; union(K key, Collection&lt;K&gt; otherKeys);\nkey无序集合与多个otherKey无序集合的并集</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long unionAndStore(K key, K otherKey, K destKey);\nkey无序集合与otherkey无序集合的并集存储到destKey无序集合中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long unionAndStore(K key, Collection&lt;K&gt; otherKeys, K destKey);\nkey无序集合与多个otherkey无序集合的并集存储到destKey无序集合中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Set&lt;V&gt; difference(K key, K otherKey);\nkey无序集合与otherKey无序集合的差集</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;V&gt; difference(K key, Collection&lt;K&gt; otherKeys);\nkey无序集合与多个otherKey无序集合的差集</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long differenceAndStore(K key, K otherKey, K destKey);\nkey无序集合与otherkey无序集合的差集存储到destKey无序集合中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long differenceAndStore(K key, Collection&lt;K&gt; otherKeys, K destKey);\nkey无序集合与多个otherkey无序集合的差集存储到destKey无序集合中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Set&lt;V&gt; members(K key);\n返回集合中的所有成员</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>V randomMember(K key);\n随机获取key无序集合中的一个元素</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Set&lt;V&gt; distinctRandomMembers(K key, long count);\n获取多个key无序集合中的元素（去重），count表示个数</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>List&lt;V&gt; randomMembers(K key, long count);\n获取多个key无序集合中的元素，count表示个数</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Cursor&lt;V&gt; scan(K key, ScanOptions options);\n遍历set</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Redis的ZSet数据结构</h2>\n<p>Redis 有序集合和无序集合一样也是string类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>\n<p><strong>public interface ZSetOperations&lt;K,V&gt;</strong></p>\n<p>ZSetOperations提供了一系列方法对有序集合进行操作：</p>\n<ul>\n<li>Boolean add(K key, V value, double score);\n新增一个有序集合，存在的话为false，不存在的话为true</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long add(K key, Set&lt;TypedTuple&lt;V&gt;&gt; tuples);\n新增一个有序集合</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long remove(K key, Object... values);\n从有序集合中移除一个或者多个元素</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Double incrementScore(K key, V value, double delta);\n增加元素的score值，并返回增加后的值</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long rank(K key, Object o);\n返回有序集中指定成员的排名，其中有序集成员按分数值递增(从小到大)顺序排列</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long reverseRank(K key, Object o);\n返回有序集中指定成员的排名，其中有序集成员按分数值递减(从大到小)顺序排列</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;V&gt; range(K key, long start, long end);\n通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;TypedTuple&lt;V&gt;&gt; rangeWithScores(K key, long start, long end);\n通过索引区间返回有序集合成指定区间内的成员对象，其中有序集成员按分数值递增(从小到大)顺序排列</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Set&lt;V&gt; rangeByScore(K key, double min, double max);\n通过分数返回有序集合指定区间内的成员，其中有序集成员按分数值递增(从小到大)顺序排列</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;TypedTuple&lt;V&gt;&gt; rangeByScoreWithScores(K key, double min, double max);\n通过分数返回有序集合指定区间内的成员对象，其中有序集成员按分数值递增(从小到大)顺序排列</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Set&lt;V&gt; rangeByScore(K key, double min, double max, long offset, long count);\n通过分数返回有序集合指定区间内的成员，并在索引范围内，其中有序集成员按分数值递增(从小到大)顺序排列</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;TypedTuple&lt;V&gt;&gt; rangeByScoreWithScores(K key, double min, double max, long offset, long count);\n通过分数返回有序集合指定区间内的成员对象，并在索引范围内，其中有序集成员按分数值递增(从小到大)顺序排列</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Set&lt;V&gt; reverseRange(K key, long start, long end);\n通过索引区间返回有序集合成指定区间内的成员，其中有序集成员按分数值递减(从大到小)顺序排列</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;TypedTuple&lt;V&gt;&gt; reverseRangeWithScores(K key, long start, long end);\n通过索引区间返回有序集合成指定区间内的成员对象，其中有序集成员按分数值递减(从大到小)顺序排列</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Set&lt;V&gt; reverseRangeByScore(K key, double min, double max);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;TypedTuple&lt;V&gt;&gt; reverseRangeByScoreWithScores(K key, double min, double max);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;V&gt; reverseRangeByScore(K key, double min, double max, long offset, long count);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Set&lt;TypedTuple&lt;V&gt;&gt; reverseRangeByScoreWithScores(K key, double min, double max, long offset, long count);</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long count(K key, double min, double max);\n通过分数返回有序集合指定区间内的成员个数</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long size(K key);\n获取有序集合的成员数，内部调用的就是zCard方法</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long zCard(K key);\n获取有序集合的成员数</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Double score(K key, Object o);\n获取指定成员的score值</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long removeRange(K key, long start, long end);\n移除指定索引位置的成员，其中有序集成员按分数值递增(从小到大)顺序排列</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\"></div><ul>\n<li>Long removeRangeByScore(K key, double min, double max);\n根据指定的score值得范围来移除成员</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long unionAndStore(K key, K otherKey, K destKey);\n计算给定的一个有序集的并集，并存储在新的 destKey中，key相同的话会把score值相加</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long unionAndStore(K key, Collection&lt;K&gt; otherKeys, K destKey);\n计算给定的多个有序集的并集，并存储在新的 destKey中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long intersectAndStore(K key, K otherKey, K destKey);\n计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Long intersectAndStore(K key, Collection&lt;K&gt; otherKeys, K destKey);\n计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>Cursor&lt;TypedTuple&lt;V&gt;&gt; scan(K key, ScanOptions options);\n遍历zset</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>注：TimeUnit是java.util.concurrent包下面的一个类，表示给定单元粒度的时间段</p>\n<p>常用的颗粒度：\nTimeUnit.DAYS //天\nTimeUnit.HOURS //小时\nTimeUnit.MINUTES //分钟\nTimeUnit.SECONDS //秒\nTimeUnit.MILLISECONDS //毫秒</p>\n</blockquote>\n",
      "date_published": "2022-01-13T00:00:00.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "转载整理"
      ]
    },
    {
      "title": "组件禁用",
      "url": "https://blog.yzketx.online/tip/disable.html",
      "id": "https://blog.yzketx.online/tip/disable.html",
      "summary": "你可以通过设置页面的 Frontmatter，在页面禁用一些功能。",
      "content_html": "<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>\n<!-- more -->\n<p>本页面应当禁用了:</p>\n<ul>\n<li>导航栏</li>\n<li>侧边栏</li>\n<li>路径导航</li>\n<li>页面信息</li>\n<li>贡献者</li>\n<li>编辑此页链接</li>\n<li>更新时间</li>\n<li>上一篇/下一篇 链接</li>\n<li>评论</li>\n<li>页脚</li>\n<li>返回顶部按钮</li>\n</ul>\n",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-02-27T15:10:47.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "自定义布局",
      "url": "https://blog.yzketx.online/tip/layout.html",
      "id": "https://blog.yzketx.online/tip/layout.html",
      "summary": "您可以使用带有 Markdown 支持的插槽来自定义页面布局。",
      "content_html": "<p>您可以使用带有 Markdown 支持的插槽来自定义页面布局。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>此处仅仅是一个演示，你应该自行根据需求添加样式。</p>\n</div>\n<p>::: slot page-top</p>\n<p>页面顶部内容</p>\n<p>:::</p>\n<p>::: slot page-bottom</p>\n<p>页面底部内容</p>\n<p>:::</p>\n<p>::: slot content-top</p>\n<p>内容顶部内容</p>\n<p>:::</p>\n<p>::: slot content-bottom</p>\n<p>内容底部内容</p>\n<p>:::</p>\n<p>::: slot navbar-start</p>\n<p>导航栏起始内容</p>\n<p>:::</p>\n<p>::: slot navbar-center</p>\n<p>导航栏中部内容</p>\n<p>:::</p>\n<p>::: slot navbar-end</p>\n<p>导航栏末尾内容</p>\n<p>:::</p>\n<p>::: slot sidebar-top</p>\n<p>侧边栏顶部内容</p>\n<p>:::</p>\n<p>::: slot sidebar-center</p>\n<p>侧边栏中部内容</p>\n<p>:::</p>\n<p>::: slot sidebar-bottom</p>\n<p>侧边栏底部内容</p>\n<p>:::</p>\n<p>更多详情，详见 <a href=\"https://vuepress-theme-hope.github.io/zh/guide/layout/custom/\" target=\"_blank\" rel=\"noopener noreferrer\">自定义布局</a>.</p>\n",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "页面配置",
      "url": "https://blog.yzketx.online/tip/page.html",
      "id": "https://blog.yzketx.online/tip/page.html",
      "summary": "页面信息 你可以在 Markdown 的 Frontmatter 中设置页面信息。",
      "content_html": "<h2> 页面信息</h2>\n<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>\n<ul>\n<li>\n<p>作者设置为 yzk。</p>\n</li>\n<li>\n<p>写作时间应为 2020 年 1 月 1 日</p>\n</li>\n<li>\n<p>分类为 “使用指南”</p>\n</li>\n<li>\n<p>标签为 “页面配置” 和 “使用指南”</p>\n</li>\n</ul>\n<h2> 页面内容</h2>\n<p>你可以自由在这里书写你的 Markdown。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<ul>\n<li>\n<p>Markdown 文件夹的图片请使用相对链接 <code>./</code> 进行引用。</p>\n</li>\n<li>\n<p><code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用</p>\n</li>\n</ul>\n</div>\n<p>主题包含了一个自定义徽章章可以使用:</p>\n<blockquote>\n<p>文字结尾应该有深蓝色的 徽章文字 徽章。 </p>\n</blockquote>\n<h2> 页面结构</h2>\n<p>此页面应当包含：</p>\n<ul>\n<li>返回顶部按钮</li>\n<li>路径导航</li>\n<li>评论</li>\n<li>页脚</li>\n</ul>\n",
      "date_published": "2020-01-01T00:00:00.000Z",
      "date_modified": "2023-02-27T15:10:47.000Z",
      "authors": [
        {
          "name": "yzk"
        }
      ],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "主要功能与配置演示",
      "url": "https://blog.yzketx.online/tip/",
      "id": "https://blog.yzketx.online/tip/",
      "summary": "::: details deprecated 页面展示 (page.md); Markdown 展示 (markdown/); 禁用展示 (disable.md); 加密展示 (encrypt.md); :::",
      "content_html": "",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-06T16:35:04.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "幻灯片页",
      "url": "https://blog.yzketx.online/tip/slides.html",
      "id": "https://blog.yzketx.online/tip/slides.html",
      "summary": "slidestart 幻灯片演示 一个简单的==幻灯片==演示与各种小贴士。 作者 zkye. 请滚动鼠标滚轮进入下一页 标注幻灯片 👇 (#/1/1) -- 标注幻灯片 使用 --- 标注水平幻灯片 在水平幻灯片中使用 -- 分割垂直幻灯片 使用 在幻灯片上添加属性 使用 在前一个 HTML 元素上添加属性 Markdown 你可以在幻灯片中使用 ...",
      "content_html": "<!-- markdownlint-disable MD024 MD033 -->\n<p>@slidestart</p>\n<!-- .slide: data-transition=\"slide\" -->\n<h2> 幻灯片演示</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>一个简单的<mark>幻灯片</mark>演示与各种小贴士。</p>\n<!-- .element: class=\"r-fit-text\" -->\n<blockquote>\n<p>作者 zkye. 请滚动鼠标滚轮进入下一页</p>\n</blockquote>\n<hr>\n<h2> 标注幻灯片</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p><a href=\"#/1/1\">👇</a></p>\n<p>--</p>\n<h2> 标注幻灯片</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>使用 <code>---</code> 标注水平幻灯片</p>\n<!-- .element: class=\"fragment fade-in\" -->\n<p>在水平幻灯片中使用 <code>--</code> 分割垂直幻灯片</p>\n<!-- .element: class=\"fragment fade-in\" -->\n<p>使用 <code>&lt;!-- .slide: ... --&gt;</code> 在幻灯片上添加属性</p>\n<!-- .element: class=\"fragment fade-in\" -->\n<p>使用 <code>&lt;!-- .element: ... --&gt;</code> 在前一个 HTML 元素上添加属性</p>\n<!-- .element: class=\"fragment fade-in\" -->\n<hr>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> Markdown</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>你可以在幻灯片中使用 Markdown 语法的各种标记.</p>\n<!-- .element: class=\"r-fit-text\" -->\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> Markdown</h2>\n<p>你可以在幻灯片中使用 Markdown 语法的各种标记.</p>\n<h3> 这是一个 H3</h3>\n<p>标题默认会自动转换为大写。</p>\n<p>这是一个有着 <strong>粗体</strong>, <em>斜体</em>, <s>删除线</s> 文字并包含 <a href=\"https://mrhope.site\" target=\"_blank\" rel=\"noopener noreferrer\">一个链接</a> 的段落，并且它会自动换行。所以你无需担心它的长度。</p>\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> Markdown</h2>\n<p>你可以在幻灯片中使用 Markdown 语法的各种标记.</p>\n<p>列表默认为 <code>inline-block</code></p>\n<ul>\n<li>项目</li>\n<li>项目</li>\n<li>项目</li>\n</ul>\n<ol>\n<li>项目 1</li>\n<li>项目 2</li>\n<li>项目 3</li>\n</ol>\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> Markdown</h2>\n<p>你可以在幻灯片中使用 Markdown 语法的各种标记.</p>\n<p>在你启用 <code>highlight</code> 插件后，代码块会自动高亮。</p>\n<div class=\"language-javascript\" data-ext=\"js\"></div><p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> Markdown</h2>\n<p>你可以在幻灯片中使用 Markdown 语法的各种标记.</p>\n<p>在你启用 <code>math</code> 插件后，你也可以使用 TEX 格式使用数学公式。</p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mrow><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>x</mi></mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow></munder></mrow><annotation encoding=\"application/x-tex\">\n {latex}\nJ(\\theta_0,\\theta_1) = \\sum_{i=0}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3277em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<hr>\n<!-- .slide: data-auto-animate -->\n<h2> Markdown</h2>\n<p>你可以在幻灯片中使用 Markdown 语法的各种标记.</p>\n<p>⚠<strong>请注意</strong>: 表格和分割线，以及所有不在 Markdown 标准语法中的内容均不受支持。</p>\n<hr>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> 布局</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>--</p>\n<!-- .slide: data-auto-animate  -->\n<h2> 布局</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>👆 <code>r-fit-text</code> class 会让文字在不超出幻灯片范围的情况下尽可能大。</p>\n<p>--</p>\n<!-- .slide: data-auto-animate  -->\n<h2> 布局</h2>\n<figure><img src=\"/logo.png\" alt=\"Logo\" tabindex=\"0\"><figcaption>Logo</figcaption></figure>\n<!-- .element: class=\"r-stretch\" -->\n<p>👆 <code>r-stretch</code> class 帮助你控制注入图片或视频的大小，使它们填充满幻灯片垂直方向上的剩余空间。</p>\n<p>--</p>\n<!-- .slide: data-auto-animate data-background-color=\"rgb(70, 70, 255)\" -->\n<h2> 布局</h2>\n<h3> 背景</h3>\n<p>你可以通过向特定幻灯片添加 <code>data-background</code> 属性自定义幻灯片背景.</p>\n<hr>\n<!-- .slide: data-auto-animate -->\n<h2> 动画片段</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> 动画片段</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>动画片段用于高亮或显隐幻灯片中的元素。</p>\n<p>你需要在元素上添加 <code>fragment</code> 和动画 class。</p>\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> 动画片段</h2>\n<h3> 动画 class</h3>\n<ul>\n<li><code>fade-in</code></li>\n</ul>\n<!-- .element: class=\"fragment fade-in\" -->\n<ul>\n<li><code>fade-out</code></li>\n</ul>\n<!-- .element: class=\"fragment fade-out\" -->\n<ul>\n<li><code>fade-up</code></li>\n</ul>\n<!-- .element: class=\"fragment fade-up\" -->\n<!-- list break -->\n<ul>\n<li><code>fade-down</code></li>\n</ul>\n<!-- .element: class=\"fragment fade-down\" -->\n<ul>\n<li><code>fade-left</code></li>\n</ul>\n<!-- .element: class=\"fragment fade-left\" -->\n<ul>\n<li><code>fade-right</code></li>\n</ul>\n<!-- .element: class=\"fragment fade-right\" -->\n<!-- list break -->\n<ul>\n<li><code>fade-in-then-out</code></li>\n</ul>\n<!-- .element: class=\"fragment fade-in-then-out\" -->\n<ul>\n<li><code>fade-in-then-semi-out</code></li>\n</ul>\n<!-- .element: class=\"fragment fade-in-then-semi-out\" -->\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> 动画片段</h2>\n<h3> 动画 class</h3>\n<ul>\n<li><code>grow</code></li>\n</ul>\n<!-- .element: class=\"fragment grow\" -->\n<ul>\n<li><code>shrink</code></li>\n</ul>\n<!-- .element: class=\"fragment shrink\" -->\n<ul>\n<li><code>strike</code></li>\n</ul>\n<!-- .element: class=\"fragment strike\" -->\n<!-- list break -->\n<ul>\n<li><code>highlight-red</code></li>\n</ul>\n<!-- .element: class=\"fragment highlight-red\" -->\n<ul>\n<li><code>highlight-green</code></li>\n</ul>\n<!-- .element: class=\"fragment highlight-green\" -->\n<ul>\n<li><code>highlight-blue</code></li>\n</ul>\n<!-- .element: class=\"fragment highlight-blue\" -->\n<!-- list break -->\n<ul>\n<li><code>highlight-current-red</code></li>\n</ul>\n<!-- .element: class=\"fragment highlight-current-red\" -->\n<ul>\n<li><code>highlight-current-green</code></li>\n</ul>\n<!-- .element: class=\"fragment highlight-current-green\" -->\n<ul>\n<li><code>highlight-current-blue</code></li>\n</ul>\n<!-- .element: class=\"fragment highlight-current-blue\" -->\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> 动画片段</h2>\n<h3> 多个动画片段</h3>\n<p>你可以按照顺序包裹一个 HTML 元素使其拥有多个动画片段</p>\n<span class=\"fragment fade-in\">\n  <span class=\"fragment highlight-red\">\n    <span class=\"fragment fade-out\">\n      渐入 &gt; 变红 &gt; 渐出\n    </span>\n  </span>\n</span>\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> 动画片段</h2>\n<h3> 顺序</h3>\n<p>你可以使用 <code>data-fragment-index</code> 属性改变元素的动画顺序。</p>\n<p>不同元素可以有相同的动画顺序。</p>\n<ul>\n<li>最后显示</li>\n</ul>\n<!-- .element: class=\"fragment\" data-fragment-index=\"3\"-->\n<ul>\n<li>第二个显示</li>\n</ul>\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\"-->\n<!-- list break -->\n<ul>\n<li>第一个显示</li>\n</ul>\n<!-- .element: class=\"fragment\" data-fragment-index=\"1\"-->\n<ul>\n<li>第二个显示</li>\n</ul>\n<!-- .element: class=\"fragment\" data-fragment-index=\"2\"-->\n<hr>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> 渐变</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>--</p>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> 渐变</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>Transition 可以通过配置中的 <code>transition</code> 选项全局设置，也可以通过在特定幻灯片添加 <code>data-transition</code> 属性局部设置.</p>\n<p>可能的值:</p>\n<ul>\n<li>none</li>\n<li>fade</li>\n<li>slide</li>\n</ul>\n<!-- list break -->\n<ul>\n<li>convex</li>\n<li>concave</li>\n<li>zoom</li>\n</ul>\n<p>--</p>\n<!-- .slide: data-auto-animate -->\n<h2> 渐变</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<h3> 过渡动画</h3>\n<p>你可以在相邻的幻灯片上添加 <code>data-auto-animate</code> 使相同的 HTML 元素产生过渡动画效果。</p>\n<hr>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> 功能</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<p>--</p>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> 功能</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<h3> 代码</h3>\n<p>通过启用 <code>highlight</code> 插件，你可以对代码块进行高亮。</p>\n<p>你可以使用 <code>[a-b|c-d]</code> 语法来分布高亮特定行。</p>\n<div class=\"language-javascript\" data-ext=\"js\"></div><p>--</p>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> 功能</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<h3> 预览模式</h3>\n<p>按下 <code>Esc</code> 或 <code>O</code> 即可在幻灯片获得焦点时进入预览模式。</p>\n<p>--</p>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> 功能</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<h3> 全屏模式</h3>\n<p>按下 <code>F</code> 或 <code>F11</code> 即可在幻灯片获得焦点时进入全屏模式。</p>\n<p>--</p>\n<!-- .slide: data-transition=\"slide\" data-auto-animate -->\n<h2> 功能</h2>\n<!-- .element: class=\"r-fit-text\" -->\n<h3> 缩放</h3>\n<p>按下 <code>alt</code> (Linux 上使用 <code>ctrl</code>) 的同时点击幻灯片的任何元素，即可以向此元素进行放大。</p>\n<p>再次点击即可缩小。</p>\n<hr>\n<!-- .element: class=\"r-fit-text\" -->\n<h2> 结束</h2>\n<p>@slideend</p>\n",
      "image": "https://blog.yzketx.online/logo.png",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-03-20T10:50:34.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Markdown 介绍",
      "url": "https://blog.yzketx.online/tip/markdown/",
      "id": "https://blog.yzketx.online/tip/markdown/",
      "summary": "V1 deprecated vuepress-theme-hope 通过内置 md-enhance，在 Markdown 中启用了更多的语法与新功能。",
      "content_html": "<h1> V1 deprecated</h1>\n<p><code>vuepress-theme-hope</code> 通过内置 <a href=\"https://vuepress-theme-hope.github.io/md-enhance\" target=\"_blank\" rel=\"noopener noreferrer\">md-enhance</a>，在 Markdown 中启用了更多的语法与新功能。</p>\n<!-- more -->\n<h2> 一键启用</h2>\n<p>你可以设置 <code>themeconfig.mdEnhance.enableAll</code> 启用 <a href=\"https://vuepress-theme-hope.github.io/md-enhance\" target=\"_blank\" rel=\"noopener noreferrer\">md-enhance</a> 插件的所有功能，或者根据相关文档选择你需要的功能。</p>\n<div class=\"language-javascript\" data-ext=\"js\"><div class=\"highlight-lines\"><br><br><div class=\"highlight-line\">&nbsp;</div><div class=\"highlight-line\">&nbsp;</div><div class=\"highlight-line\">&nbsp;</div><br><br></div></div><h2> 新增的更多语法</h2>\n<h3> 上下角标</h3>\n<p>19<sup>th</sup> H<sub>2</sub>O</p>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown\" data-ext=\"md\"></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/sup-sub/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3> 自定义对齐</h3>\n<div style=\"text-align:center\">\n<p>我是居中的</p>\n</div>\n<div style=\"text-align:right\">\n<p>我在右对齐</p>\n</div>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/align/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3> 脚注</h3>\n<p>此文字有脚注<sup class=\"footnote-ref\"><a href=\"#footnote1\">[1]</a><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a></sup><a class=\"footnote-anchor\" id=\"footnote-ref1\">.</a></p><a class=\"footnote-anchor\" id=\"footnote-ref1\">\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown\" data-ext=\"md\"></div></details>\n</a><ul><a class=\"footnote-anchor\" id=\"footnote-ref1\">\n</a><li><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/footnote/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3> 标记</h3>\n<p>你可以标记 <mark>重要的内容</mark> 。</p>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown\" data-ext=\"md\"></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/mark/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3> 任务列表</h3>\n<ul class=\"task-list-container\">\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-0\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-0\"> 计划 1</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-1\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-1\"> 计划 2</label></li>\n</ul>\n<details class=\"hint-container details\"><summary>Code</summary>\n<div class=\"language-markdown\" data-ext=\"md\"></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/guide/markdown/tasklist/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3> 流程图</h3>\n<div class=\"language-flow\" data-ext=\"flow\"></div><details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown\" data-ext=\"md\"></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/flowchart/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h2> Emoji</h2>\n<p><strong>输入</strong></p>\n<div class=\"language-text\" data-ext=\"text\"></div><p><strong>输出</strong></p>\n<p>🎉 💯</p>\n<p>你可以在<a href=\"/guide/emoji\">这个列表</a>找到所有可用的 Emoji。</p>\n<h2> 目录</h2>\n<p><strong>输入</strong></p>\n<div class=\"language-text\" data-ext=\"text\"></div><p><strong>输出</strong></p>\n<!--lint disable no-shortcut-reference-link no-undefined-references-->\n\n<!--lint enable no-shortcut-reference-link no-undefined-references-->\n<p>目录（Table of Contents）的渲染可以通过 <code>config.js -&gt; markdown.toc</code> 选项来配置。</p>\n<h2> 自定义容器 </h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">自定义标题</p>\n<p>信息容器</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">自定义标题</p>\n<p>提示容器</p>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">自定义标题</p>\n<p>警告容器</p>\n</div>\n<div class=\"hint-container danger\">\n<p class=\"hint-container-title\">自定义标题</p>\n<p>危险容器</p>\n</div>\n<details class=\"hint-container details\"><summary>自定义标题</summary>\n<p>详情容器</p>\n</details>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<p><strong>参考:</strong></p>\n<ul>\n<li><a href=\"https://vuepress-community.netlify.app/en/plugins/container/#vuepress-plugin-container\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-plugin-container</a></li>\n</ul>\n<h2> 代码块中的语法高亮</h2>\n<p>VuePress 使用了 <a href=\"https://prismjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Prism</a> 来为 markdown 中的代码块实现语法高亮。Prism 支持大量的编程语言，你需要做的只是在代码块的开始倒勾中附加一个有效的语言别名：</p>\n<p><strong>输入</strong></p>\n<div class=\"language-text\" data-ext=\"text\"></div><p><strong>输出</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\"></div><p><strong>输入</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>输出</strong></p>\n<div class=\"language-html\" data-ext=\"html\"></div><p>在 Prism 的网站上查看 <a href=\"https://prismjs.com/#languages-list\" target=\"_blank\" rel=\"noopener noreferrer\">合法的语言列表</a>。</p>\n<h2> 代码块中的行高亮</h2>\n<p><strong>输入</strong></p>\n<div class=\"language-text\" data-ext=\"text\"></div><p><strong>输出</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\"><div class=\"highlight-lines\"><br><br><br><div class=\"highlight-line\">&nbsp;</div><br><br><br></div></div><p>除了单行以外，你也可指定多行，行数区间，或是两者都指定。</p>\n<ul>\n<li>行数区间: 例如 <code>{5-8}</code>, <code>{3-10}</code>, <code>{10-17}</code></li>\n<li>多个单行: 例如 <code>{4,7,9}</code></li>\n<li>行数区间与多个单行: 例如 <code>{4,7-13,16,23-27,40}</code></li>\n</ul>\n<p><strong>输入</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>输出</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"highlight-lines\"><div class=\"highlight-line\">&nbsp;</div><br><br><div class=\"highlight-line\">&nbsp;</div><br><div class=\"highlight-line\">&nbsp;</div><div class=\"highlight-line\">&nbsp;</div><div class=\"highlight-line\">&nbsp;</div><br><br><br></div><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Mermaid</h2>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown\" data-ext=\"md\"></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/mermaid/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3> Tex 语法</h3>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><msup><mi mathvariant=\"normal\">∂</mi><mi>r</mi></msup><mrow><mi mathvariant=\"normal\">∂</mi><msup><mi>ω</mi><mi>r</mi></msup></mrow></mfrac><mrow><mo fence=\"true\">(</mo><mfrac><msup><mi>y</mi><mi>ω</mi></msup><mi>ω</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac><msup><mi>y</mi><mi>ω</mi></msup><mi>ω</mi></mfrac><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">{</mo><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mi>r</mi></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><mfrac><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>i</mi></msup><mi>r</mi><mo>⋯</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>r</mi><mo>−</mo><mi>i</mi></mrow></msup></mrow><msup><mi>ω</mi><mi>i</mi></msup></mfrac><mo fence=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\n\\frac {\\partial^r} {\\partial \\omega^r} \\left(\\frac {y^{\\omega}} {\\omega}\\right)\n= \\left(\\frac {y^{\\omega}} {\\omega}\\right) \\left\\{(\\log y)^r + \\sum_{i=1}^r \\frac {(-1)^i r \\cdots (r-i+1) (\\log y)^{r-i}} {\\omega^i} \\right\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5904em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3414em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0277em;vertical-align:-1.2777em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3414em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5017em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7507em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">}</span></span></span></span></span></span></span></p>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown\" data-ext=\"md\"></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/tex/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3> 代码案例</h3>\n<p>::: demo 一个普通 Demo</p>\n<div class=\"language-html\" data-ext=\"html\"></div><div class=\"language-javascript\" data-ext=\"js\"></div><div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>:::</p>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<p>::: demo [react] 一个 React Demo</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-css\" data-ext=\"css\"></div><p>:::</p>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<p>::: demo [vue] 一个 Vue Demo</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>:::</p>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<p>::: demo 一个普通 Demo</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><div class=\"language-typescript\" data-ext=\"ts\"></div><div class=\"language-scss\" data-ext=\"scss\"></div><p>:::</p>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/demo/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h3> 幻灯片</h3>\n<p>@slidestart</p>\n<h2> 幻灯片 1</h2>\n<p>一个有文字和 <a href=\"https://mrhope.site\" target=\"_blank\" rel=\"noopener noreferrer\">链接</a> 的段落</p>\n<hr>\n<h2> 幻灯片 2</h2>\n<ul>\n<li>列表 1</li>\n<li>列表 2</li>\n</ul>\n<hr>\n<h2> 幻灯片 3.1</h2>\n<div class=\"language-javascript\" data-ext=\"js\"></div><p>--</p>\n<h2> 幻灯片 3.2</h2>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>J</mi><mo stretchy=\"false\">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow></munder></mrow><annotation encoding=\"application/x-tex\">\nJ(\\theta_0,\\theta_1) = \\sum_{i=0}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3277em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>@slideend</p>\n<details class=\"hint-container details\"><summary>代码</summary>\n<div class=\"language-markdown line-numbers-mode\" data-ext=\"md\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/presentation/\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看</a></li>\n</ul>\n<h2> Header Anchors</h2>\n<p>所有的标题将会自动地应用 anchor 链接，anchor 的渲染可以通过 <code>config.js -&gt; markdown.anchor</code> 来配置。</p>\n<h2> 链接</h2>\n<h3> 内部链接</h3>\n<p>网站内部的链接，将会被转换成 <code>&lt;router-link&gt;</code> 用于 SPA 导航。同时，站内的每一个文件夹下的 <code>README.md</code> 或者 <code>index.md</code> 文件都会被自动编译为 <code>index.html</code>，对应的链接将被视为 <code>/</code>。</p>\n<p>以如下的文件结构为例：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>假设你现在在 <code>foo/one.md</code> 中：</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h3> 链接的重定向</h3>\n<p>VuePress 支持重定向到干净链接。如果一个链接 <code>/foo</code> 找不到，VuePress 会自行寻找一个可用的 <code>/foo/</code> 或 <code>/foo.html</code>。反过来，当 <code>/foo/</code> 或 <code>/foo.html</code> 中的一个找不到时，VuePress 也会尝试寻找另一个。借助这种特性，我们可以通过官方插件 <a href=\"https://vuepress.github.io/plugins/clean-urls/\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-plugin-clean-urls</a> 定制你的网站路径。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">注意</p>\n<p>无论是否使用了 permalink 和 clean-urls 插件，你的相对路径都应该依赖于当前的文件结构来定义。在上面的例子中，即使你将 <code>/foo/one.md</code> 的路径设为了 <code>/foo/one/</code>，你依然应该通过 <code>./two.md</code> 来访问 <code>/foo/two.md</code>。</p>\n</div>\n<h3> 外部链接</h3>\n<p>外部的链接将会被自动地设置为  <code>target=\"_blank\" rel=\"noopener noreferrer\"</code>:</p>\n<ul>\n<li><a href=\"https://vuejs.org\" target=\"_blank\" rel=\"noopener noreferrer\">vuejs.org</a></li>\n<li><a href=\"https://github.com/vuejs/vuepress\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress on GitHub</a></li>\n</ul>\n<p>你可以自定义通过配置 config.markdown.externalLinks  来自定义外部链接的特性。</p>\n<h2> 图片点击放大</h2>\n<ul>\n<li>示例:</li>\n</ul>\n<picture>\n  <source srcset=\"/assets/images/bg1.png\" media=\"(max-width: 719px)\">\n  \n</picture>\n<picture>\n  <source srcset=\"/assets/images/bg2.png\" media=\"(max-width: 719px)\">\n  \n</picture>\n<ul>\n<li>代码:</li>\n</ul>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 导入代码段 </h2>\n<div class=\"hint-container danger\">\n<p class=\"hint-container-title\">警告</p>\n<p>在测试中无法显示</p>\n</div>\n<p>你可以通过下述的语法导入已经存在的文件中的代码段：</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p>它也支持 <a href=\"#%E4%BB%A3%E7%A0%81%E5%9D%97%E4%B8%AD%E7%9A%84%E8%A1%8C%E9%AB%98%E4%BA%AE\">行高亮</a>：</p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><p><strong>输入</strong></p>\n<div class=\"language-text\" data-ext=\"text\"></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">注意</p>\n<p>由于代码段的导入将在 webpack 编译之前执行，因此你无法使用 webpack 中的路径别名，此处的 <code>@</code> 默认值是 <code>process.cwd()</code>。</p>\n</div>\n<p>为了只导入对应部分的代码，你也可运用 <a href=\"https://code.visualstudio.com/docs/editor/codebasics#_folding\" target=\"_blank\" rel=\"noopener noreferrer\">VS Code region</a>。你可以在文件路径后方的 <code>#</code> 紧接着提供一个自定义的区域名称（预设为 <code>snippet</code> ）</p>\n<p><strong>输入</strong></p>\n<div class=\"language-markdown\" data-ext=\"md\"></div><h2> 进阶配置</h2>\n<p>VuePress 使用 <a href=\"https://github.com/markdown-it/markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\">markdown-it</a> 来渲染 Markdown，上述大多数的拓展也都是通过自定义的插件实现的。想要进一步的话，你可以通过 <code>.vuepress/config.js</code> 的 <code>markdown</code> 选项，来对当前的 <code>markdown-it</code> 实例做一些自定义的配置：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 其他语法</h2>\n<p>详见 <a href=\"https://vuepress-theme-hope.github.io/zh/guide/markdown/\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown 增强 | vuepress-theme-hope</a></p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"footnote1\" class=\"footnote-item\"><p>这是脚注内容 <a href=\"#footnote-ref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2022-01-20T05:34:49.000Z",
      "date_modified": "2023-11-20T16:03:36.000Z",
      "authors": [],
      "tags": []
    }
  ]
}