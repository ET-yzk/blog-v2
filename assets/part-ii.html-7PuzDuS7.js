import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as d,c as h,a as t,b as o,d as e,w as r,f as s}from"./app-HHaGRXeI.js";const c="/assets/figii-1-BdZMX9-t.png",p={},u=t("h1",{id:"第二部分-分布式数据",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#第二部分-分布式数据","aria-hidden":"true"},"#"),o(" 第二部分：分布式数据")],-1),f=t("blockquote",null,[t("p",null,"一个成功的技术，现实的优先级必须高于公关，你可以糊弄别人，但糊弄不了自然规律。"),t("p",null,"——罗杰斯委员会报告（1986）")],-1),_=t("hr",null,null,-1),g=t("strong",null,"多台机器",-1),m=s('<p>你可能会出于各种各样的原因，希望将数据库分布到多台机器上：</p><p><em><strong>可伸缩性</strong></em></p><p>如果你的数据量、读取负载、写入负载超出单台机器的处理能力，可以将负载分散到多台计算机上。</p><p><em><strong>容错/高可用性</strong></em></p><p>如果你的应用需要在单台机器（或多台机器，网络或整个数据中心）出现故障的情况下仍然能继续工作，则可使用多台机器，以提供冗余。一台故障时，另一台可以接管。</p><p><em><strong>延迟</strong></em></p><p>如果在世界各地都有用户，你也许会考虑在全球范围部署多个服务器，从而每个用户可以从地理上最近的数据中心获取服务，避免了等待网络数据包穿越半个世界。</p><h2 id="伸缩至更高的载荷" tabindex="-1"><a class="header-anchor" href="#伸缩至更高的载荷" aria-hidden="true">#</a> 伸缩至更高的载荷</h2><p>如果你需要的只是伸缩至更高的<strong>载荷（load）</strong>，最简单的方法就是购买更强大的机器（有时称为<strong>垂直伸缩（vertical scaling）</strong> 或<strong>向上伸缩（scale up）</strong>）。许多处理器，内存和磁盘可以在同一个操作系统下相互连接，快速的相互连接允许任意处理器访问内存或磁盘的任意部分。在这种 <strong>共享内存架构（shared-memory architecture）</strong> 中，所有的组件都可以看作一台单独的机器<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。</p><p>共享内存方法的问题在于，成本增长速度快于线性增长：一台有着双倍处理器数量，双倍内存大小，双倍磁盘容量的机器，通常成本会远远超过原来的两倍。而且可能因为存在瓶颈，并不足以处理双倍的载荷。</p><p>共享内存架构可以提供有限的容错能力，高端机器可以使用热插拔的组件（不关机更换磁盘，内存模块，甚至处理器）——但它必然囿于单个地理位置的桎梏。</p><p>另一种方法是<strong>共享磁盘架构（shared-disk architecture）</strong>，它使用多台具有独立处理器和内存的机器，但将数据存储在机器之间共享的磁盘阵列上，这些磁盘通过快速网络连接<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>。这种架构用于某些数据仓库，但竞争和锁定的开销限制了共享磁盘方法的可伸缩性【2】。</p><h3 id="无共享架构" tabindex="-1"><a class="header-anchor" href="#无共享架构" aria-hidden="true">#</a> 无共享架构</h3><p>相比之下，<strong>无共享架构（shared-nothing architecture）</strong>（有时称为<strong>水平伸缩（horizontal scale）</strong> 或<strong>向外伸缩（scale out）</strong>）已经相当普及。在这种架构中，运行数据库软件的每台机器/虚拟机都称为<strong>节点（node）</strong>。每个节点只使用各自的处理器，内存和磁盘。节点之间的任何协调，都是在软件层面使用传统网络实现的。</p><p>无共享系统不需要使用特殊的硬件，所以你可以用任意机器——比如性价比最好的机器。你也许可以跨多个地理区域分布数据从而减少用户延迟，或者在损失一整个数据中心的情况下幸免于难。随着云端虚拟机部署的出现，即使是小公司，现在无需Google级别的运维，也可以实现异地分布式架构。</p><p>在这一部分里，我们将重点放在无共享架构上。它不见得是所有场景的最佳选择，但它是最需要你谨慎从事的架构。如果你的数据分布在多个节点上，你需要意识到这样一个分布式系统中约束和权衡 ——数据库并不能魔术般地把这些东西隐藏起来。</p><p>虽然分布式无共享架构有许多优点，但它通常也会给应用带来额外的复杂度，有时也会限制你可用数据模型的表达力。在某些情况下，一个简单的单线程程序可以比一个拥有超过100个CPU核的集群表现得更好【4】。另一方面，无共享系统可以非常强大。接下来的几章，将详细讨论分布式数据会带来的问题。</p><h3 id="复制-vs-分区" tabindex="-1"><a class="header-anchor" href="#复制-vs-分区" aria-hidden="true">#</a> 复制 vs 分区</h3><p>数据分布在多个节点上有两种常见的方式：</p><p><em><strong>复制（Replication）</strong></em></p>',20),b=t("p",null,[t("em",null,[t("strong",null,"分区 (Partitioning)")])],-1),k=t("strong",null,"分区（partitions）",-1),S=t("strong",null,"节点（node）",-1),x=t("strong",null,"分片（shard）",-1),N=t("p",null,[o("复制和分区是不同的机制，但它们经常同时使用。如"),t("a",{href:"./img/figii-1.png"},"图II-1"),o("所示。")],-1),w=t("figure",null,[t("img",{src:c,alt:"",tabindex:"0"}),t("figcaption")],-1),y=t("p",null,[t("strong",null,"图II-1 一个数据库切分为两个分区，每个分区都有两个副本")],-1),v=t("strong",null,"事务(Transaction)",-1),I=t("h2",{id:"索引",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#索引","aria-hidden":"true"},"#"),o(" 索引")],-1),E={start:"5"},A=t("h2",{id:"参考文献",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#参考文献","aria-hidden":"true"},"#"),o(" 参考文献")],-1),M={href:"https://people.freebsd.org/~lstewart/articles/cpumemory.pdf",target:"_blank",rel:"noopener noreferrer"},B={href:"http://www.benstopford.com/2009/11/24/understanding-the-shared-nothing-architecture/",target:"_blank",rel:"noopener noreferrer"},D={href:"http://db.cs.berkeley.edu/papers/hpts85-nothing.pdf",target:"_blank",rel:"noopener noreferrer"},C={href:"http://www.frankmcsherry.org/assets/COST.pdf",target:"_blank",rel:"noopener noreferrer"},T=t("hr",null,null,-1),V=t("thead",null,[t("tr",null,[t("th",null,"上一章"),t("th",null,"目录"),t("th",null,"下一章")])],-1),L=s('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>在大型机中，尽管任意处理器都可以访问内存的任意部分，但总有一些内存区域与一些处理器更接近（称为<strong>非均匀内存访问（nonuniform memory access, NUMA）</strong>【1】）。 为了有效利用这种架构特性，需要对处理进行细分，以便每个处理器主要访问临近的内存，这意味着即使表面上看起来只有一台机器在运行，<strong>分区（partitioning）</strong> 仍然是必要的。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>网络附属存储（Network Attached Storage, NAS），或<strong>存储区网络（Storage Area Network, SAN）</strong> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>',2);function O(R,U){const n=l("RouterLink"),a=l("ExternalLinkIcon");return d(),h("div",null,[u,f,_,t("p",null,[o("在本书的"),e(n,{to:"/book/ddia/part-i.html"},{default:r(()=>[o("第一部分")]),_:1}),o("中，我们讨论了数据系统的各个方面，但仅限于数据存储在单台机器上的情况。现在我们到了"),e(n,{to:"/book/ddia/part-ii.html"},{default:r(()=>[o("第二部分")]),_:1}),o("，进入更高的层次，并提出一个问题：如果"),g,o("参与数据的存储和检索，会发生什么？")]),m,t("p",null,[o("​ 在几个不同的节点上保存数据的相同副本，可能放在不同的位置。 复制提供了冗余：如果一些节点不可用，剩余的节点仍然可以提供数据服务。 复制也有助于改善性能。 "),e(n,{to:"/book/ddia/ch5.html"},{default:r(()=>[o("第五章")]),_:1}),o("将讨论复制。")]),b,t("p",null,[o("​ 将一个大型数据库拆分成较小的子集（称为"),k,o("），从而不同的分区可以指派给不同的"),S,o("（亦称"),x,o("）。 "),e(n,{to:"/book/ddia/ch6.html"},{default:r(()=>[o("第六章")]),_:1}),o("将讨论分区。")]),N,w,y,t("p",null,[o("理解了这些概念，就可以开始讨论在分布式系统中需要做出的困难抉择。"),e(n,{to:"/book/ddia/ch7.html"},{default:r(()=>[o("第七章")]),_:1}),o("将讨论"),v,o("，这对于了解数据系统中可能出现的各种问题，以及我们可以做些什么很有帮助。"),e(n,{to:"/book/ddia/ch8.html"},{default:r(()=>[o("第八章")]),_:1}),o("和"),e(n,{to:"/book/ddia/ch9.html"},{default:r(()=>[o("第九章")]),_:1}),o("将讨论分布式系统的根本局限性。")]),t("p",null,[o("在本书的"),e(n,{to:"/book/ddia/part-iii.html"},{default:r(()=>[o("第三部分")]),_:1}),o("中，将讨论如何将多个（可能是分布式的）数据存储集成为一个更大的系统，以满足复杂的应用需求。 但首先，我们来聊聊分布式的数据。")]),I,t("ol",E,[t("li",null,[e(n,{to:"/book/ddia/ch5.html"},{default:r(()=>[o("复制")]),_:1})]),t("li",null,[e(n,{to:"/book/ddia/ch6.html"},{default:r(()=>[o("分片")]),_:1})]),t("li",null,[e(n,{to:"/book/ddia/ch7.html"},{default:r(()=>[o("事务")]),_:1})]),t("li",null,[e(n,{to:"/book/ddia/ch8.html"},{default:r(()=>[o("分布式系统的麻烦")]),_:1})]),t("li",null,[e(n,{to:"/book/ddia/ch9.html"},{default:r(()=>[o("一致性与共识")]),_:1})])]),A,t("ol",null,[t("li",null,[t("p",null,[o("Ulrich Drepper: “"),t("a",M,[o("What Every Programmer Should Know About Memory"),e(a)]),o(",” akka‐dia.org, November 21, 2007.")])]),t("li",null,[t("p",null,[o("Ben Stopford: “"),t("a",B,[o("Shared Nothing vs. Shared Disk Architectures: An Independent View"),e(a)]),o(",” benstopford.com, November 24, 2009.")])]),t("li",null,[t("p",null,[o("Michael Stonebraker: “"),t("a",D,[o("The Case for Shared Nothing"),e(a)]),o(",” IEEE Database EngineeringBulletin, volume 9, number 1, pages 4–9, March 1986.")])]),t("li",null,[t("p",null,[o("Frank McSherry, Michael Isard, and Derek G. Murray: “"),t("a",C,[o("Scalability! But at What COST?"),e(a)]),o(",” at 15th USENIX Workshop on Hot Topics in Operating Systems (HotOS),May 2015.")])])]),T,t("table",null,[V,t("tbody",null,[t("tr",null,[t("td",null,[e(n,{to:"/book/ddia/ch4.html"},{default:r(()=>[o("第四章：编码与演化")]),_:1})]),t("td",null,[e(n,{to:"/book/ddia/DDIA_README.html"},{default:r(()=>[o("设计数据密集型应用")]),_:1})]),t("td",null,[e(n,{to:"/book/ddia/ch5.html"},{default:r(()=>[o("第五章：复制")]),_:1})])])])]),L])}const G=i(p,[["render",O],["__file","part-ii.html.vue"]]);export{G as default};
