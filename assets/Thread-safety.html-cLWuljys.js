import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,f as a}from"./app-HHaGRXeI.js";const s={},r=a('<h1 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h1><blockquote><p>线程安全是多线程编程时的计算机程序代码中的一个概念。在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现<strong>数据污染</strong><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>等意外情况。</p><p>如果一个函数能够安全地同时被多个线程调用而得到正确的结果，那么，我们说这个函数是线程安全的。所谓&quot;安全&quot;，一切可能导致结果不正确的因素都是不安全的调用。</p></blockquote><h2 id="意义" tabindex="-1"><a class="header-anchor" href="#意义" aria-hidden="true">#</a> 意义</h2><p>线程安全，是指变量或方法(这些变量或方法是多线程共享的)可以在多线程的环境下被安全有效的访问。这说明了两方面的问题:</p><p>(1)可以从多个线程中调用， 无需调用方有任何操作;</p><p>(2)可以同时被多个线程调用， 无需线程之不必要的交互。</p><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>即破坏了数据完整性。数据完整性包括：域完整性【输入范围有效性】、实体完整性【存在唯一主键】、参照完整性【外键关联】 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',9),n=[r];function c(f,i){return e(),t("div",null,n)}const d=o(s,[["render",c],["__file","Thread-safety.html.vue"]]);export{d as default};
