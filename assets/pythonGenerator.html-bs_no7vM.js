import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-HHaGRXeI.js";const e={},t=p(`<h1 id="python-生成器" tabindex="-1"><a class="header-anchor" href="#python-生成器" aria-hidden="true">#</a> Python 生成器</h1><blockquote><p>这一记录源于Leetcode排列的数组，在解题时使用了（x xxx）的生成器，反复思考确认在逻辑上无误，调试时才发现，用到的生成器在一次调用循环后便无法再次执行。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 示例</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> i
g <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># arr1、arr2 只有在用到的时候才会取值，默认是没有值</span>
arr1 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> g<span class="token punctuation">)</span>
arr2 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> arr1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>
<span class="token comment"># &lt;generator object &lt;genexpr&gt; at 0x000002254DE5A2A0&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>
<span class="token comment"># &lt;generator object &lt;genexpr&gt; at 0x000002254DE5A318&gt;</span>
<span class="token comment"># 如果不执行list(arr1)则list(arr2) = [0, 1, 2, 3]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [0, 1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-生成器定义" tabindex="-1"><a class="header-anchor" href="#_1-生成器定义" aria-hidden="true">#</a> 1. 生成器定义</h3><p>在Python中，一边循环一边计算的机制，称为生成器：generator。</p><h3 id="_2-为什么要有生成器" tabindex="-1"><a class="header-anchor" href="#_2-为什么要有生成器" aria-hidden="true">#</a> 2. 为什么要有生成器</h3><p>列表所有数据都在内存中，如果有海量数据的话将会非常耗内存。</p><p>如：仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>如果列表元素按照某种算法推算出来，那我们就可以在循环的过程中不断推算出后续的元素，这样就不必创建完整的list，从而节省大量的空间。</p><p>简单一句话：我又想要得到庞大的数据，又想让它占用空间少，那就用生成器！</p><h3 id="_3-如何创建生成器" tabindex="-1"><a class="header-anchor" href="#_3-如何创建生成器" aria-hidden="true">#</a> 3.如何创建生成器</h3><p>第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> L <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> L
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> g
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> <span class="token operator">&lt;</span>genexpr<span class="token operator">&gt;</span> at <span class="token number">0x1022ef630</span><span class="token operator">&gt;</span>
</code></pre></div><p>创建<code>L</code>和<code>g</code>的区别仅在于最外层的<code>[]</code>和<code>()</code>，<code>L</code>是一个list，而<code>g</code>是一个generator。</p><p>方法二， 如果一个函数中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator。调用函数就是创建了一个生成器（generator）对象。</p><h3 id="_4-生成器的工作原理" tabindex="-1"><a class="header-anchor" href="#_4-生成器的工作原理" aria-hidden="true">#</a> 4. 生成器的工作原理</h3><p>（1）生成器(generator)能够迭代的关键是它有一个next()方法，</p><p>工作原理就是通过重复调用next()方法，直到捕获一个异常。</p><p>（2）带有 yield 的函数不再是一个普通函数，而是一个生成器generator。</p><p>可用next()调用生成器对象来取值。next 两种方式 t.<strong>next</strong>() | next(t)。</p><p>可用for 循环获取返回值（每执行一次，取生成器里面一个值）</p><p>（基本上不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代）。</p><p>（3）yield相当于 return 返回一个值，并且记住这个返回的位置，下次迭代时，代码从yield的下一条语句开始执行。</p><p>（4）.send() 和next()一样，都能让生成器继续往下走一步（下次遇到yield停），但send()能传一个值，这个值作为yield表达式整体的结果</p><p>——换句话说，就是send可以强行修改上一个yield表达式值。比如函数中有一个yield赋值，a = yield 5，第一次迭代到这里会返回5，a还没有赋值。第二次迭代时，使用.send(10)，那么，就是强行修改yield 5表达式的值为10，本来是5的，那么a=10</p><p>感受下yield返回值的过程（<em>关注点：每次停在哪，下次又开始在哪</em>）及send()传参的通讯过程，</p><p>思考None是如何产生的（第一次取值：yield 返回了 i 值 0，停在yield i，temp没赋到值。第二次取值，开始在print，temp没被赋值，故打印None，i加1，继续while判断，yield 返回了 i 值 1，停在yield i）：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     temp <span class="token operator">=</span> <span class="token keyword">yield</span> i
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     i <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111201959152.png" alt="image-20211120195923071" tabindex="0"><figcaption>image-20211120195923071</figcaption></figure><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">yield_test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> call<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;i=&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Done.&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> yield_test<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   
<span class="token number">0</span> <span class="token punctuation">,</span>
i<span class="token operator">=</span> <span class="token number">0</span>
<span class="token number">2</span> <span class="token punctuation">,</span>
i<span class="token operator">=</span> <span class="token number">1</span>
<span class="token number">4</span> <span class="token punctuation">,</span>
i<span class="token operator">=</span> <span class="token number">2</span>
<span class="token number">6</span> <span class="token punctuation">,</span>
i<span class="token operator">=</span> <span class="token number">3</span>
<span class="token number">8</span> <span class="token punctuation">,</span>
i<span class="token operator">=</span> <span class="token number">4</span>
Done<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解的关键在于：下次迭代时，代码从yield的下一条语句开始执行。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h3><p>什么是生成器？</p><p>生成器仅仅保存了一套生成数值的算法，并且没有让这个算法现在就开始执行，而是我什么时候调它，它什么时候开始计算一个新的值，并给你返回。</p><p><strong>练习题</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count_down</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        newn <span class="token operator">=</span> <span class="token keyword">yield</span> n
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;newn&#39;</span><span class="token punctuation">,</span> newn<span class="token punctuation">)</span>
        <span class="token keyword">if</span> newn<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;if&#39;</span><span class="token punctuation">)</span>
            n <span class="token operator">=</span> newn
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;n =&#39;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            n <span class="token operator">-=</span> <span class="token number">1</span>


cd <span class="token operator">=</span> count_down<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> cd<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>
        cd<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111202020607.png" alt="image-20211120202013539" tabindex="0"><figcaption>image-20211120202013539</figcaption></figure>`,40),o=[t];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","pythonGenerator.html.vue"]]);export{k as default};
