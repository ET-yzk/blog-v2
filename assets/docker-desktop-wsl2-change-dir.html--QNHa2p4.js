import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as n,c as d,a as e,b as a,d as c,f as s}from"./app-HHaGRXeI.js";const p={},l=s('<h1 id="docker-docker-desktop-wsl2-修改镜像等文件存储位置" tabindex="-1"><a class="header-anchor" href="#docker-docker-desktop-wsl2-修改镜像等文件存储位置" aria-hidden="true">#</a> Docker - Docker Desktop(WSL2) 修改镜像等文件存储位置</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>以WSL2方式使用 Docker Desktop for Windows 确实带来了更好的体验，但同时也带来新的问题。其中最典型的问题就是系统盘空间的占用越来越大，而且还有典型的内存问题。</p><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>默认情况下，Docker Desktop for Window会创建如下两个发行版（distro）：</p><ul><li><p>docker-desktop</p></li><li><p>docker-desktop-data</p></li></ul><p>如果访问<code>%LOCALAPPDATA%/Docker/wsl</code>目录，就可以看到两个文件夹，同时每个文件夹中都会有一个vhdx文件。</p><p><code>%LOCALAPPDATA%/Docker/wsl</code> 就是当前登录用户的<code>AppData\\Local</code> 目录，假设当前登录的用户为Administrator，那么这个目录就是 <code>C:\\User\\Administrator\\AppData\\Local\\Docker\\wsl</code></p><ul><li>data/ext4.vhdx 是被docker-desktop-data 发行版使用</li><li>distro/ext4.vhdx 是被 docker-desktop 发行版使用</li></ul><p>docker-desktop-data 是被用来存储 docker images 以及相关的数据。因此，它的大小会随着使用逐步增长，因此导致系统盘空间不足。</p>',10),i={href:"https://docs.microsoft.com/en-us/windows/wsl/compare-versions#understanding-wsl-2-uses-a-vhd-and-what-to-do-if-you-reach-its-max-size",target:"_blank",rel:"noopener noreferrer"},h=s(`<p>使用命令<code>wsl --list --v</code> 可进行查看:</p><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202202081952108.png" alt="image-20220208195248995" tabindex="0"><figcaption>image-20220208195248995</figcaption></figure><h2 id="解决步骤" tabindex="-1"><a class="header-anchor" href="#解决步骤" aria-hidden="true">#</a> 解决步骤</h2><h3 id="_1-删除所有容器" tabindex="-1"><a class="header-anchor" href="#_1-删除所有容器" aria-hidden="true">#</a> 1. 删除所有容器</h3><p>可以使用命令，查看所有容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre></div><p>打开Docker Desktop for Window 的Dashboard界面，将该界面中的所有内容删除。</p><p>这一步很重要，如果不这样操作，进行后续操作的时候，要么提示网络相关错误：cannot create a specific network，要么导入完成之后，vhdx文件会消失。</p><h3 id="_2-退出docker-desktop" tabindex="-1"><a class="header-anchor" href="#_2-退出docker-desktop" aria-hidden="true">#</a> 2. 退出Docker Desktop</h3><p>检查是否所有发行版都已经关闭</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>wsl <span class="token parameter variable">--list</span> <span class="token parameter variable">--v</span>
<span class="token comment">########得到以下结果###############</span>
<span class="token comment"># D:\\work&gt;wsl --list --v</span>
<span class="token comment"># NAME                   STATE           VERSION</span>
<span class="token comment"># Ubuntu                 Stopped         2</span>
<span class="token comment"># docker-desktop         Stopped         2</span>
<span class="token comment"># docker-desktop-data    Stopped         2</span>
</code></pre></div><h3 id="_3-导出wsl子系统镜像" tabindex="-1"><a class="header-anchor" href="#_3-导出wsl子系统镜像" aria-hidden="true">#</a> 3. 导出wsl子系统镜像:</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>wsl <span class="token parameter variable">--export</span> docker-desktop /path/to/docker-desktop.tar
wsl <span class="token parameter variable">--export</span> docker-desktop-data /path/to/docker-desktop-data.tar
</code></pre></div><h3 id="_4-注销-删除-现有的wsl子系统" tabindex="-1"><a class="header-anchor" href="#_4-注销-删除-现有的wsl子系统" aria-hidden="true">#</a> 4. 注销（删除）现有的wsl子系统：</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>wsl <span class="token parameter variable">--unregister</span> docker-desktop
wsl <span class="token parameter variable">--unregister</span> docker-desktop-data
</code></pre></div><h3 id="_5-重新创建wsl子系统" tabindex="-1"><a class="header-anchor" href="#_5-重新创建wsl子系统" aria-hidden="true">#</a> 5. 重新创建wsl子系统：</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>wsl <span class="token parameter variable">--import</span> docker-desktop d:<span class="token punctuation">\\</span>your-install-path /path/to/docker-desktop.tar
wsl <span class="token parameter variable">--import</span> docker-desktop-data d:<span class="token punctuation">\\</span>your-install-path /path/to/docker-desktop-data.tar
</code></pre></div>`,17);function k(u,m){const o=r("ExternalLinkIcon");return n(),d("div",null,[l,e("p",null,[a("vhdx文件最大支持256G，超出这个大小将会出错。参见："),e("a",i,[a("官方说明"),c(o)]),a("。")]),h])}const w=t(p,[["render",k],["__file","docker-desktop-wsl2-change-dir.html.vue"]]);export{w as default};
