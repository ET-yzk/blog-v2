import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as s,c as i,a as e,b as t,d as o}from"./app-HHaGRXeI.js";const a={},_=e("h1",{id:"滴滴",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#滴滴","aria-hidden":"true"},"#"),t(" 滴滴")],-1),c=e("h2",{id:"测开",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#测开","aria-hidden":"true"},"#"),t(" 测开")],-1),d=e("p",null,"IOC和AOP，DI",-1),O=e("p",null,[e("strong",null,"区分")],-1),h={href:"https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},u={href:"https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E5%8D%95%E5%85%83",target:"_blank",rel:"noopener noreferrer"},p={href:"https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},E={href:"https://baike.baidu.com/item/%E4%B8%9A%E5%8A%A1%E5%AE%9E%E4%BD%93",target:"_blank",rel:"noopener noreferrer"},P=e("p",null,"同样，对于“权限检查”这一动作片断进行划分，则是AOP的目标领域。而通过OOD/OOP对一个动作进行封装，则有点不伦不类。",-1),A=e("p",null,"换而言之，OOD/OOP面向名词领域，AOP面向动词领域。",-1),m=e("p",null,[e("strong",null,"关系")],-1),f=e("p",null,"很多人在初次接触 AOP 的时候可能会说，AOP 能做到的，一个定义良好的 OOP 的接口也一样能够做到，我想这个观点是值得商榷的。AOP和定义良好的 OOP 的接口可以说都是用来解决并且实现需求中的横切问题的方法。但是对于 OOP 中的接口来说，它仍然需要我们在相应的模块中去调用该接口中相关的方法，这是 OOP 所无法避免的，并且一旦接口不得不进行修改的时候，所有事情会变得一团糟；AOP 则不会这样，你只需要修改相应的 Aspect，再重新编织（weave）即可。 当然，AOP 也绝对不会代替 OOP。核心的需求仍然会由 OOP 来加以实现，而 AOP 将会和 OOP 整合起来，以此之长，补彼之短。",-1),b=e("li",null,[e("p",null,"冒泡排序、归并排序、快排、选择排序、归并排序、最长重复子串")],-1),k=e("li",null,[e("p",null,"如何理解容器")],-1),B=e("li",null,[e("p",null,"http和https，ssl建立连接过程")],-1),x=e("li",null,[e("p",null,"tcp3次握手，4次挥手")],-1),D=e("li",null,null,-1);function g(v,I){const n=r("ExternalLinkIcon");return s(),i("div",null,[_,c,e("ol",null,[e("li",null,[d,O,e("p",null,[t("AOP、OOP在字面上虽然非常类似，但却是面向不同领域的两种设计思想。OOP（"),e("a",h,[t("面向对象编程"),o(n)]),t("）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的"),e("a",u,[t("逻辑单元"),o(n)]),t("划分。")]),e("p",null,[t("而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低"),e("a",p,[t("耦合性"),o(n)]),t("的隔离效果。这两种设计思想在目标上有着本质的差异。")]),e("p",null,[t("上面的陈述可能过于理论化，举个简单的例子，对于“雇员”这样一个"),e("a",E,[t("业务实体"),o(n)]),t("进行封装，自然是OOP/OOD的任务，我们可以为其建立一个“Employee”类，并将“雇员”相关的属性和行为封装其中。而用AOP设计思想对“雇员”进行封装将无从谈起。")]),P,A,m,f]),b,k,B,x,D])])}const V=l(a,[["render",g],["__file","didi.html.vue"]]);export{V as default};
