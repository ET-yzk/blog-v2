import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as s,c as t,a as l,b as i,d as o,f as a}from"./app-HHaGRXeI.js";const c={},r=l("h1",{id:"前端基础",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#前端基础","aria-hidden":"true"},"#"),i(" 前端基础")],-1),d=l("h2",{id:"js-vue-react",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#js-vue-react","aria-hidden":"true"},"#"),i(" JS & Vue & React")],-1),u=a("<li><p>== 和 ===</p></li><li><p>null和undefined</p></li><li><p>typeof bar === “object” 验证的风险</p></li><li><p>NaN：，类型，验证它的函数</p></li><li><p>get和post区别</p><ol><li></li></ol></li><li><p>use strict</p></li><li><p>什么是window对象，什么是document对象</p></li><li><p>原型链：构造函数、实例对象、原型之间关系图</p></li><li><p>apply和call的区别</p></li><li><p>替代图片的方法</p></li>",10),m=l("p",null,"MVVM原理",-1),v={href:"https://zhuanlan.zhihu.com/p/38270598",target:"_blank",rel:"noopener noreferrer"},h=a(`<li><p>输入http到绚烂成网页中间发生了什么</p></li><li><p>html是怎么渲染的</p></li><li><p>创建对象的方法：字面量、构造方法、构造函数、工厂模式、原型模式</p></li><li><p>new一个实例对象会发生什么</p></li><li><p>基本数据类型和引用数据类型有什么区别</p></li><li><p>箭头函数和普通函数区别，普通函数的this指向问题</p></li><li><p>数组去重有哪些方法，用set的好处</p></li><li><p>for循环可以用什么来代替：reduce</p></li><li><p>JS中的遍历对象的方法有哪些，for in能否遍历循环出原型对象</p></li><li><p>Vue的生命周期，created和mounted区别</p><ol><li></li></ol></li><li><p>v-mode的原理</p></li><li><p>Object.defineProperty方法</p></li><li><p>Vue3.0中的Proxy作用和使用</p></li><li><p>v-if和v-show的computed和watch区别，应用场景</p></li><li><p>浏览器策略</p></li><li><p>css常用布局</p></li><li><p>Vue中父子组件传值问题</p></li><li><p>Vuex的使用</p></li><li><p>vue-router原理</p></li><li><p>iframe用于在网页中插入第三方页面，早期的页面使用iframe主要是用于导航栏这种很多页面都相同的部分，从而在切换页面的时候避免重复下载。</p><ol><li>优点 方便修改，模拟分离，像一些信息管理系统会用到。 但现在基本不推荐使用。除非特殊需要，一般不推荐使用。</li><li>缺点 iframe的创作比一般的DOM元素慢了1-2个数量级 iframe标签会在页面上的加载，如果页面的onload事件无法及时触发，导致用户觉得网页加载很慢，用户体验不好，在Safari和Chrome中可以通过js动态设置iframe的src属性来避免重复。 iframe对于SEO不友好，替代方案一般就是动态语言的Incude机制和aj​​ax动态填充内容等。</li></ol></li><li><p>浏览器是怎么对HTML5的离线存储资源进行管理和加载</p><ol><li>在线的情况下，浏览器发现html右侧有清单属性，它会请求清单文件。</li><li>如果是第一次访问app，那么浏览器就会根据清单文件的内容下载相应的资源并进行离线存储。</li><li>如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，</li><li>然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件更改了，那么就会重新下载文件中的资源并进行离线存储。</li><li>离线的情况下，浏览器就直接使用离线存储的资源。</li></ol></li><li><p>HTML5的离线存储如何使用，工作原理能不能解释一下？</p><ol><li><p>在用户没有与互联连接时，可以正常访问站点或应用，在用户与互联连接时，更新用户机器上的缓存文件。</p></li><li><p>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制（不是存储技术），通过这个文件上的解析列表离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p></li><li><p>使用方法</p><p>只要在头部加一个清单属性就可以了</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>！DOCTYPE</span> <span class="token attr-name">html</span><span class="token punctuation">&gt;</span></span>
&lt; html  manifest = “ cache.manifest ” &gt;
  ...
&lt;/ html &gt;
</code></pre></div><p>然后cache.manifest文件的书写方式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">CACHE</span> <span class="token constant">MANIFEST</span>
#v0<span class="token punctuation">.</span><span class="token number">11</span>

<span class="token constant">CACHE</span><span class="token operator">:</span>

js<span class="token operator">/</span>app<span class="token punctuation">.</span>js
css<span class="token operator">/</span>style<span class="token punctuation">.</span>css

<span class="token constant">NETWORK</span><span class="token operator">:</span>
resourse<span class="token operator">/</span>logo<span class="token punctuation">.</span>png

<span class="token constant">FALLBACK</span><span class="token operator">:</span>
<span class="token operator">/</span> <span class="token operator">/</span>offline<span class="token punctuation">.</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>AJAX = <em>A</em>synchronous <em>J</em>avaScript <em>A</em>nd <em>X</em>ML.</p><p>AJAX 并非编程语言。</p><p>AJAX 仅仅组合了：</p><ul><li>浏览器内建的 XMLHttpRequest 对象（从 web 服务器请求数据）</li><li>JavaScript 和 HTML DOM（显示或使用数据）</li></ul><p>Ajax 是一个令人误导的名称。Ajax 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</p><p>Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面。</p><p>Ajax请求：</p><ol><li>网页中发生一个事件（页面加载、按钮点击）</li><li>由 JavaScript 创建 XMLHttpRequest 对象</li><li>XMLHttpRequest 对象向 web 服务器发送请求</li><li>服务器处理该请求</li><li>服务器将响应发送回网页</li><li>由 JavaScript 读取响应</li><li>由 JavaScript 执行正确的动作（比如更新页面）</li></ol></li><li><p>前端页面三层结构：</p><ol><li>合并：结构层，表示层，行为层。</li><li>结构层（structural layer） 标签，也就是那些出现在尖括号里的单词，对网页内容的语义暗示引起了描述，但这些标签不包含任何关于如何找到有关内容的信息。例如，P标签表达了这样一种语义：“这是一个文本段。”</li><li>表示层（presentation layer） 由CSS对“如何显示有关内容”的问题做出了回答。</li><li>行为层（behaviorlayer） 负责回答“内容应该如何对事件引发反应”这一问题。这是Javascript语言和DOM主宰的领域。</li></ol></li><li><p>HTML DOM（文档对象模型）</p><p>当网页被加载时，浏览器会创建页面的文档对象模型（<em>D</em>ocument <em>O</em>bject <em>M</em>odel）。</p><p><em>HTML DOM</em> 模型被结构化为<em>对象树</em>：</p><p><code>对象的 HTML DOM 树</code></p><figure><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202111292257614.gif" alt="DOM HTML 树" tabindex="0"><figcaption>DOM HTML 树</figcaption></figure><p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p><ul><li>JavaScript 能改变页面中的所有 HTML 元素</li><li>JavaScript 能改变页面中的所有 HTML 属性</li><li>JavaScript 能改变页面中的所有 CSS 样式</li><li>JavaScript 能删除已有的 HTML 元素和属性</li><li>JavaScript 能添加新的 HTML 元素和属性</li><li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li><li>JavaScript 能在页面中创建新的 HTML 事件</li></ul></li>`,25);function f(M,b){const e=p("ExternalLinkIcon");return s(),t("div",null,[r,d,l("ol",null,[u,l("li",null,[m,l("ol",null,[l("li",null,[l("a",v,[i("MVVM最佳解读和实践 - 知乎 (zhihu.com)"),o(e)])])])]),h])])}const g=n(c,[["render",f],["__file","frontend-base.html.vue"]]);export{g as default};
