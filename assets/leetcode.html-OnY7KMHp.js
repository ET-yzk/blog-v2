import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as s,f as a}from"./app-HHaGRXeI.js";const e={},o=a(`<h1 id="leetcode-笔记" tabindex="-1"><a class="header-anchor" href="#leetcode-笔记" aria-hidden="true">#</a> LeetCode 笔记</h1><p>[TOC]</p><h2 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 1.给定无序整数序列，求连续非空子串最大和，例如{-23 17 -7 11 -2 1 -34}，子串为{17,-7,11}，最大和为21</span>
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索" aria-hidden="true">#</a> 搜索</h2><ol start="3"><li>无重复字符的最长子串</li></ol><p>class Solution: def lengthOfLongestSubstring(self, s): &quot;&quot;&quot; :type s: str :rtype: int &quot;&quot;&quot; from collections import defaultdict lookup = defaultdict(int) start = 0 end = 0 max_len = 0 counter = 0 while end &lt; len(s): if lookup[s[end]] &gt; 0: counter += 1 lookup[s[end]] += 1 end += 1 while counter &gt; 0: if lookup[s[start]] &gt; 1: counter -= 1 lookup[s[start]] -= 1 start += 1 max_len = max(max_len, end - start) return max_len</p><ol start="76"><li>最小覆盖子串</li></ol><p>class Solution: def minWindow(self, s: &#39;str&#39;, t: &#39;str&#39;) -&gt; &#39;str&#39;: from collections import defaultdict lookup = defaultdict(int) for c in t: lookup[c] += 1 start = 0 end = 0 min_len = float(&quot;inf&quot;) counter = len(t) res = &quot;&quot; while end &lt; len(s): if lookup[s[end]] &gt; 0: counter -= 1 lookup[s[end]] -= 1 end += 1 while counter == 0: if min_len &gt; end - start: min_len = end - start res = s[start:end] if lookup[s[start]] == 0: counter += 1 lookup[s[start]] += 1 start += 1 return res 159. 至多包含两个不同字符的最长子串</p><p>class Solution: def lengthOfLongestSubstringTwoDistinct(self, s: str) -&gt; int: from collections import defaultdict lookup = defaultdict(int) start = 0 end = 0 max_len = 0 counter = 0 while end &lt; len(s): if lookup[s[end]] == 0: counter += 1 lookup[s[end]] += 1 end +=1 while counter &gt; 2: if lookup[s[start]] == 1: counter -= 1 lookup[s[start]] -= 1 start += 1 max_len = max(max_len, end - start) return max_len 340. 至多包含 K 个不同字符的最长子串</p><p>class Solution: def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -&gt; int: from collections import defaultdict lookup = defaultdict(int) start = 0 end = 0 max_len = 0 counter = 0 while end &lt; len(s): if lookup[s[end]] == 0: counter += 1 lookup[s[end]] += 1 end += 1 while counter &gt; k: if lookup[s[start]] == 1: counter -= 1 lookup[s[start]] -= 1 start += 1 max_len = max(max_len, end - start) return max_len 滑动窗口题目:</p><ol start="3"><li>无重复字符的最长子串</li><li>串联所有单词的子串</li><li>最小覆盖子串</li><li>至多包含两个不同字符的最长子串</li><li>长度最小的子数组</li><li>滑动窗口最大值</li><li>字符串的排列</li><li>最小区间</li><li>最小窗口子序列</li><li></li></ol>`,12),l=[o];function p(i,c){return t(),s("div",null,l)}const d=n(e,[["render",p],["__file","leetcode.html.vue"]]);export{d as default};
