import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c as i,d as r,a as t,b as m,f as d}from"./app-HHaGRXeI.js";const l={},p=t("h1",{id:"编译原理",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#编译原理","aria-hidden":"true"},"#"),m(" 编译原理")],-1),g=d('<h2 id="文法" tabindex="-1"><a class="header-anchor" href="#文法" aria-hidden="true">#</a> 文法</h2><h3 id="字符串方幂" tabindex="-1"><a class="header-anchor" href="#字符串方幂" aria-hidden="true">#</a> 字符串方幂</h3><p>递推关系</p><h2 id="antlr4" tabindex="-1"><a class="header-anchor" href="#antlr4" aria-hidden="true">#</a> ANTLR4</h2>',4),h={href:"https://www.cnblogs.com/csguo/p/7644272.html",target:"_blank",rel:"noopener noreferrer"},c=d('<h3 id="正则" tabindex="-1"><a class="header-anchor" href="#正则" aria-hidden="true">#</a> 正则</h3><table><thead><tr><th><strong>语法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><em>x</em></td><td>匹配一个符号，规则或子规则x</td></tr><tr><td><em>x y</em> … <em>z</em></td><td>匹配一个规则序列</td></tr><tr><td>(…|…|…)</td><td>带有多个选项的子规则</td></tr><tr><td><em>x?</em></td><td>匹配零次或一次x</td></tr><tr><td><em>x*</em></td><td>匹配零次或多次x</td></tr><tr><td><em>x+</em></td><td>匹配一次或多次x</td></tr><tr><td><strong>r</strong>:…;</td><td>定义规则r</td></tr><tr><td>r:…|…|…;</td><td>定义一个带有多个选项的规则r</td></tr></tbody></table><table><thead><tr><th><strong>模式名称</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>序列</strong></td><td style="text-align:left;">这是由符号和子短语组成的任意长的有限的序列，例如变量声明语法（类型后面加上标识符）以及整数列表等。下面是一些实现这种模式的例子：x y ... z <em>// x followed by y, ..., z</em>*&#39;[&#39;* INT+ <em>&#39;]&#39;</em> <em>// Matlab vector of integers</em></td></tr><tr><td><strong>带终结符的序列</strong></td><td style="text-align:left;">这是由符号和子短语组成的任意长的，可能是空的序列，以一个符号结束，通常情况系这个符号是分号或换行符，例如C风格的编程语言中的语句以及以换行符终结的数据行。下面是一些实现这种模式的例子：(statement <em>&#39;;&#39;</em>)* <em>// Java statement list</em>(row <em>&#39;\\n&#39;</em>)* <em>// Lines of data</em></td></tr><tr><td><strong>带分隔符的序列</strong></td><td style="text-align:left;">这是由符号的子短语组成的任意长的非空的序列，用一个特定的符号分隔开，通常这个符号是逗号，分号或句号。例如函数参数列表，函数调用列表，或者是分开却不终止的程序语句。下面是一些实现这种模式的例子：expr (<em>&#39;,&#39;</em> expr)* <em>// function call arguments</em>( expr (<em>&#39;,&#39;</em> expr)* )?<em>// optional function call arguments**&#39;/&#39;</em>? name (<em>&#39;/&#39;<em>name)</em> <em>// simplified directory name</em>stat (</em>&#39;.&#39;* stat)* <em>// SmallTalk statement list</em></td></tr><tr><td><strong>选项</strong></td><td style="text-align:left;">这是由一系列可选择的短语组成的，例如类型说明，语句，表达式或者XML的标签。下面是一些实现这种模式的例子：type : <em>&#39;int&#39;</em> | <em>&#39;float&#39;</em>;stat : ifstat | whilestat | *&#39;return&#39;<em>expr <em>&#39;;&#39;</em> ;expr : <em>&#39;(&#39;</em> expr <em>&#39;)&#39;</em>| INT | ID ;tag : <em>&#39;&lt;&#39;</em> Name attribute</em> <em>&#39;&gt;&#39;</em>| <em>&#39;&lt;&#39; &#39;/&#39;</em> Name <em>&#39;&gt;&#39;</em>;</td></tr><tr><td><strong>符号约束</strong></td><td style="text-align:left;">一个符号的出现需要另一个或多个子序列符号的出现来对应，例如小括号，中括号，大括号，尖括号的匹配等。下面是一些实现这种模式的例子：<em>&#39;(&#39;</em> expr <em>&#39;)&#39;</em> <em>// nested expression</em>ID <em>&#39;[&#39;</em> expr <em>&#39;]&#39;</em> <em>// array index</em>*&#39;{&#39;* stat* <em>&#39;}&#39;</em> <em>// statements grouped in curlies</em>*&#39;&lt;&#39;* ID (*&#39;,&#39;<em>ID)</em> <em>&#39;&gt;&#39; // generic type specifier</em></td></tr><tr><td><strong>递归短语</strong></td><td style="text-align:left;">这是一种自相似的语言结构，例如表达式结构，Java类嵌套，代码块嵌套以及Python中的函数嵌套定义等。下面是一些实现这种模式的例子：expr : <em>&#39;(&#39;</em> expr <em>&#39;)&#39;</em>| ID ;classDef : <em>&#39;class&#39;</em> ID <em>&#39;{&#39;</em>(classDef|method|field) <em>&#39;}&#39;</em> ;</td></tr></tbody></table><table><thead><tr><th><strong>符号类别</strong></th><th><strong>描述和例子</strong></th></tr></thead><tbody><tr><td>标点符号</td><td>对标点符号和运算符最简单的处理就是直接在语法规则中引用它们。call : ID <em>&#39;(&#39;</em> exprList <em>&#39;)&#39;</em> ;当然一些程序员更喜欢定义符号的标签规则，例如定义LP来代表左括号。call : ID LP exprList RP ;LP : <em>&#39;(&#39;</em> ;RP : <em>&#39;)&#39;</em> ;</td></tr><tr><td>关键字</td><td>关键字就是保留的标识符，和标点符号的处理一样，我们可以直接引用也可以定义标签规则。returnStat : <em>&#39;return&#39;</em> expr <em>&#39;;&#39;</em></td></tr><tr><td>标识符</td><td>标识符在几乎所有语言中看起来都差不多，可以再加一些改动，比如规定首字符以及设定是否可以使用Unicode字符。ID : ID_LETTER (ID_LETTER | DIGIT)* ; <em>// From C language</em><strong>fragment</strong> ID_LETTER : <em>&#39;a&#39;</em>..<em>&#39;z&#39;</em>|<em>&#39;A&#39;</em>..<em>&#39;Z&#39;</em>|<em>&#39;_&#39;</em> ;<strong>fragment</strong> DIGIT : <em>&#39;0&#39;</em>..<em>&#39;9&#39;</em> ;</td></tr><tr><td>数字</td><td>例子中是整数和简单浮点数的定义。INT : DIGIT+ ;FLOAT : DIGIT+ <em>&#39;.&#39;</em> DIGIT* | <em>&#39;.&#39;</em> DIGIT+ ;</td></tr><tr><td>字符串</td><td>匹配使用双引号引起来的字符串。STRING : <em>&#39;&quot;&#39;</em> ( ESC | . )<em>? <em>&#39;&quot;&#39;</em> ;<strong>fragment</strong> ESC : <em>&#39;\\&#39;</em> [btnr</em>&quot;\\] ; // \\b, \\t, \\n etc...*</td></tr><tr><td>注释</td><td>识别并丢弃注释。LINE_COMMENT : <em>&#39;//&#39;</em> .<em>? <em>&#39;\\n&#39;</em> -&gt; skip ;COMMENT : <em>&#39;/*&#39;</em> .</em>? <em>&#39;*/&#39;</em> -&gt; skip ;</td></tr><tr><td>空白字符</td><td>匹配词法中的空白字符并丢弃这些字符。WS : [ \\t\\n\\r]+ -&gt; skip ;</td></tr></tbody></table><h2 id="数据存储组织" tabindex="-1"><a class="header-anchor" href="#数据存储组织" aria-hidden="true">#</a> 数据存储组织</h2><table><thead><tr><th>内存</th></tr></thead><tbody><tr><td>栈【局部数据】</td></tr><tr><td>堆</td></tr><tr><td>静态Data</td></tr><tr><td>code/text</td></tr></tbody></table><h2 id="期末内容" tabindex="-1"><a class="header-anchor" href="#期末内容" aria-hidden="true">#</a> 期末内容</h2><p><strong>选择题 10 * 2</strong></p><p><strong>编译器结构：前后端包括，作用</strong></p><p>（1） 编译程序：如果源语言为高级语言，目标语言为某台计算机上的汇编语言或机器语言，则此翻译程序称为编译程序。</p><p>（2） 源程序：源语言编写的程序称为源程序。</p><p>（3） 目标程序：目标语言书写的程序称为目标程序。</p><p>（4） 编译程序的前端：它由这样一些阶段组成：这些阶段的工作主要依赖于源语言而与目标机无关。通常前端包括词法分析、语法分析、语义分析和中间代码生成这些阶 段，某些优化工作也可在前端做，也包括与前端每个阶段相关的出错处理工作和符号表管理等工作。</p><p>（5） 后端：指那些依赖于目标机而一般不依赖源语言，只与中间代码有关的那些阶段， 即目标代码生成，以及相关出错处理和符号表操作。</p><p>（6） 遍：是对源程序或其等价的中间语言程序从头到尾扫视并完成规定任务的过程。</p><p><strong>文法：定义要素，给定文法、串可以推导/生成语言，4种语言</strong></p><p><strong>词法分析：任务</strong></p><p><strong>自顶向下xxx语法分析：几个方法的意思</strong></p><p><strong>文法语义</strong></p><p><strong>存储动态静态</strong></p><p><strong>优化基本</strong>：窥孔优化、局部优化、循环优化、全局优化</p><p><strong>计算题 5 * 10</strong></p><p>文法、串，给出推导树、过程等，nfa、dfa【不要求最小化】</p><p>ll分析-文法改造：消除左递归、提取公因子、first集等，</p><p>lr、slr、lr0：增广、闭包、自动机、状态转移树，判断属于那种文法</p><p>可能有简答题: 常用语法方法（自顶向下【递归下降、预测分析法、LL】、自底向下【移进和规约原理、LR(0)分析法】）\\活动记录：作用、调用者、被调用者、存的信息\\变量如何存储</p><p><strong>活动记录</strong>：指运行栈上的栈帧。它在函数/过程调用时被创建；在函数/过程运行中被修改；在函数/过程返回时撤销。包含局部变量、函数实参、临时变量、返回值等数据信息及必要控制信息。调用者是，被调用者是函数/过程?。</p><p>翻译3地址指令、构造指令流图</p><p>基本块的入口：1.程序的第一条语句 2.跳转语句的跳转目标语句 3.条件跳转语句后面的相邻语句</p><p><strong>综合 2 * 15</strong></p>',30);function x(f,b){const a=e("Mermaid"),n=e("ExternalLinkIcon");return o(),i("div",null,[p,r(a,{id:"mermaid-3",code:"eJxLL0osyFAIcbHmUgCCp+27Xk6Z+XRJy/MJbc9XdD/d1a+ra/dife+zzVOfdrQ9mzcBr7K1RCp7srOToLInO9a+nL7lye7Fzxc0Pp8y/1kHXsVgZU/2zHjaMw2Psuez1z1b0I5pJph4tmsCHh8ji2D1K7IIVl8ii+DxH6Y4Vv8hi+DxGaY4mmKkAHixcMWzBXuer1uIP+5xKMMIDxzK0EMFmzJcYYNdMUbYYFWGM+4BFqGzsw=="}),g,t("p",null,[t("a",h,[m("ANTLR4权威指南 - 第5章 设计语法 - csguo - 博客园 (cnblogs.com)"),r(n)])]),c])}const y=s(l,[["render",x],["__file","bian-yi-yuan-li.html.vue"]]);export{y as default};
