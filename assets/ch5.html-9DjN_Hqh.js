import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a as e,b as a,d as s,w as l,f as r}from"./app-HHaGRXeI.js";const h="/assets/ch5-dmVR-BBD.png",m="/assets/fig5-1--FH_4J1s.png",d="/assets/fig5-2-XY0r7IEa.png",g="/assets/fig5-3-1lWoRvqS.png",u="/assets/fig5-4-DSx1zd6K.png",f="/assets/fig5-5-BAV4r9KX.png",_="/assets/fig5-6-wPeHe2_0.png",b="/assets/fig5-7-6i4ZhGTm.png",y="/assets/fig5-8-09aygciQ.png",w="/assets/fig5-9-pHYtZQuD.png",k="/assets/fig5-10-U9KWM5x0.png",E="/assets/fig5-11-sLs61eRQ.png",A="/assets/fig5-12-e7PFiwcF.png",x="/assets/fig5-13-MAiI51Gl.png",B="/assets/fig5-14-dhkDY_P6.png",D={},M=e("h1",{id:"第五章-复制",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第五章-复制","aria-hidden":"true"},"#"),a(" 第五章：复制")],-1),S=e("figure",null,[e("img",{src:h,alt:"",tabindex:"0"}),e("figcaption")],-1),v=e("blockquote",null,[e("p",null,"与可能出错的东西比，'不可能'出错的东西最显著的特点就是：一旦真的出错，通常就彻底玩完了。"),e("p",null,"——道格拉斯·亚当斯（1992）")],-1),C=e("hr",null,null,-1),R=e("p",null,"[TOC]",-1),L=e("ul",null,[e("li",null,"使得数据与用户在地理上接近（从而减少延迟）"),e("li",null,"即使系统的一部分出现故障，系统也能继续工作（从而提高可用性）"),e("li",null,"伸缩可以接受读请求的机器数量（从而提高读取吞吐量）")],-1),P=r('<p>​ 如果复制中的数据不会随时间而改变，那复制就很简单：将数据复制到每个节点一次就万事大吉。复制的困难之处在于处理复制数据的<strong>变更（change）</strong>，这就是本章所要讲的。我们将讨论三种流行的变更复制算法：<strong>单领导者（single leader）</strong>，<strong>多领导者（multi leader）</strong> 和<strong>无领导者（leaderless）</strong>。几乎所有分布式数据库都使用这三种方法之一。</p><p>​ 在复制时需要进行许多权衡：例如，使用同步复制还是异步复制？如何处理失败的副本？这些通常是数据库中的配置选项，细节因数据库而异，但原理在许多不同的实现中都类似。本章会讨论这些决策的后果。</p><p>​ 数据库的复制算得上是老生常谈了 ——70年代研究得出的基本原则至今没有太大变化【1】，因为网络的基本约束仍保持不变。然而在研究之外，许多开发人员仍然假设一个数据库只有一个节点。分布式数据库变为主流只是最近发生的事。许多程序员都是这一领域的新手，因此对于诸如 <strong>最终一致性（eventual consistency）</strong> 等问题存在许多误解。在“<a href="#%E5%A4%8D%E5%88%B6%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98">复制延迟问题</a>”一节，我们将更加精确地了解最终的一致性，并讨论诸如 <strong>读己之写（read-your-writes）</strong> 和 <strong>单调读（monotonic read）</strong> 保证等内容。</p><h2 id="领导者与追随者" tabindex="-1"><a class="header-anchor" href="#领导者与追随者" aria-hidden="true">#</a> 领导者与追随者</h2><p>​ 存储数据库副本的每个节点称为 <strong>副本（replica）</strong> 。当存在多个副本时，会不可避免的出现一个问题：如何确保所有数据都落在了所有的副本上？</p><p>​ 每一次向数据库的写入操作都需要传播到所有副本上，否则副本就会包含不一样的数据。最常见的解决方案被称为 <strong>基于领导者的复制（leader-based replication）</strong> （也称 <strong>主动/被动（active/passive）</strong> 或 <strong>主/从（master/slave）</strong> 复制），如<a href="#fig5-1.png">图5-1</a>所示。它的工作原理如下：</p><ol><li>副本之一被指定为 <strong>领导者（leader）</strong>，也称为 <strong>主库（master|primary）</strong> 。当客户端要向数据库写入时，它必须将请求发送给<strong>领导者</strong>，领导者会将新数据写入其本地存储。</li><li>其他副本被称为<strong>追随者（followers）</strong>，亦称为<strong>只读副本（read replicas）</strong>，<strong>从库（slaves）</strong>，<strong>备库（ secondaries）</strong>，<strong>热备（hot-standby）</strong><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。每当领导者将新数据写入本地存储时，它也会将数据变更发送给所有的追随者，称之为<strong>复制日志（replication log）</strong> 记录或<strong>变更流（change stream）</strong>。每个跟随者从领导者拉取日志，并相应更新其本地数据库副本，方法是按照领导者处理的相同顺序应用所有写入。</li><li>当客户想要从数据库中读取数据时，它可以向领导者或追随者查询。 但只有领导者才能接受写操作（从客户端的角度来看从库都是只读的）。</li></ol><p><img src="'+m+'" alt=""><strong>图5-1 基于领导者(主-从)的复制</strong></p><p>​ 这种复制模式是许多关系数据库的内置功能，如PostgreSQL（从9.0版本开始），MySQL，Oracle Data Guard 【2】和SQL Server的AlwaysOn可用性组【3】。 它也被用于一些非关系数据库，包括MongoDB，RethinkDB和Espresso 【4】。 最后，基于领导者的复制并不仅限于数据库：像Kafka 【5】和RabbitMQ高可用队列【6】这样的分布式消息代理也使用它。 某些网络文件系统，例如DRBD这样的块复制设备也与之类似。</p><h3 id="同步复制与异步复制" tabindex="-1"><a class="header-anchor" href="#同步复制与异步复制" aria-hidden="true">#</a> 同步复制与异步复制</h3><p>​ 复制系统的一个重要细节是：复制是 <strong>同步（synchronously）</strong> 发生还是 <strong>异步（asynchronously）</strong> 发生。 （在关系型数据库中这通常是一个配置项，其他系统通常硬编码为其中一个）。</p><p>​ 想象<a href="fig5-1.png">图5-1</a>中发生的情况，网站的用户更新他们的个人头像。在某个时间点，客户向主库发送更新请求；不久之后主库就收到了请求。在某个时刻，主库又会将数据变更转发给自己的从库。最后，主库通知客户更新成功。</p><p><a href="./img/fig5-2.png">图5-2</a>显示了系统各个组件之间的通信：用户客户端，主库和两个从库。时间从左到右流动。请求或响应消息用粗箭头表示。</p><p><img src="'+d+'" alt=""><strong>图5-2 基于领导者的复制：一个同步从库和一个异步从库</strong></p><p>​ 在<a href="./img/fig5-2.png">图5-2</a>的示例中，从库1的复制是同步的：在向用户报告写入成功，并使结果对其他用户可见之前，主库需要等待从库1的确认，确保从库1已经收到写入操作。以及在使写入对其他客户端可见之前接收到写入。跟随者2的复制是异步的：主库发送消息，但不等待从库的响应。</p><p>​ 在这幅图中，从库2处理消息前存在一个显著的延迟。通常情况下，复制的速度相当快：大多数数据库系统能在一秒向从库应用变更，但它们不能提供复制用时的保证。有些情况下，从库可能落后主库几分钟或更久；例如：从库正在从故障中恢复，系统在最大容量附近运行，或者如果节点间存在网络问题。</p><p>​ 同步复制的优点是，从库保证有与主库一致的最新数据副本。如果主库突然失效，我们可以确信这些数据仍然能在从库上上找到。缺点是，如果同步从库没有响应（比如它已经崩溃，或者出现网络故障，或其它任何原因），主库就无法处理写入操作。主库必须阻止所有写入，并等待同步副本再次可用。</p><p>​ 因此，将所有从库都设置为同步的是不切实际的：任何一个节点的中断都会导致整个系统停滞不前。实际上，如果在数据库上启用同步复制，通常意味着其中<strong>一个</strong>跟随者是同步的，而其他的则是异步的。如果同步从库变得不可用或缓慢，则使一个异步从库同步。这保证你至少在两个节点上拥有最新的数据副本：主库和同步从库。 这种配置有时也被称为 <strong>半同步（semi-synchronous）</strong>【7】。</p><p>​ 通常情况下，基于领导者的复制都配置为完全异步。 在这种情况下，如果主库失效且不可恢复，则任何尚未复制给从库的写入都会丢失。 这意味着即使已经向客户端确认成功，写入也不能保证 <strong>持久（Durable）</strong> 。 然而，一个完全异步的配置也有优点：即使所有的从库都落后了，主库也可以继续处理写入。</p><p>​ 弱化的持久性可能听起来像是一个坏的折衷，然而异步复制已经被广泛使用了，特别当有很多追随者，或追随者异地分布时。 稍后将在“<a href="#%E5%A4%8D%E5%88%B6%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98">复制延迟问题</a>”中回到这个问题。</p>',20),I=e("h3",{id:"关于复制的研究",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#关于复制的研究","aria-hidden":"true"},"#"),a(" 关于复制的研究")],-1),T=e("p",null,[a("对于异步复制系统而言，主库故障时有可能丢失数据。这可能是一个严重的问题，因此研究人员仍在研究不丢数据但仍能提供良好性能和可用性的复制方法。 例如，"),e("strong",null,"链式复制"),a("【8,9】]是同步复制的一种变体，已经在一些系统（如Microsoft Azure存储【10,11】）中成功实现。")],-1),F=e("strong",null,"共识（consensus）",-1),W=r('<h3 id="设置新从库" tabindex="-1"><a class="header-anchor" href="#设置新从库" aria-hidden="true">#</a> 设置新从库</h3><p>​ 有时候需要设置一个新的从库：也许是为了增加副本的数量，或替换失败的节点。如何确保新的从库拥有主库数据的精确副本？</p><p>​ 简单地将数据文件从一个节点复制到另一个节点通常是不够的：客户端不断向数据库写入数据，数据总是在不断变化，标准的数据副本会在不同的时间点总是不一样。复制的结果可能没有任何意义。</p><p>​ 可以通过锁定数据库（使其不可用于写入）来使磁盘上的文件保持一致，但是这会违背高可用的目标。幸运的是，拉起新的从库通常并不需要停机。从概念上讲，过程如下所示：</p><ol><li>在某个时刻获取主库的一致性快照（如果可能），而不必锁定整个数据库。大多数数据库都具有这个功能，因为它是备份必需的。对于某些场景，可能需要第三方工具，例如MySQL的innobackupex 【12】。</li><li>将快照复制到新的从库节点。</li><li>从库连接到主库，并拉取快照之后发生的所有数据变更。这要求快照与主库复制日志中的位置精确关联。该位置有不同的名称：例如，PostgreSQL将其称为 <strong>日志序列号（log sequence number, LSN）</strong>，MySQL将其称为 <strong>二进制日志坐标（binlog coordinates）</strong>。</li><li>当从库处理完快照之后积压的数据变更，我们说它 <strong>赶上（caught up）</strong> 了主库。现在它可以继续处理主库产生的数据变化了。</li></ol><p>建立从库的实际步骤因数据库而异。在某些系统中，这个过程是完全自动化的，而在另外一些系统中，它可能是一个需要由管理员手动执行的，有点神秘的多步骤工作流。</p><h3 id="处理节点宕机" tabindex="-1"><a class="header-anchor" href="#处理节点宕机" aria-hidden="true">#</a> 处理节点宕机</h3><p>​ 系统中的任何节点都可能宕机，可能因为意外的故障，也可能由于计划内的维护（例如，重启机器以安装内核安全补丁）。对运维而言，能在系统不中断服务的情况下重启单个节点好处多多。我们的目标是，即使个别节点失效，也能保持整个系统运行，并尽可能控制节点停机带来的影响。</p><p>​ 如何通过基于主库的复制实现高可用？</p><h4 id="从库失效-追赶恢复" tabindex="-1"><a class="header-anchor" href="#从库失效-追赶恢复" aria-hidden="true">#</a> 从库失效：追赶恢复</h4><p>​ 在其本地磁盘上，每个从库记录从主库收到的数据变更。如果从库崩溃并重新启动，或者，如果主库和从库之间的网络暂时中断，则比较容易恢复：从库可以从日志中知道，在发生故障之前处理的最后一个事务。因此，从库可以连接到主库，并请求在从库断开连接时发生的所有数据变更。当应用完所有这些变化后，它就赶上了主库，并可以像以前一样继续接收数据变更流。</p><h4 id="主库失效-故障切换" tabindex="-1"><a class="header-anchor" href="#主库失效-故障切换" aria-hidden="true">#</a> 主库失效：故障切换</h4><p>​ 主库失效处理起来相当棘手：其中一个从库需要被提升为新的主库，需要重新配置客户端，以将它们的写操作发送给新的主库，其他从库需要开始拉取来自新主库的数据变更。这个过程被称为<strong>故障切换（failover）</strong>。</p><p>​ 故障切换可以手动进行（通知管理员主库挂了，并采取必要的步骤来创建新的主库）或自动进行。自动故障切换过程通常由以下步骤组成：</p>',14),O=e("li",null,[a("确认主库失效。有很多事情可能会出错：崩溃，停电，网络问题等等。没有万无一失的方法来检测出现了什么问题，所以大多数系统只是简单使用 "),e("strong",null,"超时（Timeout）"),a(" ：节点频繁地相互来回传递消息，并且如果一个节点在一段时间内（例如30秒）没有响应，就认为它挂了（因为计划内维护而故意关闭主库不算）。")],-1),J=e("strong",null,"控制器节点（controller node）",-1),Q=e("strong",null,"共识",-1),G=e("p",null,"故障切换会出现很多大麻烦：",-1),N=e("li",null,[e("p",null,"如果使用异步复制，则新主库可能没有收到老主库宕机前最后的写入操作。在选出新主库后，如果老主库重新加入集群，新主库在此期间可能会收到冲突的写入，那这些写入该如何处理？最常见的解决方案是简单丢弃老主库未复制的写入，这很可能打破客户对于数据持久性的期望。")],-1),H=e("li",null,[e("p",null,"如果数据库需要和其他外部存储相协调，那么丢弃写入内容是极其危险的操作。例如在GitHub 【13】的一场事故中，一个过时的MySQL从库被提升为主库。数据库使用自增ID作为主键，因为新主库的计数器落后于老主库的计数器，所以新主库重新分配了一些已经被老主库分配掉的ID作为主键。这些主键也在Redis中使用，主键重用使得MySQL和Redis中数据产生不一致，最后导致一些私有数据泄漏到错误的用户手中。")],-1),V=e("strong",null,"脑裂(split brain)",-1),q=e("a",{href:"#%E5%A4%9A%E4%B8%BB%E5%A4%8D%E5%88%B6"},"多主复制",-1),z=e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote2"},"[2]"),e("a",{class:"footnote-anchor",id:"footnote-ref2"})],-1),K=e("li",null,[e("p",null,"主库被宣告死亡之前的正确超时应该怎么配置？在主库失效的情况下，超时时间越长，意味着恢复时间也越长。但是如果超时设置太短，又可能会出现不必要的故障切换。例如，临时负载峰值可能导致节点的响应时间超时，或网络故障可能导致数据包延迟。如果系统已经处于高负载或网络问题的困扰之中，那么不必要的故障切换可能会让情况变得更糟糕。")],-1),j=e("p",null,"这些问题没有简单的解决方案。因此，即使软件支持自动故障切换，不少运维团队还是更愿意手动执行故障切换。",-1),U=r('<h3 id="复制日志的实现" tabindex="-1"><a class="header-anchor" href="#复制日志的实现" aria-hidden="true">#</a> 复制日志的实现</h3><p>基于主库的复制底层是如何工作的？实践中有好几种不同的复制方式，所以先简要地看一下。</p><h4 id="基于语句的复制" tabindex="-1"><a class="header-anchor" href="#基于语句的复制" aria-hidden="true">#</a> 基于语句的复制</h4><p>​ 在最简单的情况下，主库记录下它执行的每个写入请求（<strong>语句（statement）</strong>）并将该语句日志发送给其从库。对于关系数据库来说，这意味着每个<code>INSERT</code>，<code>UPDATE</code>或<code>DELETE</code>语句都被转发给每个从库，每个从库解析并执行该SQL语句，就像从客户端收到一样。</p><p>虽然听上去很合理，但有很多问题会搞砸这种复制方式：</p><ul><li>任何调用 <strong>非确定性函数（nondeterministic）</strong> 的语句，可能会在每个副本上生成不同的值。例如，使用<code>NOW()</code>获取当前日期时间，或使用<code>RAND()</code>获取一个随机数。</li><li>如果语句使用了<strong>自增列（auto increment）</strong>，或者依赖于数据库中的现有数据（例如，<code>UPDATE ... WHERE &lt;某些条件&gt;</code>），则必须在每个副本上按照完全相同的顺序执行它们，否则可能会产生不同的效果。当有多个并发执行的事务时，这可能成为一个限制。</li><li>有副作用的语句（例如，触发器，存储过程，用户定义的函数）可能会在每个副本上产生不同的副作用，除非副作用是绝对确定的。</li></ul><p>的确有办法绕开这些问题 ——例如，当语句被记录时，主库可以用固定的返回值替换任何不确定的函数调用，以便从库获得相同的值。但是由于边缘情况实在太多了，现在通常会选择其他的复制方法。</p><p>​ 基于语句的复制在5.1版本前的MySQL中使用。因为它相当紧凑，现在有时候也还在用。但现在在默认情况下，如果语句中存在任何不确定性，MySQL会切换到基于行的复制（稍后讨论）。 VoltDB使用了基于语句的复制，但要求事务必须是确定性的，以此来保证安全【15】。</p><h4 id="传输预写式日志-wal" tabindex="-1"><a class="header-anchor" href="#传输预写式日志-wal" aria-hidden="true">#</a> 传输预写式日志（WAL）</h4>',9),X=e("strong",null,"预写式日志（Write Ahead Log, WAL）",-1),Y=r('<p>在任何一种情况下，日志都是包含所有数据库写入的仅追加字节序列。可以使用完全相同的日志在另一个节点上构建副本：除了将日志写入磁盘之外，主库还可以通过网络将其发送给其从库。</p><p>​ 当从库应用这个日志时，它会建立和主库一模一样数据结构的副本。</p><p>​ PostgreSQL和Oracle等使用这种复制方法【16】。主要缺点是日志记录的数据非常底层：WAL包含哪些磁盘块中的哪些字节发生了更改。这使复制与存储引擎紧密耦合。如果数据库将其存储格式从一个版本更改为另一个版本，通常不可能在主库和从库上运行不同版本的数据库软件。</p><p>​ 看上去这可能只是一个微小的实现细节，但却可能对运维产生巨大的影响。如果复制协议允许从库使用比主库更新的软件版本，则可以先升级从库，然后执行故障切换，使升级后的节点之一成为新的主库，从而执行数据库软件的零停机升级。如果复制协议不允许版本不匹配（传输WAL经常出现这种情况），则此类升级需要停机。</p><h4 id="逻辑日志复制-基于行" tabindex="-1"><a class="header-anchor" href="#逻辑日志复制-基于行" aria-hidden="true">#</a> 逻辑日志复制（基于行）</h4><p>​ 另一种方法是，复制和存储引擎使用不同的日志格式，这样可以使复制日志从存储引擎内部分离出来。这种复制日志被称为逻辑日志，以将其与存储引擎的（物理）数据表示区分开来。</p><p>关系数据库的逻辑日志通常是以行的粒度描述对数据库表的写入的记录序列：</p><ul><li>对于插入的行，日志包含所有列的新值。</li><li>对于删除的行，日志包含足够的信息来唯一标识已删除的行。通常是主键，但是如果表上没有主键，则需要记录所有列的旧值。</li><li>对于更新的行，日志包含足够的信息来唯一标识更新的行，以及所有列的新值（或至少所有已更改的列的新值）。</li></ul><p>修改多行的事务会生成多个这样的日志记录，后面跟着一条记录，指出事务已经提交。 MySQL的二进制日志（当配置为使用基于行的复制时）使用这种方法【17】。</p><p>​ 由于逻辑日志与存储引擎内部分离，因此可以更容易地保持向后兼容，从而使领导者和跟随者能够运行不同版本的数据库软件甚至不同的存储引擎。</p>',10),Z=e("strong",null,"数据变更捕获（change data capture）",-1),$=r('<h4 id="基于触发器的复制" tabindex="-1"><a class="header-anchor" href="#基于触发器的复制" aria-hidden="true">#</a> 基于触发器的复制</h4><p>​ 到目前为止描述的复制方法是由数据库系统实现的，不涉及任何应用程序代码。在很多情况下，这就是你想要的。但在某些情况下需要更多的灵活性。例如，如果您只想复制数据的一个子集，或者想从一种数据库复制到另一种数据库，或者如果您需要冲突解决逻辑（请参阅“<a href="#%E5%A4%84%E7%90%86%E5%86%99%E5%85%A5%E5%86%B2%E7%AA%81">处理写入冲突</a>”），则可能需要将复制移动到应用程序层。</p><p>​ 一些工具，如Oracle Golden Gate 【19】，可以通过读取数据库日志，使得其他应用程序可以使用数据。另一种方法是使用许多关系数据库自带的功能：触发器和存储过程。</p><p>​ 触发器允许您注册在数据库系统中发生数据更改（写入事务）时自动执行的自定义应用程序代码。触发器有机会将更改记录到一个单独的表中，使用外部程序读取这个表，再加上任何业务逻辑处理，会后将数据变更复制到另一个系统去。例如，Databus for Oracle 【20】和Bucardo for Postgres 【21】就是这样工作的。</p><p>​ 基于触发器的复制通常比其他复制方法具有更高的开销，并且比数据库的内置复制更容易出错，也有很多限制。然而由于其灵活性，仍然是很有用的。</p><h2 id="复制延迟问题" tabindex="-1"><a class="header-anchor" href="#复制延迟问题" aria-hidden="true">#</a> 复制延迟问题</h2>',6),ee=r('<p>​ 基于主库的复制要求所有写入都由单个节点处理，但只读查询可以由任何副本处理。所以对于读多写少的场景（Web上的常见模式），一个有吸引力的选择是创建很多从库，并将读请求分散到所有的从库上去。这样能减小主库的负载，并允许向最近的副本发送读请求。</p><p>​ 在这种伸缩体系结构中，只需添加更多的追随者，就可以提高只读请求的服务容量。但是，这种方法实际上只适用于异步复制——如果尝试同步复制到所有追随者，则单个节点故障或网络中断将使整个系统无法写入。而且越多的节点越有可能会被关闭，所以完全同步的配置是非常不可靠的。</p><p>​ 不幸的是，当应用程序从异步从库读取时，如果从库落后，它可能会看到过时的信息。这会导致数据库中出现明显的不一致：同时对主库和从库执行相同的查询，可能得到不同的结果，因为并非所有的写入都反映在从库中。这种不一致只是一个暂时的状态——如果停止写入数据库并等待一段时间，从库最终会赶上并与主库保持一致。出于这个原因，这种效应被称为 <strong>最终一致性（eventual consistency）</strong><sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>【22,23】</p><p>​ “最终”一词故意含糊不清：总的来说，副本落后的程度是没有限制的。在正常的操作中，<strong>复制延迟（replication lag）</strong>，即写入主库到反映至从库之间的延迟，可能仅仅是几分之一秒，在实践中并不显眼。但如果系统在接近极限的情况下运行，或网络中存在问题，延迟可以轻而易举地超过几秒，甚至几分钟。</p><p>​ 因为滞后时间太长引入的不一致性，可不仅是一个理论问题，更是应用设计中会遇到的真实问题。本节将重点介绍三个由复制延迟问题的例子，并简述解决这些问题的一些方法。</p><h3 id="读己之写" tabindex="-1"><a class="header-anchor" href="#读己之写" aria-hidden="true">#</a> 读己之写</h3><p>​ 许多应用让用户提交一些数据，然后查看他们提交的内容。可能是用户数据库中的记录，也可能是对讨论主题的评论，或其他类似的内容。提交新数据时，必须将其发送给领导者，但是当用户查看数据时，可以从追随者读取。如果数据经常被查看，但只是偶尔写入，这是非常合适的。</p><p>​ 但对于异步复制，问题就来了。如<a href="fig5-3.png">图5-3</a>所示：如果用户在写入后马上就查看数据，则新数据可能尚未到达副本。对用户而言，看起来好像是刚提交的数据丢失了，用户会不高兴，可以理解。</p><figure><img src="'+g+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-3 用户写入后从旧副本中读取数据。需要写后读(read-after-write)的一致性来防止这种异常</strong></p><p>​ 在这种情况下，我们需要 <strong>读写一致性（read-after-write consistency）</strong>，也称为 <strong>读己之写一致性（read-your-writes consistency）</strong>【24】。这是一个保证，如果用户重新加载页面，他们总会看到他们自己提交的任何更新。它不会对其他用户的写入做出承诺：其他用户的更新可能稍等才会看到。它保证用户自己的输入已被正确保存。</p><p>如何在基于领导者的复制系统中实现读后一致性？有各种可能的技术，这里说一些：</p>',12),ae=e("li",null,[e("p",null,[a("读用户"),e("strong",null,"可能已经修改过"),a("的内容时，都从主库读；这就要求有一些方法，不用实际查询就可以知道用户是否修改了某些东西。举个例子，社交网络上的用户个人资料信息通常只能由用户本人编辑，而不能由其他人编辑。因此一个简单的规则是：从主库读取用户自己的档案，在从库读取其他用户的档案。")])],-1),se=e("li",null,[e("p",null,"如果应用中的大部分内容都可能被用户编辑，那这种方法就没用了，因为大部分内容都必须从主库读取（扩容读就没效果了）。在这种情况下可以使用其他标准来决定是否从主库读取。例如可以跟踪上次更新的时间，在上次更新后的一分钟内，从主库读。还可以监控从库的复制延迟，防止对任意比主库滞后超过一分钟的从库发出查询。")],-1),te=e("p",null,"客户端可以记住最近一次写入的时间戳，系统需要确保从库为该用户提供任何查询时，该时间戳前的变更都已经传播到了本从库中。如果当前从库不够新，则可以从另一个从库读，或者等待从库追赶上来。",-1),ne=e("li",null,[e("p",null,"如果您的副本分布在多个数据中心（出于可用性目的与用户尽量在地理上接近），则会增加复杂性。任何需要由领导者提供服务的请求都必须路由到包含主库的数据中心。")],-1),le=r('<p>另一种复杂的情况是：如果同一个用户从多个设备请求服务，例如桌面浏览器和移动APP。这种情况下可能就需要提供跨设备的写后读一致性：如果用户在某个设备上输入了一些信息，然后在另一个设备上查看，则应该看到他们刚输入的信息。</p><p>在这种情况下，还有一些需要考虑的问题：</p><ul><li>记住用户上次更新时间戳的方法变得更加困难，因为一台设备上运行的程序不知道另一台设备上发生了什么。元数据需要一个中心存储。</li><li>如果副本分布在不同的数据中心，很难保证来自不同设备的连接会路由到同一数据中心。 （例如，用户的台式计算机使用家庭宽带连接，而移动设备使用蜂窝数据网络，则设备的网络路线可能完全不同）。如果你的方法需要读主库，可能首先需要把来自同一用户的请求路由到同一个数据中心。</li></ul><h3 id="单调读" tabindex="-1"><a class="header-anchor" href="#单调读" aria-hidden="true">#</a> 单调读</h3><p>​ 从异步从库读取第二个异常例子是，用户可能会遇到 <strong>时光倒流（moving backward in time）</strong>。</p><p>​ 如果用户从不同从库进行多次读取，就可能发生这种情况。例如，<a href="./img/fig5-4.png">图5-4</a>显示了用户2345两次进行相同的查询，首先查询了一个延迟很小的从库，然后是一个延迟较大的从库。 （如果用户刷新网页，而每个请求被路由到一个随机的服务器，这种情况是很有可能的。）第一个查询返回最近由用户1234添加的评论，但是第二个查询不返回任何东西，因为滞后的从库还没有拉取写入内容。在效果上相比第一个查询，第二个查询是在更早的时间点来观察系统。如果第一个查询没有返回任何内容，那问题并不大，因为用户2345可能不知道用户1234最近添加了评论。但如果用户2345先看见用户1234的评论，然后又看到它消失，那么对于用户2345，就很让人头大了。</p><figure><img src="'+u+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-4 用户首先从新副本读取，然后从旧副本读取。时光倒流。为了防止这种异常，我们需要单调的读取。</strong></p><p>​ <strong>单调读（Monotonic reads）</strong>【23】保证这种异常不会发生。这是一个比 <strong>强一致性（strong consistency）</strong> 更弱，但比 <strong>最终一致性（eventual consistency）</strong> 更强的保证。当读取数据时，您可能会看到一个旧值；单调读取仅意味着如果一个用户顺序地进行多次读取，则他们不会看到时间后退，即，如果先前读取到较新的数据，后续读取不会得到更旧的数据。</p><p>​ 实现单调读取的一种方式是确保每个用户总是从同一个副本进行读取（不同的用户可以从不同的副本读取）。例如，可以基于用户ID的散列来选择副本，而不是随机选择副本。但是，如果该副本失败，用户的查询将需要重新路由到另一个副本。</p><h3 id="一致前缀读" tabindex="-1"><a class="header-anchor" href="#一致前缀读" aria-hidden="true">#</a> 一致前缀读</h3><p>第三个复制延迟例子违反了因果律。 想象一下Poons先生和Cake夫人之间的以下简短对话：</p><blockquote><p><em>Mr. Poons</em> ​ Mrs. Cake，你能看到多远的未来？</p><p><em>Mrs. Cake</em> ​ 通常约十秒钟，Mr. Poons.</p></blockquote><p>这两句话之间有因果关系：Cake夫人听到了Poons先生的问题并回答了这个问题。</p><p>​ 现在，想象第三个人正在通过从库来听这个对话。 Cake夫人说的内容是从一个延迟很低的从库读取的，但Poons先生所说的内容，从库的延迟要大的多（见<a href="./img/fig5-5.png">图5-5</a>）。 于是，这个观察者会听到以下内容：</p><blockquote><p><em>Mrs. Cake</em> ​ 通常约十秒钟，Mr. Poons.</p><p><em>Mr. Poons</em> ​ Mrs. Cake，你能看到多远的未来？</p></blockquote><p>对于观察者来说，看起来好像Cake夫人在Poons先生发问前就回答了这个问题。 这种超能力让人印象深刻，但也会把人搞糊涂。【25】。</p><figure><img src="'+f+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-5 如果某些分区的复制速度慢于其他分区，那么观察者在看到问题之前可能会看到答案。</strong></p><p>​ 防止这种异常，需要另一种类型的保证：<strong>一致前缀读（consistent prefix reads）</strong>【23】。 这个保证说：如果一系列写入按某个顺序发生，那么任何人读取这些写入时，也会看见它们以同样的顺序出现。</p>',20),re=e("strong",null,"分区（partitioned）",-1),oe=e("strong",null,"分片（sharded）",-1),ie=e("strong",null,"全局写入顺序",-1),pe=r('<p>​ 一种解决方案是，确保任何因果相关的写入都写入相同的分区。对于某些无法高效完成这种操作的应用，还有一些显式跟踪因果依赖关系的算法，本书将在“<a href="#%E2%80%9C%E6%AD%A4%E5%89%8D%E5%8F%91%E7%94%9F%E2%80%9D%E7%9A%84%E5%85%B3%E7%B3%BB%E5%92%8C%E5%B9%B6%E5%8F%91">“此前发生”的关系和并发</a>”一节中返回这个主题。</p><h3 id="复制延迟的解决方案" tabindex="-1"><a class="header-anchor" href="#复制延迟的解决方案" aria-hidden="true">#</a> 复制延迟的解决方案</h3><p>​ 在使用最终一致的系统时，如果复制延迟增加到几分钟甚至几小时，则应该考虑应用程序的行为。如果答案是“没问题”，那很好。但如果结果对于用户来说是不好体验，那么设计系统来提供更强的保证是很重要的，例如<strong>写后读</strong>。明明是异步复制却假设复制是同步的，这是很多麻烦的根源。</p><p>​ 如前所述，应用程序可以提供比底层数据库更强有力的保证，例如通过主库进行某种读取。但在应用程序代码中处理这些问题是复杂的，容易出错。</p><p>​ 如果应用程序开发人员不必担心微妙的复制问题，并可以信赖他们的数据库“做了正确的事情”，那该多好呀。这就是 <strong>事务（transaction）</strong> 存在的原因：<strong>数据库通过事务提供强大的保证</strong>，所以应用程序可以更加简单。</p><p>​ 单节点事务已经存在了很长时间。然而在走向分布式（复制和分区）数据库时，许多系统放弃了事务。声称事务在性能和可用性上的代价太高，并断言在可伸缩系统中最终一致性是不可避免的。这个叙述有一些道理，但过于简单了，本书其余部分将提出更为细致的观点。第七章和第九章将回到事务的话题，并讨论一些替代机制。</p><h2 id="多主复制" tabindex="-1"><a class="header-anchor" href="#多主复制" aria-hidden="true">#</a> 多主复制</h2><p>​ 本章到目前为止，我们只考虑使用单个领导者的复制架构。 虽然这是一种常见的方法，但也有一些有趣的选择。</p><p>​ 基于领导者的复制有一个主要的缺点：只有一个主库，而所有的写入都必须通过它<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>。如果出于任何原因（例如和主库之间的网络连接中断）无法连接到主库， 就无法向数据库写入。</p><p>​ 基于领导者的复制模型的自然延伸是允许多个节点接受写入。 复制仍然以同样的方式发生：处理写入的每个节点都必须将该数据更改转发给所有其他节点。 称之为<strong>多领导者配置</strong>（也称多主、多活复制）。 在这种情况下，每个领导者同时扮演其他领导者的追随者。</p><h3 id="多主复制的应用场景" tabindex="-1"><a class="header-anchor" href="#多主复制的应用场景" aria-hidden="true">#</a> 多主复制的应用场景</h3><p>​ 在单个数据中心内部使用多个主库没有太大意义，因为复杂性已经超过了能带来的好处。 但在一些情况下，多活配置是也合理的。</p><h4 id="运维多个数据中心" tabindex="-1"><a class="header-anchor" href="#运维多个数据中心" aria-hidden="true">#</a> 运维多个数据中心</h4><p>​ 假如你有一个数据库，副本分散在好几个不同的数据中心（也许这样可以容忍单个数据中心的故障，或地理上更接近用户）。 使用常规的基于领导者的复制设置，主库必须位于其中一个数据中心，且所有写入都必须经过该数据中心。</p><p>​ 多领导者配置中可以在每个数据中心都有主库。 <a href="./img/fig5-6.png">图5-6</a>展示了这个架构的样子。 在每个数据中心内使用常规的主从复制；在数据中心之间，每个数据中心的主库都会将其更改复制到其他数据中心的主库中。</p><figure><img src="'+_+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-6 跨多个数据中心的多主复制</strong></p><p>我们来比较一下在运维多个数据中心时，单主和多主的适应情况。</p><p><em><strong>性能</strong></em></p><p>​ 在单主配置中，每个写入都必须穿过互联网，进入主库所在的数据中心。这可能会增加写入时间，并可能违背了设置多个数据中心的初心。在多主配置中，每个写操作都可以在本地数据中心进行处理，并与其他数据中心异步复制。因此，数据中心之间的网络延迟对用户来说是透明的，这意味着感觉到的性能可能会更好。</p><p><em><strong>容忍数据中心停机</strong></em></p><p>​ 在单主配置中，如果主库所在的数据中心发生故障，故障切换必须使另一个数据中心里的追随者成为领导者。在多主配置中，每个数据中心可以独立于其他数据中心继续运行，并且当发生故障的数据中心归队时，复制会自动赶上。</p><p><em><strong>容忍网络问题</strong></em></p><p>​ 数据中心之间的通信通常穿过公共互联网，这可能不如数据中心内的本地网络可靠。单主配置对这数据中心间的连接问题非常敏感，因为通过这个连接进行的写操作是同步的。采用异步复制功能的多主配置通常能更好地承受网络问题：临时的网络中断并不会妨碍正在处理的写入。</p><p>​ 有些数据库默认情况下支持多主配置，但使用外部工具实现也很常见，例如用于MySQL的Tungsten Replicator 【26】，用于PostgreSQL的BDR【27】以及用于Oracle的GoldenGate 【19】。</p><p>​ 尽管多主复制有这些优势，但也有一个很大的缺点：两个不同的数据中心可能会同时修改相同的数据，写冲突是必须解决的（如<a href="./img/fig5-6.png">图5-6</a>中“冲突解决（conflict resolution）”）。本书将在“<a href="#%E5%A4%84%E7%90%86%E5%86%99%E5%85%A5%E5%86%B2%E7%AA%81">处理写入冲突</a>”中详细讨论这个问题。</p><p>​ 由于多主复制在许多数据库中都属于改装的功能，所以常常存在微妙的配置缺陷，且经常与其他数据库功能之间出现意外的反应。例如自增主键、触发器、完整性约束等，都可能会有麻烦。因此，多主复制往往被认为是危险的领域，应尽可能避免【28】。</p><h4 id="需要离线操作的客户端" tabindex="-1"><a class="header-anchor" href="#需要离线操作的客户端" aria-hidden="true">#</a> 需要离线操作的客户端</h4><p>​ 多主复制的另一种适用场景是：应用程序在断网之后仍然需要继续工作。</p><p>​ 例如，考虑手机，笔记本电脑和其他设备上的日历应用。无论设备目前是否有互联网连接，你需要能随时查看你的会议（发出读取请求），输入新的会议（发出写入请求）。如果在离线状态下进行任何更改，则设备下次上线时，需要与服务器和其他设备同步。</p><p>​ 在这种情况下，每个设备都有一个充当领导者的本地数据库（它接受写请求），并且在所有设备上的日历副本之间同步时，存在异步的多主复制过程。复制延迟可能是几小时甚至几天，具体取决于何时可以访问互联网。</p><p>​ 从架构的角度来看，这种设置实际上与数据中心之间的多领导者复制类似，每个设备都是一个“数据中心”，而它们之间的网络连接是极度不可靠的。从历史上各类日历同步功能的破烂实现可以看出，想把多活配好是多么困难的一件事。</p><p>​ 有一些工具旨在使这种多领导者配置更容易。例如，CouchDB就是为这种操作模式而设计的【29】。</p><h4 id="协同编辑" tabindex="-1"><a class="header-anchor" href="#协同编辑" aria-hidden="true">#</a> 协同编辑</h4><p>​ 实时协作编辑应用程序允许多个人同时编辑文档。例如，Etherpad 【30】和Google Docs 【31】允许多人同时编辑文本文档或电子表格（该算法在“<a href="#%E8%87%AA%E5%8A%A8%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3">自动冲突解决</a>”中简要讨论）。我们通常不会将协作式编辑视为数据库复制问题，但与前面提到的离线编辑用例有许多相似之处。当一个用户编辑文档时，所做的更改将立即应用到其本地副本（Web浏览器或客户端应用程序中的文档状态），并异步复制到服务器和编辑同一文档的任何其他用户。</p><p>​ 如果要保证不会发生编辑冲突，则应用程序必须先取得文档的锁定，然后用户才能对其进行编辑。如果另一个用户想要编辑同一个文档，他们首先必须等到第一个用户提交修改并释放锁定。这种协作模式相当于主从复制模型下在主节点上执行事务操作。</p><p>​ 但是，为了加速协作，您可能希望将更改的单位设置得非常小（例如，一个按键），并避免锁定。这种方法允许多个用户同时进行编辑，但同时也带来了多领导者复制的所有挑战，包括需要解决冲突【32】。</p><h3 id="处理写入冲突" tabindex="-1"><a class="header-anchor" href="#处理写入冲突" aria-hidden="true">#</a> 处理写入冲突</h3><p>​ 多领导者复制的最大问题是可能发生写冲突，这意味着需要解决冲突。</p><p>​ 例如，考虑一个由两个用户同时编辑的维基页面，如<a href="./img/fig5-7.png">图5-7</a>所示。用户1将页面的标题从A更改为B，并且用户2同时将标题从A更改为C。每个用户的更改已成功应用到其本地主库。但当异步复制时，会发现冲突【33】。单主数据库中不会出现此问题。</p><figure><img src="'+b+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-7 两个主库同时更新同一记录引起的写入冲突</strong></p><h4 id="同步与异步冲突检测" tabindex="-1"><a class="header-anchor" href="#同步与异步冲突检测" aria-hidden="true">#</a> 同步与异步冲突检测</h4><p>​ 在单主数据库中，第二个写入将被阻塞，并等待第一个写入完成，或中止第二个写入事务，强制用户重试。另一方面，在多主配置中，两个写入都是成功的，并且在稍后的时间点仅仅异步地检测到冲突。那时要求用户解决冲突可能为时已晚。</p><p>​ 原则上，可以使冲突检测同步 - 即等待写入被复制到所有副本，然后再告诉用户写入成功。但是，通过这样做，您将失去多主复制的主要优点：允许每个副本独立接受写入。如果您想要同步冲突检测，那么您可以使用单主程序复制。</p><h4 id="避免冲突" tabindex="-1"><a class="header-anchor" href="#避免冲突" aria-hidden="true">#</a> 避免冲突</h4><p>​ 处理冲突的最简单的策略就是避免它们：如果应用程序可以确保特定记录的所有写入都通过同一个领导者，那么冲突就不会发生。由于许多的多领导者复制实现在处理冲突时处理得相当不好，避免冲突是一个经常推荐的方法【34】。</p><p>​ 例如，在用户可以编辑自己的数据的应用程序中，可以确保来自特定用户的请求始终路由到同一数据中心，并使用该数据中心的领导者进行读写。不同的用户可能有不同的“家庭”数据中心（可能根据用户的地理位置选择），但从任何用户的角度来看，配置基本上都是单一的领导者。</p><p>​ 但是，有时您可能需要更改指定的记录的主库——可能是因为一个数据中心出现故障，您需要将流量重新路由到另一个数据中心，或者可能是因为用户已经迁移到另一个位置，现在更接近不同的数据中心。在这种情况下，冲突避免会中断，你必须处理不同主库同时写入的可能性。</p><h4 id="收敛至一致的状态" tabindex="-1"><a class="header-anchor" href="#收敛至一致的状态" aria-hidden="true">#</a> 收敛至一致的状态</h4><p>​ 单主数据库按顺序进行写操作：如果同一个字段有多个更新，则最后一个写操作将决定该字段的最终值。</p><p>​ 在多主配置中，没有明确的写入顺序，所以最终值应该是什么并不清楚。在<a href="./img/fig5-7.png">图5-7</a>中，在主库1中标题首先更新为B而后更新为C；在主库2中，首先更新为C，然后更新为B。两个顺序都不是“更正确”的。</p><p>​ 如果每个副本只是按照它看到写入的顺序写入，那么数据库最终将处于不一致的状态：最终值将是在主库1的C和主库2的B。这是不可接受的，每个复制方案都必须确保数据在所有副本中最终都是相同的。因此，数据库必须以一种 <strong>收敛（convergent）</strong> 的方式解决冲突，这意味着所有副本必须在所有变更复制完成时收敛至一个相同的最终值。</p><p>实现冲突合并解决有多种途径：</p><ul><li>给每个写入一个唯一的ID（例如，一个时间戳，一个长的随机数，一个UUID或者一个键和值的哈希），挑选最高ID的写入作为胜利者，并丢弃其他写入。如果使用时间戳，这种技术被称为<strong>最后写入胜利（LWW, last write wins）</strong>。虽然这种方法很流行，但是很容易造成数据丢失【35】。我们将在本章末尾的<a href="#%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99%E5%85%A5">检测并发写入</a>更详细地讨论LWW。</li><li>为每个副本分配一个唯一的ID，ID编号更高的写入具有更高的优先级。这种方法也意味着数据丢失。</li><li>以某种方式将这些值合并在一起 - 例如，按字母顺序排序，然后连接它们（在<a href="./img/fig5-7.png">图5-7</a>中，合并的标题可能类似于“B/C”）。</li><li>用一种可保留所有信息的显式数据结构来记录冲突，并编写解决冲突的应用程序代码（也许通过提示用户的方式）。</li></ul><h4 id="自定义冲突解决逻辑" tabindex="-1"><a class="header-anchor" href="#自定义冲突解决逻辑" aria-hidden="true">#</a> 自定义冲突解决逻辑</h4><p>​ 作为解决冲突最合适的方法可能取决于应用程序，大多数多主复制工具允许使用应用程序代码编写冲突解决逻辑。该代码可以在写入或读取时执行：</p><p><em><strong>写时执行</strong></em></p><p>​ 只要数据库系统检测到复制更改日志中存在冲突，就会调用冲突处理程序。例如，Bucardo允许您为此编写一段Perl代码。这个处理程序通常不能提示用户——它在后台进程中运行，并且必须快速执行。</p><p><em><strong>读时执行</strong></em></p><p>​ 当检测到冲突时，所有冲突写入被存储。下一次读取数据时，会将这些多个版本的数据返回给应用程序。应用程序可能会提示用户或自动解决冲突，并将结果写回数据库。例如，CouchDB以这种方式工作。</p><p>​ 请注意，冲突解决通常适用于单个行或文档层面，而不是整个事务【36】。因此，如果您有一个事务会原子性地进行几次不同的写入（请参阅[第七章](ch7.md），对于冲突解决而言，每个写入仍需分开单独考虑。</p><blockquote><h4 id="自动冲突解决" tabindex="-1"><a class="header-anchor" href="#自动冲突解决" aria-hidden="true">#</a> 自动冲突解决</h4><p>​ 冲突解决规则可能很快变得复杂，并且自定义代码可能容易出错。亚马逊是一个经常被引用的例子，由于冲突解决处理程序令人意外的效果：一段时间以来，购物车上的冲突解决逻辑将保留添加到购物车的物品，但不包括从购物车中移除的物品。因此，顾客有时会看到物品重新出现在他们的购物车中，即使他们之前已经被移走【37】。</p><p>已经有一些有趣的研究来自动解决由于数据修改引起的冲突。有几行研究值得一提：</p><ul><li><strong>无冲突复制数据类型（Conflict-free replicated datatypes）</strong>（CRDT）【32,38】是可以由多个用户同时编辑的集合，映射，有序列表，计数器等的一系列数据结构，它们以合理的方式自动解决冲突。一些CRDT已经在Riak 2.0中实现【39,40】。</li><li><strong>可合并的持久数据结构（Mergeable persistent data structures）</strong>【41】显式跟踪历史记录，类似于Git版本控制系统，并使用三向合并功能（而CRDT使用双向合并）。</li><li><strong>可执行的转换（operational transformation）</strong>[42]是Etherpad 【30】和Google Docs 【31】等合作编辑应用背后的冲突解决算法。它是专为同时编辑项目的有序列表而设计的，例如构成文本文档的字符列表。</li></ul><p>这些算法在数据库中的实现还很年轻，但很可能将来它们将被集成到更多的复制数据系统中。自动冲突解决方案可以使应用程序处理多领导者数据同步更为简单。</p></blockquote><h4 id="什么是冲突" tabindex="-1"><a class="header-anchor" href="#什么是冲突" aria-hidden="true">#</a> 什么是冲突？</h4><p>​ 有些冲突是显而易见的。在<a href="./img/fig5-7.png">图5-7</a>的例子中，两个写操作并发地修改了同一条记录中的同一个字段，并将其设置为两个不同的值。毫无疑问这是一个冲突。</p><p>​ 其他类型的冲突可能更为微妙，难以发现。例如，考虑一个会议室预订系统：它记录谁订了哪个时间段的哪个房间。应用需要确保每个房间只有一组人同时预定（即不得有相同房间的重叠预订）。在这种情况下，如果同时为同一个房间创建两个不同的预订，则可能会发生冲突。即使应用程序在允许用户进行预订之前检查可用性，如果两次预订是由两个不同的领导者进行的，则可能会有冲突。</p>',66),ce=r('<h3 id="多主复制拓扑" tabindex="-1"><a class="header-anchor" href="#多主复制拓扑" aria-hidden="true">#</a> 多主复制拓扑</h3><p>​ <strong>复制拓扑</strong>（replication topology）描述写入从一个节点传播到另一个节点的通信路径。如果你有两个领导者，如<a href="./img/fig5-7.png">图5-7</a>所示，只有一个合理的拓扑结构：领导者1必须把他所有的写到领导者2，反之亦然。当有两个以上的领导，各种不同的拓扑是可能的。<a href="./img/fig5-8.png">图5-8</a>举例说明了一些例子。</p><figure><img src="'+y+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-8 三个可以设置多领导者复制的示例拓扑。</strong></p><p>​ 最普遍的拓扑是全部到全部（<a href="./img/fig5-8.png">图5-8 (c)</a>），其中每个领导者将其写入每个其他领导。但是，也会使用更多受限制的拓扑：例如，默认情况下，MySQL仅支持<strong>环形拓扑（circular topology）</strong>【34】，其中每个节点接收来自一个节点的写入，并将这些写入（加上自己的任何写入）转发给另一个节点。另一种流行的拓扑结构具有星形的形状<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup>。一个指定的根节点将写入转发给所有其他节点。星形拓扑可以推广到树。</p><p>​ 在环形和星形拓扑中，写入可能需要在到达所有副本之前通过多个节点。因此，节点需要转发从其他节点收到的数据更改。为了防止无限复制循环，每个节点被赋予一个唯一的标识符，并且在复制日志中，每个写入都被标记了所有已经过的节点的标识符【43】。当一个节点收到用自己的标识符标记的数据更改时，该数据更改将被忽略，因为节点知道它已经被处理过。</p><p>​ 环形和星形拓扑的问题是，如果只有一个节点发生故障，则可能会中断其他节点之间的复制消息流，导致它们无法通信，直到节点修复。拓扑结构可以重新配置为在发生故障的节点上工作，但在大多数部署中，这种重新配置必须手动完成。更密集连接的拓扑结构（例如全部到全部）的容错性更好，因为它允许消息沿着不同的路径传播，避免单点故障。</p><p>​ 另一方面，全部到全部的拓扑也可能有问题。特别是，一些网络链接可能比其他网络链接更快（例如，由于网络拥塞），结果是一些复制消息可能“超过”其他复制消息，如<a href="./img/fig5-9.png">图5-9</a>所示。</p><figure><img src="'+w+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-9 使用多主程序复制时，可能会在某些副本中写入错误的顺序。</strong></p><p>​ 在<a href="./img/fig5-9.png">图5-9</a>中，客户端A向主库1的表中插入一行，客户端B在主库3上更新该行。然而，主库2可以以不同的顺序接收写入：它可以首先接收更新（从它的角度来看，是对数据库中不存在的行的更新），并且仅在稍后接收到相应的插入（其应该在更新之前）。</p>',11),he=e("a",{href:"#%E4%B8%80%E8%87%B4%E5%89%8D%E7%BC%80%E8%AF%BB"},"一致前缀读",-1),me=r('<p>​ 要正确排序这些事件，可以使用一种称为 <strong>版本向量（version vectors）</strong> 的技术，本章稍后将讨论这种技术（请参阅“<a href="#%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99%E5%85%A5">检测并发写入</a>”）。然而，冲突检测技术在许多多领导者复制系统中执行得不好。例如，在撰写本文时，PostgreSQL BDR不提供写入的因果排序【27】，而Tungsten Replicator for MySQL甚至不尝试检测冲突【34】。</p><p>​ 如果您正在使用具有多领导者复制功能的系统，那么应该了解这些问题，仔细阅读文档，并彻底测试您的数据库，以确保它确实提供了您认为具有的保证。</p><h2 id="无主复制" tabindex="-1"><a class="header-anchor" href="#无主复制" aria-hidden="true">#</a> 无主复制</h2><p>​ 我们在本章到目前为止所讨论的复制方法 ——单主复制、多主复制——都是这样的想法：客户端向一个主库发送写请求，而数据库系统负责将写入复制到其他副本。主库决定写入的顺序，而从库按相同顺序应用主库的写入。</p><p>​ 一些数据存储系统采用不同的方法，放弃主库的概念，并允许任何副本直接接受来自客户端的写入。最早的一些的复制数据系统是<strong>无领导的（leaderless）</strong>【1,44】，但是在关系数据库主导的时代，这个想法几乎已被忘却。在亚马逊将其用于其内部的Dynamo系统<sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup>之后，它再一次成为数据库的一种时尚架构【37】。 Riak，Cassandra和Voldemort是由Dynamo启发的无领导复制模型的开源数据存储，所以这类数据库也被称为<em>Dynamo风格</em>。</p><p>​ 在一些无领导者的实现中，客户端直接将写入发送到几个副本中，而另一些情况下，一个 <strong>协调者（coordinator）</strong> 节点代表客户端进行写入。但与主库数据库不同，协调者不执行特定的写入顺序。我们将会看到，这种设计上的差异对数据库的使用方式有着深远的影响。</p><h3 id="当节点故障时写入数据库" tabindex="-1"><a class="header-anchor" href="#当节点故障时写入数据库" aria-hidden="true">#</a> 当节点故障时写入数据库</h3><p>​ 假设你有一个带有三个副本的数据库，而其中一个副本目前不可用，或许正在重新启动以安装系统更新。在基于主机的配置中，如果要继续处理写入，则可能需要执行故障切换（请参阅「<a href="#%E5%A4%84%E7%90%86%E8%8A%82%E7%82%B9%E5%AE%95%E6%9C%BA">处理节点宕机</a>」）。</p><p>​ 另一方面，在无领导配置中，故障切换不存在。<a href="./img/fig5-10.png">图5-10</a>显示了发生了什么事情：客户端（用户1234）并行发送写入到所有三个副本，并且两个可用副本接受写入，但是不可用副本错过了它。假设三个副本中的两个承认写入是足够的：在用户1234已经收到两个确定的响应之后，我们认为写入成功。客户简单地忽略了其中一个副本错过了写入的事实。</p><figure><img src="'+k+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-10 法定写入，法定读取，并在节点中断后读修复。</strong></p><p>​ 现在想象一下，不可用的节点重新联机，客户端开始读取它。节点关闭时发生的任何写入都从该节点丢失。因此，如果您从该节点读取数据，则可能会将陈旧（过时）值视为响应。</p><p>​ 为了解决这个问题，当一个客户端从数据库中读取数据时，它不仅仅发送它的请求到一个副本：读请求也被并行地发送到多个节点。客户可能会从不同的节点获得不同的响应。即来自一个节点的最新值和来自另一个节点的陈旧值。版本号用于确定哪个值更新（请参阅“<a href="#%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99%E5%85%A5">检测并发写入</a>”）。</p><h4 id="读修复和反熵" tabindex="-1"><a class="header-anchor" href="#读修复和反熵" aria-hidden="true">#</a> 读修复和反熵</h4><p>​ 复制方案应确保最终将所有数据复制到每个副本。在一个不可用的节点重新联机之后，它如何赶上它错过的写入？</p><p>​ 在Dynamo风格的数据存储中经常使用两种机制：</p><p><em><strong>读修复（Read repair）</strong></em></p><p>​ 当客户端并行读取多个节点时，它可以检测到任何陈旧的响应。例如，在<a href="./img/fig5-10.png">图5-10</a>中，用户2345获得了来自副本3的版本6值和来自副本1和2的版本7值。客户端发现副本3具有陈旧值，并将新值写回到该副本。这种方法适用于读频繁的值。</p><p><em><strong>反熵过程（Anti-entropy process）</strong></em></p><p>​ 此外，一些数据存储具有后台进程，该进程不断查找副本之间的数据差异，并将任何缺少的数据从一个副本复制到另一个副本。与基于领导者的复制中的复制日志不同，此反熵过程不会以任何特定的顺序复制写入，并且在复制数据之前可能会有显著的延迟。</p><p>​ 并不是所有的系统都实现了这两个，例如，Voldemort目前没有反熵过程。请注意，如果没有反熵过程，某些副本中很少读取的值可能会丢失，从而降低了持久性，因为只有在应用程序读取值时才执行读修复。</p><h4 id="读写的法定人数" tabindex="-1"><a class="header-anchor" href="#读写的法定人数" aria-hidden="true">#</a> 读写的法定人数</h4><p>​ 在<a href="./img/fig5-10.png">图5-10</a>的示例中，我们认为即使仅在三个副本中的两个上进行处理，写入仍然是成功的。如果三个副本中只有一个接受了写入，会怎样？以此类推，究竟多少个副本完成才可以认为写成功？</p><p>​ 如果我们知道，每个成功的写操作意味着在三个副本中至少有两个出现，这意味着至多有一个副本可能是陈旧的。因此，如果我们从至少两个副本读取，我们可以确定至少有一个是最新的。如果第三个副本停机或响应速度缓慢，则读取仍可以继续返回最新值。</p>',24),de=e("p",null,[a("​ 更一般地说，如果有n个副本，每个写入必须由w节点确认才能被认为是成功的，并且我们必须至少为每个读取查询r个节点。 （在我们的例子中，"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"n"),e("mo",null,"="),e("mn",null,"3"),e("mo",{separator:"true"},","),e("mi",null,"w"),e("mo",null,"="),e("mn",null,"2"),e("mo",{separator:"true"},","),e("mi",null,"r"),e("mo",null,"="),e("mn",null,"2")]),e("annotation",{encoding:"application/x-tex"},"n = 3, w = 2, r = 2")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"2"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"2")])])]),a("）。只要"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"+"),e("mi",null,"r"),e("mo",null,">"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w + r> n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},">"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("，我们期望在读取时获得最新的值，因为r个读取中至少有一个节点是最新的。遵循这些r值，w值的读写称为"),e("strong",null,"法定人数（quorum）"),e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote7"},"[7]"),e("a",{class:"footnote-anchor",id:"footnote-ref7"})]),a("的读和写【44】。你可以认为，r和w是有效读写所需的最低票数。")],-1),ge=e("p",null,[a("​ 在Dynamo风格的数据库中，参数n，w和r通常是可配置的。一个常见的选择是使n为奇数（通常为3或5）并设置 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"="),e("mi",null,"r"),e("mo",null,"="),e("mo",{stretchy:"false"},"("),e("mi",null,"n"),e("mo",null,"+"),e("mn",null,"1"),e("mo",{stretchy:"false"},")"),e("mi",{mathvariant:"normal"},"/"),e("mn",null,"2")]),e("annotation",{encoding:"application/x-tex"},"w = r = (n + 1) / 2")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mopen"},"("),e("span",{class:"mord mathnormal"},"n"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord"},"1"),e("span",{class:"mclose"},")"),e("span",{class:"mord"},"/2")])])]),a("（向上取整）。但是可以根据需要更改数字。例如，设置"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"="),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w = n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("和"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"r"),e("mo",null,"="),e("mn",null,"1")]),e("annotation",{encoding:"application/x-tex"},"r = 1")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"1")])])]),a("的写入很少且读取次数较多的工作负载可能会受益。这使得读取速度更快，但具有只有一个失败节点导致所有数据库写入失败的缺点。")],-1),ue=e("p",null,[a("法定人数条件"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"+"),e("mi",null,"r"),e("mo",null,">"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w + r > n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},">"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("允许系统容忍不可用的节点，如下所示：")],-1),fe=e("ul",null,[e("li",null,[a("如果"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"<"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w <n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"<"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("，如果节点不可用，我们仍然可以处理写入。")]),e("li",null,[a("如果"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"r"),e("mo",null,"<"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"r <n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"<"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("，如果节点不可用，我们仍然可以处理读取。")]),e("li",null,[a("对于"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"n"),e("mo",null,"="),e("mn",null,"3"),e("mo",{separator:"true"},","),e("mi",null,"w"),e("mo",null,"="),e("mn",null,"2"),e("mo",{separator:"true"},","),e("mi",null,"r"),e("mo",null,"="),e("mn",null,"2")]),e("annotation",{encoding:"application/x-tex"},"n = 3, w = 2, r = 2")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"2"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"2")])])]),a("，我们可以容忍一个不可用的节点。")]),e("li",null,[a("对于"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"n"),e("mo",null,"="),e("mn",null,"5"),e("mo",{separator:"true"},","),e("mi",null,"w"),e("mo",null,"="),e("mn",null,"3"),e("mo",{separator:"true"},","),e("mi",null,"r"),e("mo",null,"="),e("mn",null,"3")]),e("annotation",{encoding:"application/x-tex"},"n = 5, w = 3, r = 3")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"5"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"3")])])]),a("，我们可以容忍两个不可用的节点。 这个案例如"),e("a",{href:"./img/fig5-11.png"},"图5-11"),a("所示。")]),e("li",null,"通常，读取和写入操作始终并行发送到所有n个副本。 参数w和r决定我们等待多少个节点，即在我们认为读或写成功之前，有多少个节点需要报告成功。")],-1),_e=e("figure",null,[e("img",{src:E,alt:"",tabindex:"0"}),e("figcaption")],-1),be=e("p",null,[e("strong",null,[a("图5-11 如果"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"+"),e("mi",null,"r"),e("mo",null,">"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w + r > n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},">"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("，读取r个副本，至少有一个r副本必然包含了最近的成功写入")])],-1),ye=e("p",null,"​ 如果少于所需的w或r节点可用，则写入或读取将返回错误。 由于许多原因，节点可能不可用：因为执行操作的错误（由于磁盘已满而无法写入），因为节点关闭（崩溃，关闭电源），由于客户端和服务器节点之间的网络中断，或任何其他原因。 我们只关心节点是否返回了成功的响应，而不需要区分不同类型的错误。",-1),we=e("h3",{id:"法定人数一致性的局限性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#法定人数一致性的局限性","aria-hidden":"true"},"#"),a(" 法定人数一致性的局限性")],-1),ke=e("p",null,[a("​ 如果你有n个副本，并且你选择w和r，使得"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"+"),e("mi",null,"r"),e("mo",null,">"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w + r> n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},">"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("，你通常可以期望每个键的读取都能返回最近写入的值。情况就是这样，因为你写入的节点集合和你读取的节点集合必须重叠。也就是说，您读取的节点中必须至少有一个具有最新值的节点（如"),e("a",{href:"./img/fig5-11.png"},"图5-11"),a("所示）。")],-1),Ee=e("p",null,[a("​ 通常，r和w被选为多数（超过 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"n"),e("mi",{mathvariant:"normal"},"/"),e("mn",null,"2")]),e("annotation",{encoding:"application/x-tex"},"n/2")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord mathnormal"},"n"),e("span",{class:"mord"},"/2")])])]),a(" ）节点，因为这确保了"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"+"),e("mi",null,"r"),e("mo",null,">"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w + r> n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},">"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("，同时仍然容忍多达"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"n"),e("mi",{mathvariant:"normal"},"/"),e("mn",null,"2")]),e("annotation",{encoding:"application/x-tex"},"n/2")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord mathnormal"},"n"),e("span",{class:"mord"},"/2")])])]),a("个节点故障。但是，法定人数不一定必须是大多数，只是读写使用的节点交集至少需要包括一个节点。其他法定人数的配置是可能的，这使得分布式算法的设计有一定的灵活性【45】。")],-1),Ae=e("p",null,[a("​ 您也可以将w和r设置为较小的数字，以使"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"+"),e("mi",null,"r"),e("mo",null,"≤"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w + r ≤ n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"≤"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("（即法定条件不满足）。在这种情况下，读取和写入操作仍将被发送到n个节点，但操作成功只需要少量的成功响应。")],-1),xe=e("p",null,"​ 较小的w和r更有可能会读取过时的数据，因为您的读取更有可能不包含具有最新值的节点。另一方面，这种配置允许更低的延迟和更高的可用性：如果存在网络中断，并且许多副本变得无法访问，则可以继续处理读取和写入的机会更大。只有当可达副本的数量低于w或r时，数据库才分别变得不可用于写入或读取。",-1),Be=e("p",null,[a("但是，即使在"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"+"),e("mi",null,"r"),e("mo",null,">"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w + r > n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},">"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("的情况下，也可能存在返回陈旧值的边缘情况。这取决于实现，但可能的情况包括：")],-1),De=e("li",null,[a("如果使用宽松的法定人数（见“"),e("a",{href:"#%E5%AE%BD%E6%9D%BE%E7%9A%84%E6%B3%95%E5%AE%9A%E4%BA%BA%E6%95%B0%E4%B8%8E%E6%8F%90%E7%A4%BA%E7%A7%BB%E4%BA%A4"},"宽松的法定人数与提示移交"),a("”），w个写入和r个读取落在完全不同的节点上，因此r节点和w之间不再保证有重叠节点【46】。")],-1),Me=e("li",null,[a("如果两个写入同时发生，不清楚哪一个先发生。在这种情况下，唯一安全的解决方案是合并并发写入（请参阅“"),e("a",{href:"#%E5%A4%84%E7%90%86%E5%86%99%E5%85%A5%E5%86%B2%E7%AA%81"},"处理写入冲突"),a("”）。如果根据时间戳（最后写入胜利）挑选出一个胜者，则由于时钟偏差[35]，写入可能会丢失。我们将在“"),e("a",{href:"#%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8F%91%E5%86%99%E5%85%A5"},"检测并发写入"),a("”继续讨论此话题。")],-1),Se=e("li",null,"如果写操作与读操作同时发生，写操作可能仅反映在某些副本上。在这种情况下，不确定读取是返回旧值还是新值。",-1),ve=e("li",null,"如果写操作在某些副本上成功，而在其他节点上失败（例如，因为某些节点上的磁盘已满），在小于w个副本上写入成功。所以整体判定写入失败，但整体写入失败并没有在写入成功的副本上回滚。这意味着如果一个写入虽然报告失败，后续的读取仍然可能会读取这次失败写入的值【47】。",-1),Ce=e("li",null,"如果携带新值的节点失败，需要读取其他带有旧值的副本。并且其数据从带有旧值的副本中恢复，则存储新值的副本数可能会低于w，从而打破法定人数条件。",-1),Re=e("strong",null,"时序（timing）",-1),Le=e("p",null,"因此，尽管法定人数似乎保证读取返回最新的写入值，但在实践中并不那么简单。 Dynamo风格的数据库通常针对可以忍受最终一致性的用例进行优化。允许通过参数w和r来调整读取陈旧值的概率，但把它们当成绝对的保证是不明智的。",-1),Pe=e("a",{href:"#%E5%A4%8D%E5%88%B6%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98"},"复制延迟问题",-1),Ie=e("strong",null,"事务",-1),Te=e("strong",null,"共识",-1),Fe=r('<h4 id="监控陈旧度" tabindex="-1"><a class="header-anchor" href="#监控陈旧度" aria-hidden="true">#</a> 监控陈旧度</h4><p>​ 从运维的角度来看，监视你的数据库是否返回最新的结果是很重要的。即使应用可以容忍陈旧的读取，您也需要了解复制的健康状况。如果显著落后，应该提醒您，以便您可以调查原因（例如，网络中的问题或超载节点）。</p><p>​ 对于基于领导者的复制，数据库通常会公开复制滞后的度量标准，您可以将其提供给监视系统。这是可能的，因为写入按照相同的顺序应用于领导者和追随者，并且每个节点在复制日志中具有一个位置（在本地应用的写入数量）。通过从领导者的当前位置中减去追随者的当前位置，您可以测量复制滞后量。</p><p>​ 然而，在无领导者复制的系统中，没有固定的写入顺序，这使得监控变得更加困难。而且，如果数据库只使用读修复（没有反熵过程），那么对于一个值可能会有多大的限制是没有限制的 - 如果一个值很少被读取，那么由一个陈旧副本返回的值可能是古老的。</p><p>​ 已经有一些关于衡量无主复制数据库中的复制陈旧度的研究，并根据参数n，w和r来预测陈旧读取的预期百分比【48】。不幸的是，这还不是很常见的做法，但是将陈旧测量值包含在数据库的度量标准集中是一件好事。虽然最终一致性是一种有意模糊的保证，但是从可操作性角度来说，能够量化“最终”也是很重要的。</p><h3 id="宽松的法定人数与提示移交" tabindex="-1"><a class="header-anchor" href="#宽松的法定人数与提示移交" aria-hidden="true">#</a> 宽松的法定人数与提示移交</h3><p>​ 合理配置的法定人数可以使数据库无需故障切换即可容忍个别节点的故障。也可以容忍个别节点变慢，因为请求不必等待所有n个节点响应——当w或r节点响应时它们可以返回。对于需要高可用、低延时、且能够容忍偶尔读到陈旧值的应用场景来说，这些特性使无主复制的数据库很有吸引力。</p><p>​ 然而，法定人数（如迄今为止所描述的）并不像它们可能的那样具有容错性。网络中断可以很容易地将客户端从大量的数据库节点上切断。虽然这些节点是活着的，而其他客户端可能能够连接到它们，但是从数据库节点切断的客户端来看，它们也可能已经死亡。在这种情况下，剩余的可用节点可能会少于w或r，因此客户端不再能达到法定人数。</p><p>​ 在一个大型的集群中（节点数量明显多于n个），网络中断期间客户端可能仍能连接到一些数据库节点，但又不足以组成一个特定值的法定人数。在这种情况下，数据库设计人员需要权衡一下：</p><ul><li>对于所有无法达到w或r节点法定人数的请求，是否返回错误是更好的？</li><li>或者我们是否应该接受写入，然后将它们写入一些可达的节点，但不在这些值通常所存在的n个节点上？</li></ul><p>后者被认为是一个<strong>宽松的法定人数（sloppy quorum）</strong>【37】：写和读仍然需要w和r成功的响应，但这些响应可能来自不在指定的n个“主”节点中的其它节点。比方说，如果你把自己锁在房子外面，你可能会敲开邻居的门，问你是否可以暂时呆在沙发上。</p><p>​ 一旦网络中断得到解决，代表另一个节点临时接受的一个节点的任何写入都被发送到适当的“主”节点。这就是所谓的<strong>提示移交（hinted handoff）</strong>。 （一旦你再次找到你的房子的钥匙，你的邻居礼貌地要求你离开沙发回家。）</p>',12),We=e("p",null,[a("​ 宽松的法定人数对写入可用性的提高特别有用：只要有任何w节点可用，数据库就可以接受写入。然而，这意味着即使当"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"w"),e("mo",null,"+"),e("mi",null,"r"),e("mo",null,">"),e("mi",null,"n")]),e("annotation",{encoding:"application/x-tex"},"w + r> n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},">"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.4306em"}}),e("span",{class:"mord mathnormal"},"n")])])]),a("时，也不能确定读取某个键的最新值，因为最新的值可能已经临时写入了n之外的某些节点【47】。")],-1),Oe=r('<p>​ 因此，在传统意义上，一个宽松的法定人数实际上不是一个法定人数。这只是一个保证，即数据存储在w节点的地方。但不能保证r节点的读取，直到提示移交已经完成。</p><p>​ 在所有常见的Dynamo实现中，宽松的法定人数是可选的。在Riak中，它们默认是启用的，而在Cassandra和Voldemort中它们默认是禁用的【46,49,50】。</p><h4 id="运维多个数据中心-1" tabindex="-1"><a class="header-anchor" href="#运维多个数据中心-1" aria-hidden="true">#</a> 运维多个数据中心</h4><p>​ 我们先前讨论了跨数据中心复制作为多主复制的用例（请参阅“<a href="#%E5%A4%9A%E4%B8%BB%E5%A4%8D%E5%88%B6">多主复制</a>”）。无主复制也适用于多数据中心操作，因为它旨在容忍冲突的并发写入，网络中断和延迟尖峰。</p><p>​ Cassandra和Voldemort在正常的无主模型中实现了他们的多数据中心支持：副本的数量n包括所有数据中心的节点，在配置中，您可以指定每个数据中心中您想拥有的副本的数量。无论数据中心如何，每个来自客户端的写入都会发送到所有副本，但客户端通常只等待来自其本地数据中心内的法定节点的确认，从而不会受到跨数据中心链路延迟和中断的影响。对其他数据中心的高延迟写入通常被配置为异步发生，尽管配置有一定的灵活性【50,51】。</p><p>​ Riak将客户端和数据库节点之间的所有通信保持在一个数据中心本地，因此n描述了一个数据中心内的副本数量。数据库集群之间的跨数据中心复制在后台异步发生，其风格类似于多领导者复制【52】。</p><h3 id="检测并发写入" tabindex="-1"><a class="header-anchor" href="#检测并发写入" aria-hidden="true">#</a> 检测并发写入</h3><p>​ Dynamo风格的数据库允许多个客户端同时写入相同的Key，这意味着即使使用严格的法定人数也会发生冲突。这种情况与多领导者复制相似（请参阅“<a href="#%E5%A4%84%E7%90%86%E5%86%99%E5%85%A5%E5%86%B2%E7%AA%81">处理写入冲突</a>”），但在Dynamo样式的数据库中，在<strong>读修复</strong>或<strong>提示移交</strong>期间也可能会产生冲突。</p><p>​ 问题在于，由于可变的网络延迟和部分故障，事件可能在不同的节点以不同的顺序到达。例如，<a href="./img/fig5-12.png">图5-12</a>显示了两个客户机A和B同时写入三节点数据存储区中的键X：</p><ul><li>节点 1 接收来自 A 的写入，但由于暂时中断，未接收到来自 B 的写入。</li><li>节点 2 首先接收来自 A 的写入，然后接收来自 B 的写入。</li><li>节点 3 首先接收来自 B 的写入，然后从 A 写入。</li></ul><figure><img src="'+A+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-12 并发写入Dynamo风格的数据存储：没有明确定义的顺序。</strong></p><p>​ 如果每个节点只要接收到来自客户端的写入请求就简单地覆盖了某个键的值，那么节点就会永久地不一致，如<a href="./img/fig5-12.png">图5-12</a>中的最终获取请求所示：节点2认为 X 的最终值是 B，而其他节点认为值是 A 。</p><p>​ 为了最终达成一致，副本应该趋于相同的值。如何做到这一点？有人可能希望复制的数据库能够自动处理，但不幸的是，大多数的实现都很糟糕：如果你想避免丢失数据，你（应用程序开发人员）需要知道很多有关数据库冲突处理的内部信息。</p><p>​ 在“<a href="#%E5%A4%84%E7%90%86%E5%86%99%E5%85%A5%E5%86%B2%E7%AA%81">处理写入冲突</a>”一节中已经简要介绍了一些解决冲突的技术。在总结本章之前，让我们来更详细地探讨这个问题。</p><h4 id="最后写入胜利-丢弃并发写入" tabindex="-1"><a class="header-anchor" href="#最后写入胜利-丢弃并发写入" aria-hidden="true">#</a> 最后写入胜利（丢弃并发写入）</h4><p>​ 实现最终融合的一种方法是声明每个副本只需要存储最 <strong>“最近”</strong> 的值，并允许 <strong>“更旧”</strong> 的值被覆盖和抛弃。然后，只要我们有一种明确的方式来确定哪个写是“最近的”，并且每个写入最终都被复制到每个副本，那么复制最终会收敛到相同的值。</p><p>​ 正如 <strong>“最近”</strong> 的引号所表明的，这个想法其实颇具误导性。在<a href="./img/fig5-12.png">图5-12</a>的例子中，当客户端向数据库节点发送写入请求时，客户端都不知道另一个客户端，因此不清楚哪一个先发生了。事实上，说“发生”是没有意义的：我们说写入是 <strong>并发（concurrent）</strong> 的，所以它们的顺序是不确定的。</p><p>​ 即使写入没有自然的排序，我们也可以强制任意排序。例如，可以为每个写入附加一个时间戳，挑选最 <strong>“最近”</strong> 的最大时间戳，并丢弃具有较早时间戳的任何写入。这种冲突解决算法被称为 <strong>最后写入胜利（LWW, last write wins）</strong>，是Cassandra 【53】唯一支持的冲突解决方法，也是Riak 【35】中的一个可选特征。</p>',19),Je=e("strong",null,"持久性",-1),Qe=r('<p>​ 有一些情况，如缓存，其中丢失的写入可能是可以接受的。如果丢失数据不可接受，LWW是解决冲突的一个很烂的选择。</p><p>​ 与LWW一起使用数据库的唯一安全方法是确保一个键只写入一次，然后视为不可变，从而避免对同一个键进行并发更新。例如，Cassandra推荐使用的方法是使用UUID作为键，从而为每个写操作提供一个唯一的键【53】。</p><h4 id="此前发生-的关系和并发" tabindex="-1"><a class="header-anchor" href="#此前发生-的关系和并发" aria-hidden="true">#</a> “此前发生”的关系和并发</h4><p>我们如何判断两个操作是否是并发的？为了建立一个直觉，让我们看看一些例子：</p><ul><li>在<a href="fig5-9.png">图5-9</a>中，两个写入不是并发的：A的插入发生在B的递增之前，因为B递增的值是A插入的值。换句话说，B的操作建立在A的操作上，所以B的操作必须有后来发生。我们也可以说B是 <strong>因果依赖（causally dependent）</strong> 于A。</li><li>另一方面，<a href="fig5-12.png">图5-12</a>中的两个写入是并发的：当每个客户端启动操作时，它不知道另一个客户端也正在执行操作同样的键。因此，操作之间不存在因果关系。</li></ul><p>如果操作B了解操作A，或者依赖于A，或者以某种方式构建于操作A之上，则操作A在另一个操作B之前发生。在另一个操作之前是否发生一个操作是定义什么并发的关键。事实上，我们可以简单地说，如果两个操作都不在另一个之前发生，那么两个操作是并发的（即，两个操作都不知道另一个）【54】。</p><p>​ 因此，只要有两个操作A和B，就有三种可能性：A在B之前发生，或者B在A之前发生，或者A和B并发。我们需要的是一个算法来告诉我们两个操作是否是并发的。如果一个操作发生在另一个操作之前，则后面的操作应该覆盖较早的操作，但是如果这些操作是并发的，则存在需要解决的冲突。</p>',7),Ge=e("h4",{id:"并发性-时间和相对性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#并发性-时间和相对性","aria-hidden":"true"},"#"),a(" 并发性，时间和相对性")],-1),Ne=e("strong",null,"“同时”",-1),He=e("strong",null,"同时",-1),Ve=e("p",null,[a("​ 为了定义并发性，确切的时间并不重要：如果两个操作都意识不到对方的存在，就称这两个操作"),e("strong",null,"并发"),a("，而不管它们发生的物理时间。人们有时把这个原理和狭义相对论的物理学联系起来【54】，它引入了信息不能比光速更快的思想。因此，如果两个事件发生的时间差小于光通过它们之间的距离所需要的时间，那么这两个事件不可能相互影响。")],-1),qe=e("p",null,[a("​ 在计算机系统中，即使光速原则上允许一个操作影响另一个操作，但两个操作也可能是"),e("strong",null,"并行的"),a("。例如，如果网络缓慢或中断，两个操作间可能会出现一段时间间隔，但仍然是并发的，因为网络问题阻止一个操作意识到另一个操作的存在。")],-1),ze=r('<h4 id="捕获-此前发生-关系" tabindex="-1"><a class="header-anchor" href="#捕获-此前发生-关系" aria-hidden="true">#</a> 捕获&quot;此前发生&quot;关系</h4><p>​ 来看一个算法，它确定两个操作是否为并发的，还是一个在另一个之前。为了简单起见，我们从一个只有一个副本的数据库开始。一旦我们已经制定了如何在单个副本上完成这项工作，我们可以将该方法推广到具有多个副本的无领导者数据库。</p><p><a href="./img/fig5-13.png">图5-13</a>显示了两个客户端同时向同一购物车添加项目。 （如果这样的例子让你觉得太麻烦了，那么可以想象，两个空中交通管制员同时把飞机添加到他们正在跟踪的区域）最初，购物车是空的。在它们之间，客户端向数据库发出五次写入：</p><ol><li>客户端 1 将牛奶加入购物车。这是该键的第一次写入，服务器成功存储了它并为其分配版本号1，最后将值与版本号一起回送给客户端。</li><li>客户端 2 将鸡蛋加入购物车，不知道客户端 1 同时添加了牛奶（客户端 2 认为它的鸡蛋是购物车中的唯一物品）。服务器为此写入分配版本号 2，并将鸡蛋和牛奶存储为两个单独的值。然后它将这两个值<strong>都</strong>返回给客户端 2 ，并附上版本号 2 。</li><li>客户端 1 不知道客户端 2 的写入，想要将面粉加入购物车，因此认为当前的购物车内容应该是 [牛奶，面粉]。它将此值与服务器先前向客户端 1 提供的版本号 1 一起发送到服务器。服务器可以从版本号中知道[牛奶，面粉]的写入取代了[牛奶]的先前值，但与[鸡蛋]的值是<strong>并发</strong>的。因此，服务器将版本 3 分配给[牛奶，面粉]，覆盖版本1值[牛奶]，但保留版本 2 的值[蛋]，并将所有的值返回给客户端 1 。</li><li>同时，客户端 2 想要加入火腿，不知道客端户 1 刚刚加了面粉。客户端 2 在最后一个响应中从服务器收到了两个值[牛奶]和[蛋]，所以客户端 2 现在合并这些值，并添加火腿形成一个新的值，[鸡蛋，牛奶，火腿]。它将这个值发送到服务器，带着之前的版本号 2 。服务器检测到新值会覆盖版本 2 [鸡蛋]，但新值也会与版本 3 [牛奶，面粉]<strong>并发</strong>，所以剩下的两个是v3 [牛奶，面粉]，和v4：[鸡蛋，牛奶，火腿]</li><li>最后，客户端 1 想要加培根。它以前在v3中从服务器接收[牛奶，面粉]和[鸡蛋]，所以它合并这些，添加培根，并将最终值[牛奶，面粉，鸡蛋，培根]连同版本号v3发往服务器。这会覆盖v3[牛奶，面粉]（请注意[鸡蛋]已经在最后一步被覆盖），但与v4[鸡蛋，牛奶，火腿]并发，所以服务器保留这两个并发值。</li></ol><figure><img src="'+x+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-13 捕获两个客户端之间的因果关系，同时编辑购物车。</strong></p><p>​ <a href="./img/fig5-13.png">图5-13</a>中的操作之间的数据流如<a href="./img/fig5-14.png">图5-14</a>所示。 箭头表示哪个操作发生在其他操作之前，意味着后面的操作知道或依赖于较早的操作。 在这个例子中，客户端永远不会完全掌握服务器上的数据，因为总是有另一个操作同时进行。 但是，旧版本的值最终会被覆盖，并且不会丢失任何写入。</p><figure><img src="'+B+'" alt="" tabindex="0"><figcaption></figcaption></figure><p><strong>图5-14 图5-13中的因果依赖关系图。</strong></p><p>​ 请注意，服务器可以通过查看版本号来确定两个操作是否是并发的——它不需要解释该值本身（因此该值可以是任何数据结构）。该算法的工作原理如下：</p><ul><li>服务器为每个键保留一个版本号，每次写入键时都增加版本号，并将新版本号与写入的值一起存储。</li><li>当客户端读取键时，服务器将返回所有未覆盖的值以及最新的版本号。客户端在写入前必须读取。</li><li>客户端写入键时，必须包含之前读取的版本号，并且必须将之前读取的所有值合并在一起。 （针对写入请求的响应可以像读取请求一样，返回所有当前值，这使得我们可以像购物车示例那样将多个写入串联起来。）</li><li>当服务器接收到具有特定版本号的写入时，它可以覆盖该版本号或更低版本的所有值（因为它知道它们已经被合并到新的值中），但是它必须用更高的版本号来保存所有值（因为这些值与随后的写入是并发的）。</li></ul><p>当一个写入包含前一次读取的版本号时，它会告诉我们的写入是基于之前的哪一种状态。如果在不包含版本号的情况下进行写操作，则与所有其他写操作并发，因此它不会覆盖任何内容 —— 只会在随后的读取中作为其中一个值返回。</p><h4 id="合并同时写入的值" tabindex="-1"><a class="header-anchor" href="#合并同时写入的值" aria-hidden="true">#</a> 合并同时写入的值</h4><p>​ 这种算法可以确保没有数据被无声地丢弃，但不幸的是，客户端需要做一些额外的工作：如果多个操作并发发生，则客户端必须通过合并并发写入的值来擦屁股。 Riak称这些并发值<strong>兄弟（siblings）</strong>。</p><p>​ 合并兄弟值，本质上是与多领导者复制中的冲突解决相同的问题，我们先前讨论过（请参阅“<a href="#%E5%A4%84%E7%90%86%E5%86%99%E5%85%A5%E5%86%B2%E7%AA%81">处理写入冲突</a>”）。一个简单的方法是根据版本号或时间戳（最后写入胜利）选择一个值，但这意味着丢失数据。所以，你可能需要在应用程序代码中做更聪明的事情。</p><p>​ 以购物车为例，一种合理的合并兄弟方法就是集合求并集。在<a href="./img/fig5-14.png">图5-14</a>中，最后的两个兄弟是[牛奶，面粉，鸡蛋，熏肉]和[鸡蛋，牛奶，火腿]。注意牛奶和鸡蛋同时出现在两个兄弟里，即使他们每个只被写过一次。合并的值可以是[牛奶，面粉，鸡蛋，培根，火腿]，没有重复。</p>',16),Ke=e("strong",null,"删除",-1),je=e("strong",null,"墓碑（tombstone）",-1),Ue=r('<p>​ 因为在应用程序代码中合并兄弟是复杂且容易出错的，所以有一些数据结构被设计出来用于自动执行这种合并，如“<a href="#%E8%87%AA%E5%8A%A8%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3">自动冲突解决</a>”中讨论的。例如，Riak的数据类型支持使用称为CRDT的数据结构家族【38,39,55】可以以合理的方式自动合并兄弟，包括保留删除。</p><h4 id="版本向量" tabindex="-1"><a class="header-anchor" href="#版本向量" aria-hidden="true">#</a> 版本向量</h4><p>​ <a href="./img/fig5-13.png">图5-13</a>中的示例只使用一个副本。当有多个副本但没有领导者时，算法如何修改？</p><p>​ <a href="./img/fig5-13.png">图5-13</a>使用单个版本号来捕获操作之间的依赖关系，但是当多个副本并发接受写入时，这是不够的。相反，除了对每个键使用版本号之外，还需要在<strong>每个副本</strong>中使用版本号。每个副本在处理写入时增加自己的版本号，并且跟踪从其他副本中看到的版本号。这个信息指出了要覆盖哪些值，以及保留哪些值作为兄弟。</p><p>​ 所有副本的版本号集合称为<strong>版本向量（version vector）</strong>【56】。这个想法的一些变体正在被使用，但最有趣的可能是在Riak 2.0 【58,59】中使用的<strong>分散版本矢量（dotted version vector）</strong>【57】。我们不会深入细节，但是它的工作方式与我们在购物车示例中看到的非常相似。</p><p>​ 与<a href="./img/fig5-13.png">图5-13</a>中的版本号一样，当读取值时，版本向量会从数据库副本发送到客户端，并且随后写入值时需要将其发送回数据库。（Riak将版本向量编码为一个字符串，它称为<strong>因果上下文（causal context）</strong>）。版本向量允许数据库区分覆盖写入和并发写入。</p><p>​ 另外，就像在单个副本的例子中，应用程序可能需要合并兄弟。版本向量结构确保从一个副本读取并随后写回到另一个副本是安全的。这样做可能会创建兄弟，但只要兄弟姐妹合并正确，就不会丢失数据。</p><blockquote><h4 id="版本向量和向量时钟" tabindex="-1"><a class="header-anchor" href="#版本向量和向量时钟" aria-hidden="true">#</a> 版本向量和向量时钟</h4><p>​ 版本向量有时也被称为矢量时钟，即使它们不完全相同。 差别很微妙——细节请参阅参考资料【57,60,61】。 简而言之，在比较副本的状态时，版本向量是正确的数据结构。</p></blockquote><h2 id="本章小结" tabindex="-1"><a class="header-anchor" href="#本章小结" aria-hidden="true">#</a> 本章小结</h2><p>在本章中，我们考察了复制的问题。复制可以用于几个目的：</p><p><em><strong>高可用性</strong></em></p><p>​ 即使在一台机器（或多台机器，或整个数据中心）停机的情况下也能保持系统正常运行</p><p><em><strong>断开连接的操作</strong></em></p><p>​ 允许应用程序在网络中断时继续工作</p><p><em><strong>延迟</strong></em></p><p>​ 将数据放置在距离用户较近的地方，以便用户能够更快地与其交互</p><p><em><strong>可伸缩性</strong></em></p><p>​ 通过在副本上读，能够处理比单机更大的读取量</p><p>​ 尽管是一个简单的目标 - 在几台机器上保留相同数据的副本，但复制却是一个非常棘手的问题。它需要仔细考虑并发和所有可能出错的事情，并处理这些故障的后果。至少，我们需要处理不可用的节点和网络中断（这还不包括更隐蔽的故障，例如由于软件错误导致的静默数据损坏）。</p><p>​ 我们讨论了复制的三种主要方法：</p><p><em><strong>单主复制</strong></em></p><p>​ 客户端将所有写入操作发送到单个节点（领导者），该节点将数据更改事件流发送到其他副本（追随者）。读取可以在任何副本上执行，但从追随者读取可能是陈旧的。</p><p><em><strong>多主复制</strong></em></p><p>​ 客户端发送每个写入到几个领导节点之一，其中任何一个都可以接受写入。领导者将数据更改事件流发送给彼此以及任何跟随者节点。</p><p><em><strong>无主复制</strong></em></p><p>​ 客户端发送每个写入到几个节点，并从多个节点并行读取，以检测和纠正具有陈旧数据的节点。</p><p>每种方法都有优点和缺点。单主复制是非常流行的，因为它很容易理解，不需要担心冲突解决。在出现故障节点，网络中断和延迟峰值的情况下，多领导者和无领导者复制可以更加稳健，但以更难以推理并仅提供非常弱的一致性保证为代价。</p><p>​ 复制可以是同步的，也可以是异步的，这在发生故障时对系统行为有深远的影响。尽管在系统运行平稳时异步复制速度很快，但是要弄清楚在复制滞后增加和服务器故障时会发生什么，这一点很重要。如果一个领导者失败了，并且你提升了一个异步更新的追随者成为新的领导者，那么最近提交的数据可能会丢失。</p><p>​ 我们研究了一些可能由复制滞后引起的奇怪效应，我们也讨论了一些有助于决定应用程序在复制滞后时的行为的一致性模型：</p><p><em><strong>写后读</strong></em></p><p>​ 用户应该总是看到自己提交的数据。</p><p><em><strong>单调读</strong></em></p><p>用户在看到某一个时间点的数据后，他们不应该再看到某个更早时间点的数据。</p><p><em><strong>一致前缀读</strong></em></p><p>​ 用户应该看到数据处于一种具有因果意义的状态：例如，按正确的顺序看到一个问题和对应的回答。</p><p>​ 最后，我们讨论了多领导者和无领导者复制方法所固有的并发问题：因为他们允许多个写入并发发生，这可能会导致冲突。我们研究了一个数据库可能使用的算法来确定一个操作是否发生在另一个操作之前，或者它们是否同时发生。我们还谈到了通过合并并发更新来解决冲突的方法。</p><p>​ 在下一章中，我们将继续研究分布在多个机器上的数据，通过复制的同僚：将大数据集分割成分区。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2>',38),Xe={href:"http://domino.research.ibm.com/library/cyberdig.nsf/papers/A776EC17FC2FCE73852579F100578964/$File/RJ2571.pdf",target:"_blank",rel:"noopener noreferrer"},Ye={href:"http://www.oracle.com/technetwork/database/availability/active-data-guard-wp-12c-1896127.pdf",target:"_blank",rel:"noopener noreferrer"},Ze={href:"http://msdn.microsoft.com/en-us/library/hh510230.aspx",target:"_blank",rel:"noopener noreferrer"},$e=e("em",null,"SQL Server Books Online",-1),ea={href:"http://www.slideshare.net/amywtang/espresso-20952131",target:"_blank",rel:"noopener noreferrer"},aa=e("em",null,"ACM International Conference on Management of Data",-1),sa={href:"http://www.slideshare.net/junrao/kafka-replication-apachecon2013",target:"_blank",rel:"noopener noreferrer"},ta=e("em",null,"ApacheCon North America",-1),na={href:"https://www.rabbitmq.com/ha.html",target:"_blank",rel:"noopener noreferrer"},la=e("em",null,"RabbitMQ Server Documentation",-1),ra={href:"http://yoshinorimatsunobu.blogspot.co.uk/2014/04/semi-synchronous-replication-at-facebook.html",target:"_blank",rel:"noopener noreferrer"},oa=e("em",null,"yoshinorimatsunobu.blogspot.co.uk",-1),ia={href:"http://static.usenix.org/legacy/events/osdi04/tech/full_papers/renesse/renesse.pdf",target:"_blank",rel:"noopener noreferrer"},pa=e("em",null,"6th USENIX Symposium on Operating System Design and Implementation",-1),ca={href:"https://www.usenix.org/legacy/event/usenix09/tech/full_papers/terrace/terrace.pdf",target:"_blank",rel:"noopener noreferrer"},ha=e("em",null,"USENIX Annual Technical Conference",-1),ma={href:"http://sigops.org/sosp/sosp11/current/2011-Cascais/printable/11-calder.pdf",target:"_blank",rel:"noopener noreferrer"},da=e("em",null,"23rd ACM Symposium on Operating Systems Principles",-1),ga={href:"http://umbrant.com/blog/2016/windows_azure_storage.html",target:"_blank",rel:"noopener noreferrer"},ua=e("em",null,"umbrant.com",-1),fa={href:"https://www.percona.com/doc/percona-xtrabackup/2.1/index.html",target:"_blank",rel:"noopener noreferrer"},_a={href:"https://github.com/blog/1261-github-availability-this-week",target:"_blank",rel:"noopener noreferrer"},ba=e("em",null,"github.com",-1),ya={href:"https://github.com/blog/1364-downtime-last-saturday",target:"_blank",rel:"noopener noreferrer"},wa=e("em",null,"github.com",-1),ka={href:"https://www.youtube.com/watch?v=gJRj3vJL4wE",target:"_blank",rel:"noopener noreferrer"},Ea=e("em",null,"Strange Loop",-1),Aa={href:"http://www.pgcon.org/2012/schedule/attachments/258_212_Internals%20Of%20PostgreSQL%20Wal.pdf",target:"_blank",rel:"noopener noreferrer"},xa=e("em",null,"PostgreSQL Conference",-1),Ba={href:"http://dev.mysql.com/doc/internals/en/index.html",target:"_blank",rel:"noopener noreferrer"},Da=e("em",null,"MySQL Internals Manual",-1),Ma={href:"https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-sharma.pdf",target:"_blank",rel:"noopener noreferrer"},Sa=e("em",null,"12th USENIX Symposium on Networked Systems Design and Implementation",-1),va={href:"http://www.oracle.com/us/products/middleware/data-integration/oracle-goldengate-realtime-access-2031152.pdf",target:"_blank",rel:"noopener noreferrer"},Ca={href:"http://www.socc2012.org/s18-das.pdf",target:"_blank",rel:"noopener noreferrer"},Ra=e("em",null,"ACM Symposium on Cloud Computing",-1),La={href:"http://blog.endpoint.com/2014/06/bucardo-5-multimaster-postgres-released.html",target:"_blank",rel:"noopener noreferrer"},Pa=e("em",null,"blog.endpoint.com",-1),Ia={href:"http://queue.acm.org/detail.cfm?id=1466448",target:"_blank",rel:"noopener noreferrer"},Ta=e("em",null,"ACM Queue",-1),Fa={href:"http://dx.doi.org/10.1145/1466443.1466448",target:"_blank",rel:"noopener noreferrer"},Wa={href:"http://research.microsoft.com/pubs/157411/ConsistencyAndBaseballReport.pdf",target:"_blank",rel:"noopener noreferrer"},Oa={href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.71.2269&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"},Ja=e("em",null,"3rd International Conference on Parallel and Distributed Information Systems",-1),Qa={href:"http://dx.doi.org/10.1109/PDIS.1994.331722",target:"_blank",rel:"noopener noreferrer"},Ga=e("li",null,[e("p",null,[a("Terry Pratchett: "),e("em",null,"Reaper Man: A Discworld Novel"),a(". Victor Gollancz, 1991. ISBN: 978-0-575-04979-6")])],-1),Na={href:"http://tungsten-replicator.org/",target:"_blank",rel:"noopener noreferrer"},Ha={href:"http://bdr-project.org/docs/next/index.html",target:"_blank",rel:"noopener noreferrer"},Va=e("em",null,"bdr-project.org",-1),qa={href:"http://scale-out-blog.blogspot.co.uk/2012/04/if-you-must-deploy-multi-master.html",target:"_blank",rel:"noopener noreferrer"},za=e("em",null,"Must",-1),Ka=e("em",null,"scale-out-blog.blogspot.co.uk",-1),ja=e("li",null,[e("p",null,[a("J. Chris Anderson, Jan Lehnardt, and Noah Slater: "),e("em",null,"CouchDB: The Definitive Guide"),a(". O'Reilly Media, 2010. ISBN: 978-0-596-15589-6")])],-1),Ua={href:"https://github.com/ether/etherpad-lite/blob/e2ce9dc/doc/easysync/easysync-full-description.pdf",target:"_blank",rel:"noopener noreferrer"},Xa=e("em",null,"github.com",-1),Ya={href:"http://googledrive.blogspot.com/2010/09/whats-different-about-new-google-docs.html",target:"_blank",rel:"noopener noreferrer"},Za=e("em",null,"googledrive.blogspot.com",-1),$a={href:"http://arxiv.org/abs/1608.03960",target:"_blank",rel:"noopener noreferrer"},es={href:"http://messagepassing.blogspot.co.uk/2011/10/eventual-consistency-detecting.html",target:"_blank",rel:"noopener noreferrer"},as=e("em",null,"messagepassing.blogspot.co.uk",-1),ss={href:"https://www.percona.com/live/mysql-conference-2013/sessions/state-art-mysql-multi-master-replication",target:"_blank",rel:"noopener noreferrer"},ts=e("em",null,"Percona Live: MySQL Conference & Expo",-1),ns={href:"http://basho.com/clocks-are-bad-or-welcome-to-distributed-systems/",target:"_blank",rel:"noopener noreferrer"},ls=e("em",null,"basho.com",-1),rs={href:"http://sdf.org/~riley/blog/2016/01/04/is-bi-directional-replication-bdr-in-postgres-transactional/",target:"_blank",rel:"noopener noreferrer"},os=e("em",null,"sdf.org",-1),is={href:"http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf",target:"_blank",rel:"noopener noreferrer"},ps=e("em",null,"21st ACM Symposium on Operating Systems Principles",-1),cs={href:"http://hal.inria.fr/inria-00555588/",target:"_blank",rel:"noopener noreferrer"},hs={href:"https://speakerdeck.com/lenary/crdts-an-update-or-just-a-put",target:"_blank",rel:"noopener noreferrer"},ms=e("em",null,"RICON West",-1),ds={href:"https://gist.github.com/russelldb/f92f44bdfb619e089a4d",target:"_blank",rel:"noopener noreferrer"},gs=e("em",null,"gist.github.com",-1),us={href:"http://gazagnaire.org/pub/FGM15.pdf",target:"_blank",rel:"noopener noreferrer"},fs=e("em",null,"26es Journées Francophones des Langages Applicatifs",-1),_s={href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.933&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"},bs=e("em",null,"ACM Conference on Computer Supported Cooperative Work",-1),ys={href:"https://issues.apache.org/jira/browse/HBASE-7709",target:"_blank",rel:"noopener noreferrer"},ws=e("em",null,"issues.apache.org",-1),ks={href:"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.84.7698",target:"_blank",rel:"noopener noreferrer"},Es=e("em",null,"7th ACM Symposium on Operating Systems Principles",-1),As={href:"http://dx.doi.org/10.1145/800215.806583",target:"_blank",rel:"noopener noreferrer"},xs={href:"https://arxiv.org/abs/1608.06696",target:"_blank",rel:"noopener noreferrer"},Bs=e("em",null,"arXiv:1608.06696",-1),Ds={href:"http://lists.basho.com/pipermail/riak-users_lists.basho.com/2012-January/007157.html",target:"_blank",rel:"noopener noreferrer"},Ms=e("em",null,"riak-users",-1),Ss=e("em",null,"lists.basho.com",-1),vs={href:"https://vimeo.com/51973001",target:"_blank",rel:"noopener noreferrer"},Cs=e("em",null,"RICON West",-1),Rs={href:"http://www.bailis.org/papers/pbs-cacm2014.pdf",target:"_blank",rel:"noopener noreferrer"},Ls=e("em",null,"Communications of the ACM",-1),Ps={href:"http://dx.doi.org/10.1145/2632792",target:"_blank",rel:"noopener noreferrer"},Is={href:"http://www.datastax.com/dev/blog/modern-hinted-handoff",target:"_blank",rel:"noopener noreferrer"},Ts=e("em",null,"datastax.com",-1),Fs={href:"https://github.com/voldemort/voldemort/wiki",target:"_blank",rel:"noopener noreferrer"},Ws=e("em",null,"github.com",-1),Os={href:"http://www.datastax.com/documentation/cassandra/2.0/index.html",target:"_blank",rel:"noopener noreferrer"},Js={href:"http://basho.com/assets/MultiDatacenter_Replication.pdf",target:"_blank",rel:"noopener noreferrer"},Qs={href:"http://www.datastax.com/dev/blog/why-cassandra-doesnt-need-vector-clocks",target:"_blank",rel:"noopener noreferrer"},Gs=e("em",null,"datastax.com",-1),Ns={href:"http://research.microsoft.com/en-US/um/people/Lamport/pubs/time-clocks.pdf",target:"_blank",rel:"noopener noreferrer"},Hs=e("em",null,"Communications of the ACM",-1),Vs={href:"http://dx.doi.org/10.1145/359545.359563",target:"_blank",rel:"noopener noreferrer"},qs={href:"http://blog.joeljacobson.com/riak-2-0-data-types/",target:"_blank",rel:"noopener noreferrer"},zs=e("em",null,"blog.joeljacobson.com",-1),Ks={href:"http://zoo.cs.yale.edu/classes/cs426/2013/bib/parker83detection.pdf",target:"_blank",rel:"noopener noreferrer"},js=e("em",null,"IEEE Transactions on Software Engineering",-1),Us={href:"http://dx.doi.org/10.1109/TSE.1983.236733",target:"_blank",rel:"noopener noreferrer"},Xs={href:"http://arxiv.org/pdf/1011.5808v1.pdf",target:"_blank",rel:"noopener noreferrer"},Ys={href:"https://www.youtube.com/watch?v=HHkKPdOi-ZU",target:"_blank",rel:"noopener noreferrer"},Zs=e("em",null,"RICON",-1),$s={href:"http://basho.com/posts/technical/vector-clocks-revisited-part-2-dotted-version-vectors/",target:"_blank",rel:"noopener noreferrer"},et=e("em",null,"basho.com",-1),at={href:"https://haslab.wordpress.com/2011/07/08/version-vectors-are-not-vector-clocks/",target:"_blank",rel:"noopener noreferrer"},st=e("em",null,"haslab.wordpress.com",-1),tt={href:"http://dcg.ethz.ch/lectures/hs08/seminar/papers/mattern4.pdf",target:"_blank",rel:"noopener noreferrer"},nt=e("em",null,"Distributed Computing",-1),lt={href:"http://dx.doi.org/10.1007/BF02277859",target:"_blank",rel:"noopener noreferrer"},rt=e("hr",null,null,-1),ot=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"上一章"),e("th",{style:{"text-align":"center"}},"目录"),e("th",{style:{"text-align":"center"}},"下一章")])],-1),it={style:{"text-align":"center"}},pt={style:{"text-align":"center"}},ct={style:{"text-align":"center"}},ht=e("hr",{class:"footnotes-sep"},null,-1),mt={class:"footnotes"},dt={class:"footnotes-list"},gt=r('<li id="footnote1" class="footnote-item"><p>不同的人对 <strong>热（hot）</strong>，<strong>温（warm）</strong>，<strong>冷（cold）</strong> 备份服务器有不同的定义。 例如在PostgreSQL中，<strong>热备（hot standby）</strong> 指的是能接受客户端读请求的副本。而 <strong>温备（warm standby）</strong> 只是追随领导者，但不处理客户端的任何查询。 就本书而言，这些差异并不重要。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>这种机制称为 <strong>屏蔽（fencing）</strong>，充满感情的术语是：<strong>爆彼之头（Shoot The Other Node In The Head, STONITH）</strong>。 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>道格拉斯·特里（Douglas Terry）等人创造了术语最终一致性。 【24】 并经由Werner Vogels 【22】推广，成为许多NoSQL项目的口号。 然而，不只有NoSQL数据库是最终一致的：关系型数据库中的异步复制追随者也有相同的特性。 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li>',3),ut={id:"footnote4",class:"footnote-item"},ft=e("a",{href:"#footnote-ref4",class:"footnote-backref"},"↩︎",-1),_t={id:"footnote5",class:"footnote-item"},bt=e("a",{href:"#footnote-ref5",class:"footnote-backref"},"↩︎",-1),yt=r('<li id="footnote6" class="footnote-item"><p>Dynamo不适用于Amazon以外的用户。 令人困惑的是，AWS提供了一个名为DynamoDB的托管数据库产品，它使用了完全不同的体系结构：它基于单领导者复制。 <a href="#footnote-ref6" class="footnote-backref">↩︎</a></p></li><li id="footnote7" class="footnote-item"><p>有时候这种法定人数被称为严格的法定人数，相对“宽松的法定人数”而言（见“<a href="#%E5%AE%BD%E6%9D%BE%E7%9A%84%E6%B3%95%E5%AE%9A%E4%BA%BA%E6%95%B0%E4%B8%8E%E6%8F%90%E7%A4%BA%E7%A7%BB%E4%BA%A4">宽松的法定人数与提示移交</a>”） <a href="#footnote-ref7" class="footnote-backref">↩︎</a></p></li>',2);function wt(kt,Et){const n=o("RouterLink"),t=o("ExternalLinkIcon");return p(),c("div",null,[M,S,v,C,R,e("p",null,[a("​ 复制意味着在通过网络连接的多台机器上保留相同数据的副本。正如在"),s(n,{to:"/book/ddia/part-ii.html"},{default:l(()=>[a("第二部分")]),_:1}),a("的介绍中所讨论的那样，我们希望能复制数据，可能出于各种各样的原因：")]),L,e("p",null,[a("本章将假设你的数据集非常小，每台机器都可以保存整个数据集的副本。在"),s(n,{to:"/book/ddia/ch6.html"},{default:l(()=>[a("第六章")]),_:1}),a("中将放宽这个假设，讨论对单个机器来说太大的数据集的分割（分片）。在后面的章节中，我们将讨论复制数据系统中可能发生的各种故障，以及如何处理这些故障。")]),P,e("blockquote",null,[I,T,e("p",null,[a("复制的一致性与"),F,a("（使几个节点就某个值达成一致）之间有着密切的联系，"),s(n,{to:"/book/ddia/ch9.html"},{default:l(()=>[a("第九章")]),_:1}),a("将详细地探讨这一领域的理论。本章主要讨论实践中数据库常用的简单复制形式。")])]),W,e("ol",null,[O,e("li",null,[a("选择一个新的主库。这可以通过选举过程（主库由剩余副本以多数选举产生）来完成，或者可以由之前选定的"),J,a(" 来指定新的主库。主库的最佳人选通常是拥有旧主库最新数据副本的从库（最小化数据损失）。让所有的节点同意一个新的领导者，是一个"),Q,a("问题，将在"),s(n,{to:"/book/ddia/ch9.html"},{default:l(()=>[a("第九章")]),_:1}),a("详细讨论。")]),e("li",null,[a("重新配置系统以启用新的主库。客户端现在需要将它们的写请求发送给新主库（将在“"),s(n,{to:"/book/ddia/ch6.html#%E8%AF%B7%E6%B1%82%E8%B7%AF%E7%94%B1"},{default:l(()=>[a("请求路由")]),_:1}),a("”中讨论这个问题）。如果老领导回来，可能仍然认为自己是主库，没有意识到其他副本已经让它下台了。系统需要确保老领导认可新领导，成为一个从库。")])]),G,e("ul",null,[N,H,e("li",null,[e("p",null,[a("发生某些故障时（见"),s(n,{to:"/book/ddia/ch8.html"},{default:l(()=>[a("第八章")]),_:1}),a("）可能会出现两个节点都以为自己是主库的情况。这种情况称为 "),V,a("，非常危险：如果两个主库都可以接受写操作，却没有冲突解决机制（请参阅“"),q,a("”），那么数据就可能丢失或损坏。一些系统采取了安全防范措施：当检测到两个主库节点同时存在时会关闭其中一个节点"),z,a("，但设计粗糙的机制可能最后会导致两个节点都被关闭【14】。")])]),K]),j,e("p",null,[a("节点故障、不可靠的网络、对副本一致性，持久性，可用性和延迟的权衡 ，这些问题实际上是分布式系统中的基本问题。"),s(n,{to:"/book/ddia/ch8.html"},{default:l(()=>[a("第八章")]),_:1}),a("和"),s(n,{to:"/book/ddia/ch9.html"},{default:l(()=>[a("第九章")]),_:1}),a("将更深入地讨论它们。")]),U,e("p",null,[a("在"),s(n,{to:"/book/ddia/ch3.html"},{default:l(()=>[a("第三章")]),_:1}),a("中，我们讨论了存储引擎如何在磁盘上表示数据，并且我们发现，通常写操作都是追加到日志中：")]),e("ul",null,[e("li",null,[a("对于日志结构存储引擎（请参阅“"),s(n,{to:"/book/ddia/ch3.html#SSTables%E5%92%8CLSM%E6%A0%91"},{default:l(()=>[a("SSTables和LSM树")]),_:1}),a("”），日志是主要的存储位置。日志段在后台压缩，并进行垃圾回收。")]),e("li",null,[a("对于覆写单个磁盘块的"),s(n,{to:"/book/ddia/ch3.html#B%E6%A0%91"},{default:l(()=>[a("B树")]),_:1}),a("，每次修改都会先写入 "),X,a("，以便崩溃后索引可以恢复到一个一致的状态。")])]),Y,e("p",null,[a("​ 对于外部应用程序来说，逻辑日志格式也更容易解析。如果要将数据库的内容发送到外部系统，这一点很有用，例如复制到数据仓库进行离线分析，或建立自定义索引和缓存【18】。 这种技术被称为 "),Z,a("，"),s(n,{to:"/book/ddia/ch11.html"},{default:l(()=>[a("第十一章")]),_:1}),a("将重新讲到它。")]),$,e("p",null,[a("​ 容忍节点故障只是需要复制的一个原因。正如在"),s(n,{to:"/book/ddia/part-ii.html"},{default:l(()=>[a("第二部分")]),_:1}),a("的介绍中提到的，另一个原因是可伸缩性（处理比单个机器更多的请求）和延迟（让副本在地理位置上更接近用户）。")]),ee,e("ul",null,[ae,se,e("li",null,[te,e("p",null,[a("时间戳可以是逻辑时间戳（指示写入顺序的东西，例如日志序列号）或实际系统时钟（在这种情况下，时钟同步变得至关重要；请参阅“"),s(n,{to:"/book/ddia/ch8.html#%E4%B8%8D%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%97%B6%E9%92%9F"},{default:l(()=>[a("不可靠的时钟")]),_:1}),a("”）。")])]),ne]),le,e("p",null,[a("​ 这是"),re,a("（"),oe,a("）数据库中的一个特殊问题，将在"),s(n,{to:"/book/ddia/ch6.html"},{default:l(()=>[a("第六章")]),_:1}),a("中讨论。如果数据库总是以相同的顺序应用写入，则读取总是会看到一致的前缀，所以这种异常不会发生。但是在许多分布式数据库中，不同的分区独立运行，因此不存在"),ie,a("：当用户从数据库中读取数据时，可能会看到数据库的某些部分处于较旧的状态，而某些处于较新的状态。")]),pe,e("p",null,[a("​ 现在还没有一个现成的答案，但在接下来的章节中，我们将更好地了解这个问题。我们将在"),s(n,{to:"/book/ddia/ch7.html"},{default:l(()=>[a("第七章")]),_:1}),a("中看到更多的冲突示例，在"),s(n,{to:"/book/ddia/ch12.html"},{default:l(()=>[a("第十二章")]),_:1}),a("中我们将讨论用于检测和解决复制系统中冲突的可伸缩方法。")]),ce,e("p",null,[a("​ 这是一个因果关系的问题，类似于我们在“"),he,a("”中看到的：更新取决于先前的插入，所以我们需要确保所有节点先处理插入，然后再处理更新。仅仅在每一次写入时添加一个时间戳是不够的，因为时钟不可能被充分地同步，以便在主库2处正确地排序这些事件（见"),s(n,{to:"/book/ddia/ch8.html"},{default:l(()=>[a("第八章")]),_:1}),a("）。")]),me,de,ge,e("blockquote",null,[e("p",null,[a("集群中可能有多于n的节点。（集群的机器数可能多于副本数目），但是任何给定的值只能存储在n个节点上。这允许对数据集进行分区，从而可以支持比单个节点的存储能力更大的数据集。我们将在"),s(n,{to:"/book/ddia/ch6.html"},{default:l(()=>[a("第六章")]),_:1}),a("继续讨论分区。")])]),ue,fe,_e,be,ye,we,ke,Ee,Ae,xe,Be,e("ul",null,[De,Me,Se,ve,Ce,e("li",null,[a("即使一切工作正常，有时也会不幸地出现关于"),Re,a(" 的边缘情况，我们将在“"),s(n,{to:"/book/ddia/ch9.html#%E7%BA%BF%E6%80%A7%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E6%B3%95%E5%AE%9A%E4%BA%BA%E6%95%B0"},{default:l(()=>[a("线性一致性和法定人数")]),_:1}),a("”中看到这点。")])]),Le,e("p",null,[a("​ 尤其是，因为通常没有得到“"),Pe,a("”中讨论的保证（读己之写，单调读，一致前缀读），前面提到的异常可能会发生在应用程序中。更强有力的保证通常需要"),Ie,a("或"),Te,a("。我们将在"),s(n,{to:"/book/ddia/ch7.html"},{default:l(()=>[a("第七章")]),_:1}),a("和"),s(n,{to:"/book/ddia/ch9.html"},{default:l(()=>[a("第九章")]),_:1}),a("回到这些话题。")]),Fe,We,Oe,e("p",null,[a("​ LWW实现了最终收敛的目标，但以"),Je,a("为代价：如果同一个Key有多个并发写入，即使它们报告给客户端的都是成功（因为它们被写入 w 个副本），也只有一个写入将存活，而其他写入将被静默丢弃。此外，LWW甚至可能会删除不是并发的写入，我们将在的“"),s(n,{to:"/book/ddia/ch8.html#%E6%9C%89%E5%BA%8F%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3"},{default:l(()=>[a("有序事件的时间戳")]),_:1}),a("”中讨论。")]),Qe,e("blockquote",null,[Ge,e("p",null,[a("​ 如果两个操作 "),Ne,a(" 发生，似乎应该称为并发——但事实上，它们在字面时间上重叠与否并不重要。由于分布式系统中的时钟问题，现实中是很难判断两个事件是否"),He,a("发生的，这个问题我们将在"),s(n,{to:"/book/ddia/ch8.html"},{default:l(()=>[a("第八章")]),_:1}),a("中详细讨论。")]),Ve,qe]),ze,e("p",null,[a("​ 然而，如果你想让人们也可以从他们的购物车中"),Ke,a("东西，而不是仅仅添加东西，那么把兄弟求并集可能不会产生正确的结果：如果你合并了两个兄弟购物车，并且只在其中一个兄弟值里删掉了它，那么被删除的项目会重新出现在并集终值中【37】。为了防止这个问题，一个项目在删除时不能简单地从数据库中删除；相反，系统必须留下一个具有合适版本号的标记，以指示合并兄弟时该项目已被删除。这种删除标记被称为"),je,a("。 （我们之前在“"),s(n,{to:"/book/ddia/ch3.html#%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95"},{default:l(()=>[a("哈希索引”")]),_:1}),a("中的日志压缩的上下文中看到了墓碑。）")]),Ue,e("ol",null,[e("li",null,[e("p",null,[a("Bruce G. Lindsay, Patricia Griffiths Selinger, C. Galtieri, et al.: “"),e("a",Xe,[a("Notes on Distributed Databases"),s(t)]),a(",” IBM Research, Research Report RJ2571(33471), July 1979.")])]),e("li",null,[e("p",null,[a("“"),e("a",Ye,[a("Oracle Active Data Guard Real-Time Data Protection and Availability"),s(t)]),a(",” Oracle White Paper, June 2013.")])]),e("li",null,[e("p",null,[a("“"),e("a",Ze,[a("AlwaysOn Availability Groups"),s(t)]),a(",” in "),$e,a(", Microsoft, 2012.")])]),e("li",null,[e("p",null,[a("Lin Qiao, Kapil Surlaker, Shirshanka Das, et al.: “"),e("a",ea,[a("On Brewing Fresh Espresso: LinkedIn’s Distributed Data Serving Platform"),s(t)]),a(",” at "),aa,a(" (SIGMOD), June 2013.")])]),e("li",null,[e("p",null,[a("Jun Rao: “"),e("a",sa,[a("Intra-Cluster Replication for Apache Kafka"),s(t)]),a(",” at "),ta,a(", February 2013.")])]),e("li",null,[e("p",null,[a("“"),e("a",na,[a("Highly Available Queues"),s(t)]),a(",” in "),la,a(", Pivotal Software, Inc., 2014.")])]),e("li",null,[e("p",null,[a("Yoshinori Matsunobu: “"),e("a",ra,[a("Semi-Synchronous Replication at Facebook"),s(t)]),a(",” "),oa,a(", April 1, 2014.")])]),e("li",null,[e("p",null,[a("Robbert van Renesse and Fred B. Schneider: “"),e("a",ia,[a("Chain Replication for Supporting High Throughput and Availability"),s(t)]),a(",” at "),pa,a(" (OSDI), December 2004.")])]),e("li",null,[e("p",null,[a("Jeff Terrace and Michael J. Freedman: “"),e("a",ca,[a("Object Storage on CRAQ: High-Throughput Chain Replication for Read-Mostly Workloads"),s(t)]),a(",” at "),ha,a(" (ATC), June 2009.")])]),e("li",null,[e("p",null,[a("Brad Calder, Ju Wang, Aaron Ogus, et al.: “"),e("a",ma,[a("Windows Azure Storage: A Highly Available Cloud Storage Service with Strong Consistency"),s(t)]),a(",” at "),da,a(" (SOSP), October 2011.")])]),e("li",null,[e("p",null,[a("Andrew Wang: “"),e("a",ga,[a("Windows Azure Storage"),s(t)]),a(",” "),ua,a(", February 4, 2016.")])]),e("li",null,[e("p",null,[a("“"),e("a",fa,[a("Percona Xtrabackup - Documentation"),s(t)]),a(",” Percona LLC, 2014.")])]),e("li",null,[e("p",null,[a("Jesse Newland: “"),e("a",_a,[a("GitHub Availability This Week"),s(t)]),a(",” "),ba,a(", September 14, 2012.")])]),e("li",null,[e("p",null,[a("Mark Imbriaco: “"),e("a",ya,[a("Downtime Last Saturday"),s(t)]),a(",” "),wa,a(", December 26, 2012.")])]),e("li",null,[e("p",null,[a("John Hugg: “"),e("a",ka,[a("‘All in’ with Determinism for Performance and Testing in Distributed Systems"),s(t)]),a(",” at "),Ea,a(", September 2015. Amit Kapila: “"),e("a",Aa,[a("WAL Internals of PostgreSQL"),s(t)]),a(",” at "),xa,a(" (PGCon), May 2012.")])]),e("li",null,[e("p",null,[e("a",Ba,[Da,s(t)]),a(". Oracle, 2014.")])]),e("li",null,[e("p",null,[a("Yogeshwer Sharma, Philippe Ajoux, Petchean Ang, et al.: “"),e("a",Ma,[a("Wormhole: Reliable Pub-Sub to Support Geo-Replicated Internet Services"),s(t)]),a(",” at "),Sa,a(" (NSDI), May 2015.")])]),e("li",null,[e("p",null,[a("“"),e("a",va,[a("Oracle GoldenGate 12c: Real-Time Access to Real-Time Information"),s(t)]),a(",” Oracle White Paper, October 2013.")])]),e("li",null,[e("p",null,[a("Shirshanka Das, Chavdar Botev, Kapil Surlaker, et al.: “"),e("a",Ca,[a("All Aboard the Databus!"),s(t)]),a(",” at "),Ra,a(" (SoCC), October 2012.")])]),e("li",null,[e("p",null,[a("Greg Sabino Mullane: “"),e("a",La,[a("Version 5 of Bucardo Database Replication System"),s(t)]),a(",” "),Pa,a(", June 23, 2014.")])]),e("li",null,[e("p",null,[a("Werner Vogels: “"),e("a",Ia,[a("Eventually Consistent"),s(t)]),a(",” "),Ta,a(", volume 6, number 6, pages 14–19, October 2008. "),e("a",Fa,[a("doi:10.1145/1466443.1466448"),s(t)])])]),e("li",null,[e("p",null,[a("Douglas B. Terry: “"),e("a",Wa,[a("Replicated Data Consistency Explained Through Baseball"),s(t)]),a(",” Microsoft Research, Technical Report MSR-TR-2011-137, October 2011.")])]),e("li",null,[e("p",null,[a("Douglas B. Terry, Alan J. Demers, Karin Petersen, et al.: “"),e("a",Oa,[a("Session Guarantees for Weakly Consistent Replicated Data"),s(t)]),a(",” at "),Ja,a(" (PDIS), September 1994. "),e("a",Qa,[a("doi:10.1109/PDIS.1994.331722"),s(t)])])]),Ga,e("li",null,[e("p",null,[a("“"),e("a",Na,[a("Tungsten Replicator"),s(t)]),a(",” Continuent, Inc., 2014.")])]),e("li",null,[e("p",null,[a("“"),e("a",Ha,[a("BDR 0.10.0 Documentation"),s(t)]),a(",” The PostgreSQL Global Development Group, "),Va,a(", 2015.")])]),e("li",null,[e("p",null,[a("Robert Hodges: “"),e("a",qa,[a("If You "),za,a(" Deploy Multi-Master Replication, Read This First"),s(t)]),a(",” "),Ka,a(", March 30, 2012.")])]),ja,e("li",null,[e("p",null,[a("AppJet, Inc.: “"),e("a",Ua,[a("Etherpad and EasySync Technical Manual"),s(t)]),a(",” "),Xa,a(", March 26, 2011.")])]),e("li",null,[e("p",null,[a("John Day-Richter: “"),e("a",Ya,[a("What’s Different About the New Google Docs: Making Collaboration Fast"),s(t)]),a(",” "),Za,a(", 23 September 2010.")])]),e("li",null,[e("p",null,[a("Martin Kleppmann and Alastair R. Beresford: “"),e("a",$a,[a("A Conflict-Free Replicated JSON Datatype"),s(t)]),a(",” arXiv:1608.03960, August 13, 2016.")])]),e("li",null,[e("p",null,[a("Frazer Clement: “"),e("a",es,[a("Eventual Consistency – Detecting Conflicts"),s(t)]),a(",” "),as,a(", October 20, 2011.")])]),e("li",null,[e("p",null,[a("Robert Hodges: “"),e("a",ss,[a("State of the Art for MySQL Multi-Master Replication"),s(t)]),a(",” at "),ts,a(", April 2013.")])]),e("li",null,[e("p",null,[a("John Daily: “"),e("a",ns,[a("Clocks Are Bad, or, Welcome to the Wonderful World of Distributed Systems"),s(t)]),a(",” "),ls,a(", November 12, 2013.")])]),e("li",null,[e("p",null,[a("Riley Berton: “"),e("a",rs,[a("Is Bi-Directional Replication (BDR) in Postgres Transactional?"),s(t)]),a(",” "),os,a(", January 4, 2016.")])]),e("li",null,[e("p",null,[a("Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, et al.: “"),e("a",is,[a("Dynamo: Amazon's Highly Available Key-Value Store"),s(t)]),a(",” at "),ps,a(" (SOSP), October 2007.")])]),e("li",null,[e("p",null,[a("Marc Shapiro, Nuno Preguiça, Carlos Baquero, and Marek Zawirski: “"),e("a",cs,[a("A Comprehensive Study of Convergent and Commutative Replicated Data Types"),s(t)]),a(",” INRIA Research Report no. 7506, January 2011.")])]),e("li",null,[e("p",null,[a("Sam Elliott: “"),e("a",hs,[a("CRDTs: An UPDATE (or Maybe Just a PUT)"),s(t)]),a(",” at "),ms,a(", October 2013.")])]),e("li",null,[e("p",null,[a("Russell Brown: “"),e("a",ds,[a("A Bluffers Guide to CRDTs in Riak"),s(t)]),a(",” "),gs,a(", October 28, 2013.")])]),e("li",null,[e("p",null,[a("Benjamin Farinier, Thomas Gazagnaire, and Anil Madhavapeddy: “"),e("a",us,[a("Mergeable Persistent Data Structures"),s(t)]),a(",” at "),fs,a(" (JFLA), January 2015.")])]),e("li",null,[e("p",null,[a("Chengzheng Sun and Clarence Ellis: “"),e("a",_s,[a("Operational Transformation in Real-Time Group Editors: Issues, Algorithms, and Achievements"),s(t)]),a(",” at "),bs,a(" (CSCW), November 1998.")])]),e("li",null,[e("p",null,[a("Lars Hofhansl: “"),e("a",ys,[a("HBASE-7709: Infinite Loop Possible in Master/Master Replication"),s(t)]),a(",” "),ws,a(", January 29, 2013.")])]),e("li",null,[e("p",null,[a("David K. Gifford: “"),e("a",ks,[a("Weighted Voting for Replicated Data"),s(t)]),a(",” at "),Es,a(" (SOSP), December 1979. "),e("a",As,[a("doi:10.1145/800215.806583"),s(t)])])]),e("li",null,[e("p",null,[a("Heidi Howard, Dahlia Malkhi, and Alexander Spiegelman: “"),e("a",xs,[a("Flexible Paxos: Quorum Intersection Revisited"),s(t)]),a(",” "),Bs,a(", August 24, 2016.")])]),e("li",null,[e("p",null,[a("Joseph Blomstedt: “"),e("a",Ds,[a("Re: Absolute Consistency"),s(t)]),a(",” email to "),Ms,a(" mailing list, "),Ss,a(", January 11, 2012.")])]),e("li",null,[e("p",null,[a("Joseph Blomstedt: “"),e("a",vs,[a("Bringing Consistency to Riak"),s(t)]),a(",” at "),Cs,a(", October 2012.")])]),e("li",null,[e("p",null,[a("Peter Bailis, Shivaram Venkataraman, Michael J. Franklin, et al.: “"),e("a",Rs,[a("Quantifying Eventual Consistency with PBS"),s(t)]),a(",” "),Ls,a(", volume 57, number 8, pages 93–102, August 2014. "),e("a",Ps,[a("doi:10.1145/2632792"),s(t)])])]),e("li",null,[e("p",null,[a("Jonathan Ellis: “"),e("a",Is,[a("Modern Hinted Handoff"),s(t)]),a(",” "),Ts,a(", December 11, 2012.")])]),e("li",null,[e("p",null,[a("“"),e("a",Fs,[a("Project Voldemort Wiki"),s(t)]),a(",” "),Ws,a(", 2013.")])]),e("li",null,[e("p",null,[a("“"),e("a",Os,[a("Apache Cassandra 2.0 Documentation"),s(t)]),a(",” DataStax, Inc., 2014.")])]),e("li",null,[e("p",null,[a("“"),e("a",Js,[a("Riak Enterprise: Multi-Datacenter Replication"),s(t)]),a(".” Technical whitepaper, Basho Technologies, Inc., September 2014.")])]),e("li",null,[e("p",null,[a("Jonathan Ellis: “"),e("a",Qs,[a("Why Cassandra Doesn't Need Vector Clocks"),s(t)]),a(",” "),Gs,a(", September 2, 2013.")])]),e("li",null,[e("p",null,[a("Leslie Lamport: “"),e("a",Ns,[a("Time, Clocks, and the Ordering of Events in a Distributed System"),s(t)]),a(",” "),Hs,a(", volume 21, number 7, pages 558–565, July 1978. "),e("a",Vs,[a("doi:10.1145/359545.359563"),s(t)])])]),e("li",null,[e("p",null,[a("Joel Jacobson: “"),e("a",qs,[a("Riak 2.0: Data Types"),s(t)]),a(",” "),zs,a(", March 23, 2014.")])]),e("li",null,[e("p",null,[a("D. Stott Parker Jr., Gerald J. Popek, Gerard Rudisin, et al.: “"),e("a",Ks,[a("Detection of Mutual Inconsistency in Distributed Systems"),s(t)]),a(",” "),js,a(", volume 9, number 3, pages 240–247, May 1983. "),e("a",Us,[a("doi:10.1109/TSE.1983.236733"),s(t)])])]),e("li",null,[e("p",null,[a("Nuno Preguiça, Carlos Baquero, Paulo Sérgio Almeida, et al.: “"),e("a",Xs,[a("Dotted Version Vectors: Logical Clocks for Optimistic Replication"),s(t)]),a(",” arXiv:1011.5808, November 26, 2010.")])]),e("li",null,[e("p",null,[a("Sean Cribbs: “"),e("a",Ys,[a("A Brief History of Time in Riak"),s(t)]),a(",” at "),Zs,a(", October 2014.")])]),e("li",null,[e("p",null,[a("Russell Brown: “"),e("a",$s,[a("Vector Clocks Revisited Part 2: Dotted Version Vectors"),s(t)]),a(",” "),et,a(", November 10, 2015.")])]),e("li",null,[e("p",null,[a("Carlos Baquero: “"),e("a",at,[a("Version Vectors Are Not Vector Clocks"),s(t)]),a(",” "),st,a(", July 8, 2011.")])]),e("li",null,[e("p",null,[a("Reinhard Schwarz and Friedemann Mattern: “"),e("a",tt,[a("Detecting Causal Relationships in Distributed Computations: In Search of the Holy Grail"),s(t)]),a(",” "),nt,a(", volume 7, number 3, pages 149–174, March 1994. "),e("a",lt,[a("doi:10.1007/BF02277859"),s(t)])])])]),rt,e("table",null,[ot,e("tbody",null,[e("tr",null,[e("td",it,[s(n,{to:"/book/ddia/part-ii.html"},{default:l(()=>[a("第二部分：分布式数据")]),_:1})]),e("td",pt,[s(n,{to:"/book/ddia/DDIA_README.html"},{default:l(()=>[a("设计数据密集型应用")]),_:1})]),e("td",ct,[s(n,{to:"/book/ddia/ch6.html"},{default:l(()=>[a("第六章：分区")]),_:1})])])])]),ht,e("section",mt,[e("ol",dt,[gt,e("li",ut,[e("p",null,[a("如果数据库被分区（见"),s(n,{to:"/book/ddia/ch6.html"},{default:l(()=>[a("第六章")]),_:1}),a("），每个分区都有一个领导。 不同的分区可能在不同的节点上有其领导者，但是每个分区必须有一个领导者节点。 "),ft])]),e("li",_t,[e("p",null,[a("不要与星型模式混淆（请参阅“"),s(n,{to:"/book/ddia/ch3.html#%E6%98%9F%E5%9E%8B%E5%92%8C%E9%9B%AA%E8%8A%B1%E5%9E%8B%EF%BC%9A%E5%88%86%E6%9E%90%E7%9A%84%E6%A8%A1%E5%BC%8F"},{default:l(()=>[a("星型和雪花型：分析的模式")]),_:1}),a("”），其中描述了数据模型的结构，而不是节点之间的通信拓扑。 "),bt])]),yt])])])}const Bt=i(D,[["render",wt],["__file","ch5.html.vue"]]);export{Bt as default};
