import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c,a as n,b as s,d as l,f as a}from"./app-HHaGRXeI.js";const i={},u=n("h1",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),r=n("h2",{id:"思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思路","aria-hidden":"true"},"#"),s(" 思路")],-1),k=a(`<li><p>对于 <code>int</code> 数据处理可考虑：</p><ul><li>排序</li><li>位运算，如异或</li><li>数学规律</li></ul></li><li><p>递归【以中间情况来思考】</p></li><li><p>从后往前！！比如在特定空间排序</p></li><li><p>左右匹配：可用栈，左值直接入栈，右值与栈尾匹配</p></li><li><p><code>连续长度的最值问题</code>优先考虑<code>滑动窗口</code></p></li><li><p>对于多种走法的最值问题大多数情况下优先考虑BFS，如果用BFS解决不了再考虑DFS。 对于多种走法的概率或种数问题则考虑用动态规划。</p></li><li><p>利用位运算：</p><ul><li><p>奇偶判断：&amp;1 -&gt; 与运算</p></li><li><p>2倍运算：利用 &gt;&gt;n -&gt; /2^n，n&lt;&lt; -&gt;*2^n</p></li></ul></li><li><p>由于python的特性，或许在一开始就申请完空间会比采用append更高效</p></li><li><p>首尾指针：left, right = 0, length - 1; left &lt; right</p></li><li><p>快慢指针：slow, fast = 0, 0; fast走的快</p></li><li><p>快排的base可以取nums[low]/nums[high]</p><p>对应：需要注意取nums[low]则需先从从高位开始向前，取nums[high]则需先从低位向后。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> low<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> high<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> low <span class="token operator">&gt;=</span> high<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    i<span class="token punctuation">,</span> j <span class="token operator">=</span> low<span class="token punctuation">,</span> high  <span class="token comment"># 对应</span>
    base <span class="token operator">=</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j <span class="token keyword">and</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> base<span class="token punctuation">:</span>  <span class="token comment"># 对应</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base<span class="token punctuation">:</span>  <span class="token comment"># 对应</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> base
    quick_sort<span class="token punctuation">(</span>low<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    quick_sort<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>巧妙利用 短路特性</p></li><li><p>搜索二叉树与中序遍历，左小右大</p></li><li><p>完全二叉树叶子节点为所有节点的一半</p></li><li><p>建立【大顶堆/小顶堆】只能保证堆顶的【最大/最小值】</p></li>`,15),d={href:"https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[n("p",null,"HashMap用于解决匹配问题，如两数之和等")],-1),v=n("li",null,null,-1),b=a(`<h2 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h2><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><p><code>调研快排</code></p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>base<span class="token punctuation">,</span><span class="token class-name">size_t</span> num<span class="token punctuation">,</span><span class="token class-name">size_t</span> width<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">(</span>__cdecl<span class="token operator">*</span>compare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 一般写法：qsort(nums, numsSize, sizeof(int), comp)</span>
<span class="token comment">// 其中的对比函数一般如下</span>
<span class="token keyword">int</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python</h3><p><code>字符串反转</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 1.使用字符串切片</span>
<span class="token builtin">str</span><span class="token operator">=</span><span class="token string">&#39;Runoob&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 2.使用 reversed()，fan&#39;h</span>
<span class="token builtin">str</span><span class="token operator">=</span><span class="token string">&#39;Runoob&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 3.reduce + lambda 反转法</span>
<span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>

<span class="token builtin">str</span><span class="token operator">=</span><span class="token string">&#39;Runoob&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>字符串大小写转换</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;aa.bb.CC&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># 把所有字符中的小写字母转换成大写字母</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># 把所有字符中的大写字母转换成小写字母</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 把第一个字母转化为大写字母，其余小写</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># 把每个单词的第一个字母转化为大写，其余小写</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
AA.BB.CC
aa.bb.cc
Aa.bb.cc
Aa.Bb.Cc
&#39;&#39;&#39;</span>

<span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span>   <span class="token comment"># 将ASCLL码转为字符</span>
<span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 将字符转为ASCLL码，&#39;0&#39;-&gt;48，&#39;A&#39;-&gt;65</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function h(y,w){const p=e("ExternalLinkIcon");return o(),c("div",null,[u,r,n("ol",null,[k,n("li",null,[n("p",null,[s("线段树？"),n("a",d,[s("最大子序和 - 最大子数组和 - 力扣（LeetCode） (leetcode-cn.com)"),l(p)])])]),m,v]),b])}const f=t(i,[["render",h],["__file","tips.html.vue"]]);export{f as default};
