import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as e,c as p,a as n,b as s,d as t,f as o}from"./app-HHaGRXeI.js";const c={},u=o(`<h1 id="操作系统练习" tabindex="-1"><a class="header-anchor" href="#操作系统练习" aria-hidden="true">#</a> 操作系统练习</h1><h2 id="exercise-1" tabindex="-1"><a class="header-anchor" href="#exercise-1" aria-hidden="true">#</a> Exercise 1</h2><ol><li>在多道程序和分时环境中，多个用户同时共享一个系统，这种情况会导致许多安全问题，因此操作系统中必须加以解决。这些安全问题包括： <ul><li><mark>窃取或者复制某用户的程序或数据。</mark></li><li>无法使用独占资源。</li><li>难以提供给计算机用户一个方便的程序执行环境。</li><li><mark>未能正确地对使用资源（CPU，内存，磁盘空间等外围设备）情况进行记帐。</mark></li></ul></li><li>在多道程序和分时环境中，多个用户同时共享一个系统，这种情况导致多种安全问题。在一个分时机器中，能否确保像专用的单机上一样的安全性？ <ul><li>可能不行，因为人们设计的任何保护机制都会不可避免的被别人所破译，而且程序设计人员无法确保所设计的程序是没有漏洞的。</li></ul></li><li>计算机系统中为什么要引入中断（interupt），它的目的是什么？请选出正确的描述。 <ul><li>中断处理装置能识别出中断的类型，转而运行相应的中断处理例程。完成中断处理后再返回到原来被中断处继续执行指令。</li><li>I/O操作完成后可以通过中断向CPU发出信号，从而避免只能通过程序查询的方式进行I/O操作。</li><li>中断是计算机系统内部一种由硬件产生的信号，用来改变CPU执行指令的控制流。</li></ul></li><li>中断和陷阱之间的区别有哪些？ <ul><li>陷阱(trap)是软件产生的中断。</li><li>I/O操作完成后可以通过中断向CPU发出信号，从而避免只能通过程序查询的方式进行I/O操作。</li></ul></li><li>陷阱指令可以由用户程序有意地发出？ <ul><li>正确</li></ul></li><li>用户程序有意地发出一个陷阱指令，其目的是什么? <ul><li>调用操作系统功能。</li><li>捕获硬件错误。</li><li>表示一个I/O操作的完成。</li></ul></li><li>请列出批处理系统的基本特点： <ul><li>具有相似需求的作业被成批地集合起来，并把它们作为一个整体由操作员或自动作业控制程序控制运行。</li><li>通过缓冲区，脱机操作、SPOOLing和多道程序设计等技术，使CPU和I/O设备尽量繁忙地工作，从而提高系统的整体性能。</li><li>批处理对于那些交互性较少、而更需要长时间运行的任务来讲最为适合。</li></ul></li><li>请列出交互式系统的基本特点： <ul><li>这种系统中响应时间要尽量地小（秒级），因为用户提交一个请求后，等着马上要得到结果。</li><li>这种系统由许多个短小的事务组成，每个事务的处理结果及下一个要处理哪个事务均是不可预测的。</li></ul></li><li>请列出分时系统的基本特点： <ul><li>CPU能从一个用户快速地切换给另一个用户。</li><li>这类系统直接从终端读取控制信息，而把结果直接显示在终端屏幕上。</li><li>这类系统采用CPU调度和多道程序设计技术来提供交互式的操作，使系统有很好的经济性。</li></ul></li><li>请列出实时系统的基本特点： <ul><li>这类系统要求有很好的交互性。</li><li>这类系统要求有很好的过载保护能力。</li><li>这类系统往往在专用应用系统中使用，它通常从传感器获取输入信息，然后在规定的时间范围内进行处理并作出响应，以确保系统的设计性能。</li></ul></li><li>请列出网络操作系统的基本特点： <ul><li>运行网络操作系统的计算机是自治的。</li><li>通过网络来提供操作系统的功能，如提供文件共享。</li></ul></li><li>请列出并行系统的基本特点： <ul><li>系统的处理机之间通过系统总线进行通信。</li><li>有许多处理机构成，每一个处理机都运行同一个操作系统的拷贝。</li></ul></li><li>请列出分布式系统的基本特点： <ul><li>系统中的处理机不共享内存和时钟。</li><li>系统中的每个处理机都有自己的本地内存。</li><li>处理机间通过不同用途的通信网络进行通信，如高速总线、LAN等。</li><li>这种系统能将处理任务分布到几个物理的处器机中去运行。</li></ul></li><li>请列出集群系统的基本特点： <ul><li>集群系统是将多个计算机耦合成一个单一系统来处理计算任务的系统，它可将计算任务分布到集群结点中进行处理。</li></ul></li><li>请列出手持式系统的基本特点： <ul><li>一种可以完成像记事本，email和网页浏览等简单任务的小型计算机系统。</li><li>不同于传统的台式计算机，手持系统只有较小的内存和屏幕，处理器运算速率也慢些。</li></ul></li></ol><h2 id="exercise-2" tabindex="-1"><a class="header-anchor" href="#exercise-2" aria-hidden="true">#</a> Exercise 2</h2><ol><li>差错检测是操作系统提供给用户的一项基本服务，它可以使用户使用计算机更加方便。请在下列陈述中选择有关差错检测的正确描述。 <ul><li>有了操作系统中的差错检测功能，进程中就不再需要包含用来捕获及纠正系统中可能出现的差错的处理代码。</li><li>在软件层面上，必须检查介质以保证数据一致性，如，按设备中存贮块总量的比例对存贮块进行若干次的分配和回收，以检查数据是否一致。差错经常是独立产生的（如，磁盘中数据的损坏），因此必须有一个全局的程序（操作系统）来处理所有差错。</li><li>差错检测在硬件、软件层面上都需要进行。</li><li>在硬件层面上，所有数据在传送时都需要进行检查以确保在传输过程中不产生差错。在存贮介质中的数据也必须进行检查，以保证写入到介质中的数据没有被修改过。</li></ul></li><li>操作系统中关于文件管理的五个主要操作是什么？ <ul><li>提供对操纵文件和目录的原语支持</li><li>创建和删除文件</li><li>将文件映射到二级存储器上</li><li>创建和删除目录</li><li>在稳定（非易失的）存储媒介上备份文件</li></ul></li><li>针对命令解释器的如下陈述，哪些是正确的？ <ul><li>通过系统调用，用户程序可以访问操作系统中的所有功能，因此用户可以开发一个新的命令解释器。</li><li>命令解释器从用户或命令文件中读取命令并执行，一般把他们转化一个或多个系统调用加以执行。</li><li>命令解释器通常会按需要增删某些功能，因此它一般不属于系统的核心。</li><li>每个用户都可以使用由操作系统提供的系统调用接口来开发一个新的命令解释器，如命令解释器允许用户创建、管理进程，并且确定它们通信的方式（如通过管道或文件）。</li></ul></li><li>针对操作系统设计者来讲，使用虚拟机体系结构哪些好处？ <ul><li>系统很易调试，安全问题也容易解决。</li><li>虚拟机为操作系统的研究提供了一个很好的平台，它使得许多不同的操作系统可以在一台物理机上执行。</li></ul></li></ol><h2 id="exercise-3" tabindex="-1"><a class="header-anchor" href="#exercise-3" aria-hidden="true">#</a> Exercise 3</h2><ol><li><p>关于短期、中期和长期调度，下列哪些陈述是正确的？</p><ul><li>长期调度（作业调度）：确定哪些作业调入内存执行。</li><li>短期调度程序必须频繁地为CPU选择新进程；长期调度程序则执行频率要低得多，因为它通常选择了一个作业后，要等有作业完成或有新作业到达时才再次启动进行调度。</li><li>中期调度通常用于分时系统。它作为一种中等程度的调度，在计算机资源竞争激烈时将部分运行程序从内存移出，降低多道程序设计的程度。等竞争趋缓时再把它们调入，从原被中断处继续执行。</li><li>短期调度(CPU调度)：在内存作业中选择就绪状态的进程，分配CPU给它，使之执行。</li><li>短期、中期和长期调度的主要不同之处是执行频率。</li></ul></li><li><p>内核在两个进程上下文切换时会做哪些动作？</p><ul><li>总的来说，操作系统必须先保存当前运行进程的状态，然后再恢复下一个将运行的进程的状态。</li><li>保存进程的状态主要包括CPU所有寄存器的值以及内存分配情况。</li><li>上下文切换时必须执行一些与结构相关的操作，如刷新数据和指令的缓存。</li></ul></li><li><p>有一段程序如下：</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;sys/types.h&gt;  //  pid_t
#include &lt;sys/wait.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;cstdlib&gt;

int value = 5;
int main() {
	pid_t pid;
	pid = fork();
	if (pid == 0) {   // 子进程
		value += 15;  // 数据、堆、栈都将被复制，因此在子进程中的value和主进程互不影响
        printf(&quot;CHILD: value = %d\\n&quot;, value);
        execlp(&quot;/bin/ls&quot;, &quot;ls&quot;, NULL);  // 替换子进程环境，下面的命令将不被执行
        printf(&quot;child test\\n&quot;);
	}
	else if (pid &gt; 0) {  // 父进程
		// for (int i = 0; i &lt; 100000; i++){}
        printf(&quot;parent test\\n&quot;);
		wait(NULL);      // 等待回收子进程
		printf(&quot;PARENT: value = %d\\n&quot;, value);
		exit(0);         // 终止当前进程
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>行A将输出什么？</p><ul><li><p>parent test</p><p>CHILD: value = 20</p><p>PARENT: value = 5</p></li><li><p>或者【父进程wait(NULL)前的命令与子进程运行快慢顺序不定】</p></li><li><p>CHILD: value = 20</p><p>parent test</p><p>PARENT: value = 5</p></li></ul></li></ol><h2 id="test-1" tabindex="-1"><a class="header-anchor" href="#test-1" aria-hidden="true">#</a> TEST 1</h2><blockquote><p>12、14 待解决</p></blockquote><ol><li>操作系统的主要目的是管理计算机系统资源和管理用户。 <ul><li>错误</li><li>【管理电脑硬件与软件资源的程序】</li></ul></li><li>下面的选项中，____________通常不认为是操作系统必须要解决的问题。 <ul><li>管理目录和文件</li><li>提供应用程序接口</li><li>提供保护和安全机制</li><li><mark>提供C语言编译器</mark></li></ul></li><li>下面的选项中，____________通常不认为是操作系统必须要解决的问题。 <ul><li>管理目录和文件</li><li>提供应用程序接口</li><li>提供保护和安全机制</li><li><mark>提供C语言编译器</mark></li></ul></li><li>通常支持多道程序设计的处理机至少有两种状态，核心态和用户态，这样做给操作系统设计带来的好处有： <ul><li>使系统能区分出当前状态下哪些指令是不能运行的，从而限制用户进程的访问空间，保护操作系统。</li><li>方便操作系统区分哪些进程是系统进程，哪些进程是用户进程。</li><li>使用户程序不能访问操作系统程序。</li><li>便于设计安全可靠的操作系统。</li></ul></li><li>下列程序中哪个不适合在用户态下执行： <ul><li>连接程序</li><li>编译程序</li><li>命令解释程序</li><li><mark>缺页处理程序</mark></li></ul></li><li>多道程序设计并不是指________。 <ul><li>把多个程序同时加载到内存，并使他们同时处于运行状态</li><li>同时把多个程序放入内存并允许它们交替执行和共享系统中的各类资源</li><li><mark>一个处理机中，在同一时刻运行多个程序</mark></li><li>一个处理机中，并发运行多个程序</li></ul></li><li>分时操作系统中，若时间片固定，那么__________，则响应时间越长。 <ul><li><mark>用户数越多</mark></li><li>内存越多</li><li>用户数越少</li><li>内存越少</li></ul></li><li>实时控制系统通常只适用生产过程的自动化控制，不能用于监测制导等控制。 <ul><li>错误</li></ul></li><li>下列系统中，通常哪类系统的交互性最差？ <ul><li>交互式系统</li><li>实时系统</li><li><mark>批处理系统</mark></li><li>分时系统</li></ul></li><li>操作系统提供给应用程序的接口一般称作： <ul><li>原语</li><li><mark>系统调用</mark></li><li>库函数</li><li>中断</li></ul></li><li>用户在本地终端上通过终端的键盘登陆系统时，首先获得键盘输入信息的程序是： <ul><li><mark>中断处理程序</mark></li><li>命令解释程序</li><li>系统调用程序</li><li>用户登录程序</li></ul></li><li>有以下组合元素：A.进程与进程、B.处理机与外部设备、C.处理机与通信设备、D.外部设备与外部设备。请指出在单处理机系统中，可并行处理的组合是： <ul><li>A、B、C</li><li>A、B、D【错的】</li><li>A、C、D</li><li>B、C、D</li></ul></li><li>软中断是不可屏蔽中断，对吗？ <ul><li>错误</li></ul></li><li>计算机系统中保护操作系统是很重要的一项工作。但为了向用户提供更大的灵活性，通常会尽可能少地对用户加以限制。试问下面的这些指令中至少有哪些指令需加以保护？【5.1/6分】 <ul><li>切换到用户模式</li><li>从存放操作系统的存储区上读取数据</li><li><mark>关闭时钟中断</mark></li><li><mark>打开时钟中断</mark></li><li>从存储操作系统代码区中取指令</li><li><mark>切换到内核模式</mark></li><li><mark>将数据写到操作系统的数据区</mark></li></ul></li><li>若用户程序将读取某硬盘文件的第24号逻辑块，则该请求将使用操作系统提供的__________接口。 <ul><li><mark>系统调用</mark></li><li>图形用户接口</li><li>进程</li><li>库函数</li></ul></li><li>分布式系统的工作模式可以是： <ul><li>集群系统</li><li>C/S系统</li><li>P2P系统</li><li><mark>以上全是</mark></li></ul></li></ol><h2 id="exercise-4" tabindex="-1"><a class="header-anchor" href="#exercise-4" aria-hidden="true">#</a> Exercise 4</h2><ol><li><p>在多线程的进程中，下面的哪些部分是被该进程中的线程共享的？</p><ul><li>堆内存</li><li>全局变量</li></ul></li><li><p>下面的程序使用了Pthread API：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// the thread</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> pid<span class="token punctuation">;</span>
	<span class="token class-name">pthread_t</span> tid<span class="token punctuation">;</span>
	<span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">;</span>

	pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// child process</span>
		<span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> runner<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;CHILD: value = %d&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 行 C</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// parent process</span>
		<span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;PARENT: value = %d&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 行 P</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 执行 gcc Exercise4.cpp -o Exercise4 -lpthread</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该程序的行C和行P将分别输出什么？</p><ul><li>5,0</li></ul></li><li><p>Linux提供了传统的进程复制的系统调用fork()，还提供了创建线程的系统调用clone()，但Linux并未严格区分进程和线程，而是以任务来统一代替进程和线程。调用clone()时，传送给他一组标志，以决定父任务与子任务之间有多少共享，从而实现类似线程的概念。而有些操作系统，例如windows XP和Solaris，对进程和线程都是有区分的。典型地，这些系统采用标记法，为进程定义一个数据结构来记录指向属于该进程的多个不同的线程的指针。对比这两类系统核心中对进程与线程的支持方法，在如Linux这类将进程与线程同等看待的系统中，下列哪些叙述是正确的？</p><ul><li>操作系统的某些代码可以简化。例如，一个调度器可以同等地对待进程和线程，在调度时不需要特别的代码来区分进程与线程。</li><li>在资源管理时，为区分哪些线程属于哪个进程，并实现相关的记帐任务，会增加系统的复杂性。</li><li>这种进程与线程的一致性会使进程资源的管理变得困难。</li></ul></li></ol><h2 id="test-2" tabindex="-1"><a class="header-anchor" href="#test-2" aria-hidden="true">#</a> TEST 2</h2><ol><li><p>如下程序创建了几个进程？</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  	<span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>6个</li></ul></li><li><p>注释处应该填什么？</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token comment">// 执行 gcc Exercise4.cpp -o Exercise4 -lpthread</span>

<span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">runner</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">runner1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">int</span> pid<span class="token punctuation">;</span>
<span class="token class-name">pthread_t</span> tid<span class="token punctuation">,</span> tid1<span class="token punctuation">;</span>
<span class="token class-name">pthread_attr_t</span> attr<span class="token punctuation">,</span> attr1<span class="token punctuation">;</span>
pid<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr<span class="token punctuation">,</span> runner<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;This is the child. The value is %d &quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出结果为：This is the child. The value is 0</span>

    <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>attr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>attr1<span class="token punctuation">,</span> runner1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;This is the other thread in child. the value is %d &quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//输出结果为：This is the other thread in child. the value is 5</span>

    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid1<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;This is the parent. The value is %d &quot;</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出结果为：This is the parent. The value is 0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">runner</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
val <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value in runner before sleep: %d &quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出结果为：value in runner before sleep: 5</span>

<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value in runner after sleep: %d &quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出结果为：value in runner after sleep: 9</span>

<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">runner1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
val <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>答案如上注释</li></ul></li><li><p>在操作系统的概念中，程序与进程的重要区别之一是_____________。</p><ul><li>程序有运行时的状态而进程没有</li><li>程序可占有资源而进程不能</li><li>进程是静态的而程序是动态的</li><li><mark>进程是动态的而程序是静态的</mark></li></ul><p>Question 1: NA out of 10 in 0 attempt(s)</p><p>采用时间片轮转调度策略时，当处于运行状态的进程用完一个时间片后，它的状态是__________ 。</p><ul><li>消亡</li><li>运行</li><li><mark>阻塞</mark></li><li>就绪</li></ul><p>Question 2: NA out of 10 in 0 attempt(s)</p><p>进程间通信方式很多，包括下面的：</p><ul><li><mark>共享内存机制</mark></li><li><mark>信号量及其原语操作控制的共享存储区通信机制</mark></li><li><mark>信箱和发信收信原语的消息传递通信机制</mark></li><li>高级程序设计语言所提供的通信程序</li><li><mark>信号通信机制</mark></li><li><mark>管道提供的共享通信机制</mark></li></ul><p>Question 3: NA out of 10 in 0 attempt(s)</p><p>一个单处理机系统中，最多只能有一个进程处于运行状态。</p><ul><li>正确</li></ul><p>Question 4: NA out of 10 in 0 attempt(s)</p><p>任何进程都可以调用创建进程原语来创建进程。</p><ul><li>正确</li><li><mark>错误</mark></li></ul><p>Question 5: NA out of 10 in 0 attempt(s)</p><p>有以下操作：A.用户登录成功； B.设备分配； C.启动程序执行。下面的哪个操作的组合标志着创建了新的进程：</p><ul><li>仅A和B</li><li><mark>仅A和C</mark></li><li>仅B和C</li><li>A、B、C</li></ul><p>Question 7: NA out of 10 in 0 attempt(s)</p><p>下面这段C语言的程序，请填入运行到指定语句时输出的结果。 int val=5; main() { pid_t pid; val += 5; if ((pid=fork())&lt;0) {val += 5; exit(1);} if (pid==0) { val += 5; printf(&quot;%d &quot;, val); //输出结果为：。 } else { printf(&quot;%d &quot;, val); //输出结果为：。 exit(0); } }</p><p>Question 8: NA out of 10 in 0 attempt(s)</p><p>同一进程中的线程不能共享的是：</p><ul><li>进程的代码段</li><li>进程所打开的文件</li><li>进程的全局变量</li><li>进程的id</li><li><mark>线程的程序计数器</mark></li><li><mark>进程中线程的栈指针</mark></li></ul></li></ol><h2 id="exercise-5" tabindex="-1"><a class="header-anchor" href="#exercise-5" aria-hidden="true">#</a> Exercise 5</h2><ol><li><p>==？==CPU利用率和响应时间这两个调度准则在某些场景下会有冲突。请判断下列陈述中哪些是正确的？</p><ul><li>降低上下文切换的频率会降低CPU利用率。</li><li><mark>如果上下文切换的开销减少，则CPU利用率会增加。</mark></li><li><mark>提高CPU的利用率可能会增加进程的响应时间。</mark></li><li><mark>降低上下文切换的频率可减少上下文切换的开销。</mark></li><li><mark>降低上下文切换的频率会增加进程的响应时间。</mark></li></ul></li><li><p>平均周转时间和最大等待时间这两个调度准则在某些场景下会有冲突。请判断下列陈述中哪些是正确的？</p><ul><li>最短作业优先的调度策略可能会将运行时间较长的作业饿死，但它们的等待时间可能会缩短。</li><li><mark>最短作业优先的调度策略将获得最小的平均周转时间。</mark></li><li><mark>最短作业优先的调度策略可能会将运行时间较长的作业饿死，从而增加它们的等待时间。</mark></li><li>最长作业优先的调度策略将获得最小的平均周转时间。</li></ul></li><li><p>I/O设备的利用率和CPU利用率这两个调度准则在某些场景下会有冲突。请判断下列陈述中哪些是正确的？</p><ul><li><mark>只要I/O型的进程一就绪，就调度运行该进程，虽然会增加上下文切换的开销，但可获得最大的I/O设备的利用率。</mark></li><li>==只要I/O型的进程一就绪，就调度运行该进程，既增加了上下文切换的开销，也减小了I/O设备的利用率。</li><li>执行运行时间较长的CPU型任务，并且期间不作上下文切换，则将获得最小的CPU利用率。</li></ul></li><li><p>考虑下列进程集，占用的CPU时间长度以毫秒来计算： <img src="http://www.imathas.com/cgi-bin/mimetex.cgi?{\\left[\\matrix{{P}{r}{o}{c}{e}{s}{s}%26{B}{u}{r}{s}{t}{T}{i}{m}{e}%26{P}{r}{i}{\\quad\\text{or}\\quad}{i}{N}{u}{m}{b}{e}{r}\\\\{P}{1}%26{10}%26{3}\\\\{P}{2}%26{1}%26{1}\\\\{P}{3}%26{2}%26{3}\\\\{P}{4}%26{1}%26{4}\\\\{P}{5}%26{5}%26{2}}\\right]}" alt="img"> 假设进程在时刻0以P1，P2，P3，P4，P5的顺序到达。 则对下列调度策略，每个进程的周转时间分别为多少：FCFS, RR (时间片长=1), SJF, 以及非抢占式的优先级调度（小优先数表示高优先级)？</p><ul><li><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204021542980.gif" alt="[(P1),(P2),(P3),(P4),(P5)]"> = <img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204021545581.png" alt="image-20220402154511484" style="zoom:60%;"></li></ul></li><li><p>同上，则对下列调度策略，每个进程的等待时间分别为多少：FCFS, RR (时间片长=1), SJF, 以及非抢占式的优先级调度（小优先数表示高优先级）？</p><ul><li><img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204021542980.gif" alt="(P1),(P2),(P3),(P4),(P5)"> = <img src="https://raw.githubusercontent.com/ET-yzk/picgo/blog/202204021551219.png" alt="image-20220402155130132" style="zoom:60%;"></li></ul></li><li><p>下列哪些调度策略可能会引起饿死?</p><ul><li><mark>优先级调度。</mark></li><li>时间片轮转RR。</li><li>先来先服务FCFS。</li><li><mark>短作业优先SJF。</mark></li></ul></li><li><p>某系统采用多级队列调度策略进行调度，请问用户采取下列哪些措施可从分配给他的CPU时间片中获得最大运行时间？</p><ul><li>放弃使用第一次分配给他的时间片。</li><li>每次都用完分配给他的时间片。</li><li><mark>使用分配给它的时间片中的绝大部分，但在时间片结束前放弃CPU，从而提高与进程有关的优先级。</mark></li><li>使用分配给它的时间片中的一小部分就放弃CPU。</li></ul></li><li><p>在对待短作业的问题上，对下列调度算法：FCFS，RR，多级反馈队列 请选择正确的叙述。</p><p>调度算法</p><ul><li><mark>c</mark> FCFS</li><li><mark>b</mark> 多级反馈队列</li><li><mark>a</mark> RR</li></ul><p>叙述：</p><p>a. 平等对待所有作业（给各作业分配相等的时间片），因此短作业可比较快地处理完成而离开系统。</p><p>b. 该调度算法虽然没有给短作业明显的照顾，但长作业的优先组长会逐步被降低，从而相对而言提高了短作业获得CPU的机会。</p><p>c. 该调度算法未照顾短作业，若短作业在长作业后到达，该短作业会有较长的等待时间。</p></li></ol><h2 id="test-6" tabindex="-1"><a class="header-anchor" href="#test-6" aria-hidden="true">#</a> TEST 6</h2><h3 id="exercise-6" tabindex="-1"><a class="header-anchor" href="#exercise-6" aria-hidden="true">#</a> Exercise 6</h3><h3 id="exercise-7" tabindex="-1"><a class="header-anchor" href="#exercise-7" aria-hidden="true">#</a> Exercise 7</h3><ol><li><p>一种可以预防死锁的办法是为临界资源族设置一个高级别的资源，当进程要申请临界资源族中的资源时，必须先申请该资源。如，当多个线程试图访问同步对象A...E时就有可能会发生死锁（这些同步对象可能包含互斥、信号灯、条件变量等），我们可以引入第6个对象F来预防死锁。当一个线程想对对象A...E中的任何一个上锁时，他必须先对F上锁。这种方案被称作逷制：对象A...E的锁包含于对象F的锁中。 比较这种方案和7.4.4节的循环等待方案，请为下面的空缺选择最合适的答案：这可能是一个 <mark>不好的</mark> 的解决方案，因为它 <mark>扩大管辖范围</mark>。好的解决方案应该是定义一个上锁策略，并尽量地 <mark>缩小管辖范围</mark> 。</p></li><li><p>比较循环等待方案和死锁避免方案（如银行家算法），针对下述相关问题： a. 运行开销 b. 系统呑吐量 请为空白处选择合适的答案：因为要跟踪当前资源的分配情况，一个死锁避免方案可能会 <mark>增加</mark> 运行开销。然而，相对于静态预防死锁的方案，死锁避免方案允许对资源更多的并发访问，因此，死锁避免方案又能 <mark>增加</mark> 系统呑吐量。</p></li><li><p>在一个实际的系统中，无论是可用资源还是进程对资源的需求，都不可能在长时间（如几个月）内保持一致。如资源的损坏或更换，新进程的到来及老进程的撤销，新资源的加入等等。如果采用银行家算法来控制死锁，下面的哪些变化在什么状况下是安全的（不会导致死锁）？</p><ul><li><p>增加可用性（增加新资源）</p><p><mark>这种变化是安全的，不会引起任何问题</mark></p></li><li><p>减少可用性（从系统中撤掉一些资源）</p><p><mark>这种变化会对系统产生影响，它会使系统产生死锁，因为系统需要有一定数量的可用资源</mark></p></li><li><p>增加进程的 Max数（增加进程的资源需求数）</p><p><mark>这种变化会对系统产生影响，并且引发产生死锁的可能</mark></p></li><li><p>减少进程的 Max数（减少进程的资源需求数）</p><p><mark>这种变化是安全的，不会引起任何问题</mark></p></li><li><p>增加进程数</p><p><mark>若资源分配给新进程，而不会使系统进入不安全状态，则这种变化是安全的</mark></p></li><li><p>减少进程数</p><p><mark>这种变化是安全的，不会引起任何问题</mark></p></li></ul></li><li><p>考虑下面的系统快照：</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">Allocation</th><th style="text-align:center;">Max</th><th style="text-align:center;">Available</th></tr></thead><tbody><tr><td style="text-align:center;"></td><td style="text-align:center;">A B C D</td><td style="text-align:center;">A B C D</td><td style="text-align:center;">A B C D</td></tr><tr><td style="text-align:center;">P0</td><td style="text-align:center;">0 0 1 2</td><td style="text-align:center;">0 0 1 2</td><td style="text-align:center;">1 5 2 0</td></tr><tr><td style="text-align:center;">P1</td><td style="text-align:center;">1 0 0 0</td><td style="text-align:center;">1 7 5 0</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">P2</td><td style="text-align:center;">1 3 5 4</td><td style="text-align:center;">2 3 5 6</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">P3</td><td style="text-align:center;">0 6 3 2</td><td style="text-align:center;">0 6 5 2</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">P4</td><td style="text-align:center;">0 0 1 4</td><td style="text-align:center;">0 6 5 6</td><td style="text-align:center;"></td></tr></tbody></table><ul><li><p>使用银行家算法填充Need矩阵。</p><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>P0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>P1</td><td>0</td><td>7</td><td>5</td><td>0</td></tr><tr><td>P2</td><td>1</td><td>0</td><td>0</td><td>2</td></tr><tr><td>P3</td><td>0</td><td>0</td><td>2</td><td>0</td></tr><tr><td>P4</td><td>0</td><td>6</td><td>4</td><td>2</td></tr></tbody></table></li><li><p>此时的系统安全吗？</p><p><mark>安全</mark></p></li><li><p>进程P1提交了一个资源申请(0,4,2,0)，能立即分配给他吗？</p><p><mark>能</mark></p></li></ul></li></ol><h2 id="test-4" tabindex="-1"><a class="header-anchor" href="#test-4" aria-hidden="true">#</a> TEST 4</h2><ol><li><p>临界区是指进程中用于实现进程通信的那段代码。</p><ul><li><mark>错误</mark></li><li>正确 <code>指进程中用于实现共享资源的那段代码</code></li></ul></li><li><p>==？==用信号量的wait、signal操作可以解决__________互斥问题。</p><ul><li>某些</li><li>所有</li><li>一类 <mark>x</mark></li><li>以上说法都不正确</li></ul></li><li><p>对两个并发进程，其互斥信号量为mutex；若mutex=0，则表示：</p><blockquote><p>当mutex＝1时，表示两个进程皆未进入需要互斥的临界区； 当mutex＝0时，表示有一个进程进入临界区且没有进程等待进入时； 当mutex＝－1时，表示有一个进程正在临界区运行，另外一个进程因等待而阻塞在信号量队列中，需要被当前已在临界区运行的进程退出时唤醒。</p></blockquote><ul><li>临界区内有一个进程，且另一个进程正处于等待进入临界区状态</li><li>临界区内没有进程</li><li><mark>临界区内有一个进程，且另一个进程也未申请进入临界区</mark></li><li>临界区内有二个进程</li></ul></li><li><p>在15个生产者、11个消费者共享容量为10的缓冲器的生产者-消费者问题中，互斥使用缓冲器的信号量mutex的初始值为__________。</p><blockquote><p>当前只运行一个进程运行</p></blockquote><ul><li><mark>1</mark></li><li>10</li><li>11</li><li>15</li></ul></li><li><p>设与某资源相关的信号量初值为5，当前值为2。若M表示（当前）该资源的可用个数，N表示（当前）等待该资源的进程数。则M、N分别是：</p><blockquote><p>信号量当前值为 2，说明当前资源可用数 2；</p><p>又当前仍有可用资源，所以当前无等待进程。</p></blockquote><ul><li><p>0，0</p></li><li><p>0，1</p></li><li><p>1，0</p></li><li><p>1，2</p></li><li><p><mark>2，0</mark></p></li><li><p>2，2</p></li><li><p>3，0</p></li><li><p>5，0</p></li></ul></li><li><p>定义进程p0和p1的共享变量及初值为：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
boolean flag<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>；
flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>FALSE<span class="token punctuation">;</span> flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>FALSE<span class="token punctuation">;</span>
<span class="token comment">// 若进程p0和p1访问临界资源的类C代码实现如下：(记i为0时j为1，i为1时j为0)</span>
<span class="token keyword">void</span> <span class="token function">Pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//进程pi</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    turn <span class="token operator">=</span> j<span class="token punctuation">;</span>
    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>turn<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 临界区;</span>
    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则并发执行进程p0和p1时产生的情况是：</p><ul><li>不能保证进程互斥进入临界区</li><li>能保证进程互斥进入临界区，但不能保证“有空让进”</li><li><mark>能保证进程互斥进入临界区，能保证“有空让进”</mark></li></ul></li><li><p>有两个并发执行的进程P1和P2，共享初值为2的变量x。P1对x加1，P2对x减2。减2操作通过二个减1操作来完成，加1和减1操作的指令序列分別如下所示： <strong>//加1操作</strong> get R1, x //取x的值到寄存器R1中 inc R1 //寄存器R1 加 1 save R1, x //将 R1 的内容存入 x <strong>//减 1 操作</strong> get R2, x dec R2 //寄存器 R2 减 1 save R2, x 两个操作完成后，x的值为：</p><ul><li><mark>可能为0、1、2、3</mark></li><li>可能为0、1、3</li><li>可能为0、2、3</li><li>可能为1、2、3</li></ul></li><li><p>数组buff[0..n-1] 中的每个元素都是一个缓冲区。现用信号量机制来实现向缓冲区放一个数据data的算法put(data)和从缓冲区取一个数据data的算法get(data)。设一个缓冲区正好放一个数据，先放入的数据要先取出，且put和get可并发运行。 请完成下列算法流程的填充：</p></li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> front<span class="token operator">=</span>rear<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于in/out，指针</span>
semaphore mutex_put<span class="token operator">=</span>mutex_get<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//信号量[内核对象]</span>
semaphore empty<span class="token operator">=</span>n<span class="token punctuation">;</span> full<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 空1;</span>
    <span class="token function">wait</span><span class="token punctuation">(</span>mutex_put<span class="token punctuation">)</span><span class="token punctuation">;</span>
    put data to buff<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">;</span>
    rear<span class="token operator">=</span><span class="token function">mod</span><span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 空2;</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 空3;</span>
    <span class="token comment">// 空4;</span>
    get data from buff<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
    front<span class="token operator">=</span><span class="token function">mod</span><span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>mutext_get<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>1.互斥的wait(mutex)和signal(mutex)必须成对地出现；</p><p>2.对资源信号量empty和full的wait和signal操作，同样需要成对地出现，但它们分别处于不同的程序中。</p><p>3.每个程序中的多个wait操作顺序不能颠倒。应先执行对资源信号量的wait操作，然后再执行对互斥信号量的wait操作，否则可能引起进程死锁。</p></blockquote><blockquote><ul><li><p>空缓冲区不为满，生产者才能将生产的数据放入缓冲区中。</p></li><li><p>满缓冲区不为空，消费者才能从缓冲区中取数据。</p></li><li><p>为了保证进程同步，生产者与消费者不可以同时访问缓冲区。</p></li></ul></blockquote><ul><li><mark>wait(empty)</mark></li><li><mark>signal(mutex_put)</mark></li><li><mark>wait(full)</mark></li><li><mark>wait(mutex_get)</mark></li></ul><ol start="9"><li><p>某理发馆有2个理发师和6个供顾客等待的座位。顾客到达理发馆时，若有空座位，则到取号机上领取一个唯一号，等待叫号。取号机每次仅允许一位顾客使用，get_ticket()返回顾客取到的号，put_ticket()返回理发师待服务的号。当理发师空闲时，通过叫号选取一位顾客，并为其理发。请为顾客和理发师的活动过程描述算法填充合适的语句：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Semaphore seats<span class="token operator">=</span> <span class="token comment">// 空1;</span>
Semaphore mutex<span class="token operator">=</span> <span class="token comment">// 空2;</span>
Semaphore customer<span class="token operator">=</span> <span class="token comment">// 空3;</span>
Semaphore barber<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ticket_now<span class="token punctuation">;</span>
cobegin <span class="token punctuation">{</span>
Process 顾客i <span class="token punctuation">{</span>
    <span class="token comment">// 空4;</span>
    <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从取号机上取一个号</span>
    <span class="token keyword">int</span> tn<span class="token operator">=</span><span class="token function">get_ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 空5;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ticket_now <span class="token operator">&lt;</span> tn<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">wait</span><span class="token punctuation">(</span>barber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待叫号；</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 空6;</span>
    接受服务（理发）<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
Process 理发师j <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 空7;</span>
    	<span class="token comment">// 空8;</span>
        <span class="token comment">// 从取号机上获取待服务的号</span>
        ticket_now<span class="token operator">=</span><span class="token function">put_ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">signal</span><span class="token punctuation">(</span>barber<span class="token punctuation">)</span><span class="token punctuation">;</span>
        为顾客服务（理发）<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> coend
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>临界区</strong>: 我们把并发进程中与共享变量有关的程序段称为临界区。</p><p><strong>信号量</strong>: 信号量的值与相应资源的使用情况有关。当它的值大于0时，表示当前可用资源的数量；当它的值小于0时，其绝对值表示等待使用该资源的进程个数。</p><p><strong>进程的互斥</strong>: 是指当有若干个进程都要使用某一共享资源时，任何时刻最多只允许-一个进程去使用该资源，其他要使用它的进程必须等待，直到该资源的占用着释放了该资源。</p><p><strong>进程的同步</strong>: 是指在并发进程之间存在这一种制约关系，一个进程依赖另一个进程的消息，当一个进程没有得到另一个进程的消息时应等待，直到消息到达才被唤醒。</p><p><code>pv操作又称wait,signal原语</code>: 主要是操作进程中对进程控制的信息量的加减控制。</p><p>p[wait]: 信号量 - 1，如果信息量&gt;=0，则该进程继续执行；否则该进程置为等待状态，排入等待队列。</p><p>v[signal]: 信号量 + 1，如果信息量&gt;0，则该进程继续执行；否则释放队列中第一个等待信号量的进程。</p></blockquote><blockquote><p>n个理发师通过开n个理发师进程实现？</p></blockquote><ul><li><mark>6</mark></li><li><mark>1</mark></li><li><mark>0</mark></li><li><mark>wait(seats)</mark> // 等待座位减少 1</li><li><mark>signal(customer)</mark> // 顾客加 1</li><li><mark>signal(seats)</mark> // 等待座位加 1</li><li><mark>wait(customer)</mark> // 顾客减少 1</li><li><mark>wait(mutex)</mark> // 等待取号</li></ul></li></ol><h2 id="online" tabindex="-1"><a class="header-anchor" href="#online" aria-hidden="true">#</a> Online</h2>`,28),r={href:"https://blog.csdn.net/MarshaZheng/article/details/82715636",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/MarshaZheng/article/details/84639441?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"有一个文件描述符为fd的已打开的文件，其内容是字节序列：49, 3, 4, 4, 4, 53, 57, 66, 4, 4, 4, 4, 49, 69, 101, 54, 49, 50, 51, 52。char buffer[10]初始化为全0，则依次全部执行完下面的系统调用： 1）lseek(fd, 4, SEEK_SET); 2）read(fd, buffer, 4); 3）lseek(fd, 3, SEEK_CUR); 4）read(fd, buffer+6, 3); 5）lseek(fd, -6, SEEK_END); 6）read(fd, buffer+4, 1); 后，buffer中的值是：4、53、57、66、69、0、66、4、4、0。 其中系统调用lseek()中SEEK_SET为从文件头开始、SEEK_CUR为从当前位置开始、SEEK_END为从文件尾开始。",-1),m=n("p",null,"SEEK_SET 将读写位置指向文件头后再增加offset个位移量。",-1),v=n("p",null,"SEEK_CUR 以目前的读写位置往后增加offset个位移量。",-1),b=n("p",null,"SEEK_END 将读写位置指向文件尾后再增加offset个位移量。",-1),h=n("p",null,"当whence 值为SEEK_CUR 或SEEK_END时，参数offet允许负值的出现。",-1),_=n("p",null,[n("strong",null,"read参数"),s("：int handle 为要读取的文件")],-1),g=n("p",null,"​ void *buf 为要将读取的内容保存的缓冲区",-1),f=n("p",null,"​ int len 读取文件的长度",-1);function x(y,w){const a=i("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",r,[s("现代操作系统 第三章 内存管理 习题"),t(a)])]),n("p",null,[n("a",d,[s("2018操作系统期末试题"),t(a)])]),k,m,v,b,h,_,g,f])}const C=l(c,[["render",x],["__file","操作系统练习.html.vue"]]);export{C as default};
